/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/images/leagues sync recursive ^\\.\\/.*\\.png$":
/*!************************************************!*\
  !*** ./src/images/leagues/ sync ^\.\/.*\.png$ ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var map = {
	"./Elite_Series.png": "(app-pages-browser)/./src/images/leagues/Elite_Series.png",
	"./Esports_Balkan_League.png": "(app-pages-browser)/./src/images/leagues/Esports_Balkan_League.png",
	"./Hitpoint_Masters.png": "(app-pages-browser)/./src/images/leagues/Hitpoint_Masters.png",
	"./LCK_CL.png": "(app-pages-browser)/./src/images/leagues/LCK_CL.png",
	"./LPLOL.png": "(app-pages-browser)/./src/images/leagues/LPLOL.png",
	"./NLC.png": "(app-pages-browser)/./src/images/leagues/NLC.png",
	"./Prime_League_1st_Division.png": "(app-pages-browser)/./src/images/leagues/Prime_League_1st_Division.png",
	"./Turkey_Academy_League.png": "(app-pages-browser)/./src/images/leagues/Turkey_Academy_League.png",
	"./cblol.png": "(app-pages-browser)/./src/images/leagues/cblol.png",
	"./lck.png": "(app-pages-browser)/./src/images/leagues/lck.png",
	"./lcknav.png": "(app-pages-browser)/./src/images/leagues/lcknav.png",
	"./lco.png": "(app-pages-browser)/./src/images/leagues/lco.png",
	"./lcs.png": "(app-pages-browser)/./src/images/leagues/lcs.png",
	"./lec.png": "(app-pages-browser)/./src/images/leagues/lec.png",
	"./lecnav.png": "(app-pages-browser)/./src/images/leagues/lecnav.png",
	"./lfl.png": "(app-pages-browser)/./src/images/leagues/lfl.png",
	"./ljl.png": "(app-pages-browser)/./src/images/leagues/ljl.png",
	"./lla.png": "(app-pages-browser)/./src/images/leagues/lla.png",
	"./llanav.png": "(app-pages-browser)/./src/images/leagues/llanav.png",
	"./lpl.png": "(app-pages-browser)/./src/images/leagues/lpl.png",
	"./lvp_superliga.png": "(app-pages-browser)/./src/images/leagues/lvp_superliga.png",
	"./na_academy_league.png": "(app-pages-browser)/./src/images/leagues/na_academy_league.png",
	"./pcs.png": "(app-pages-browser)/./src/images/leagues/pcs.png",
	"./tcl.png": "(app-pages-browser)/./src/images/leagues/tcl.png",
	"./ultraliga.png": "(app-pages-browser)/./src/images/leagues/ultraliga.png",
	"./vcs.png": "(app-pages-browser)/./src/images/leagues/vcs.png"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "(app-pages-browser)/./src/images/leagues sync recursive ^\\.\\/.*\\.png$";

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDisposer: function() { return /* binding */ addDisposer; },\n/* harmony export */   addMiddleware: function() { return /* binding */ addMiddleware; },\n/* harmony export */   applyAction: function() { return /* binding */ applyAction; },\n/* harmony export */   applyPatch: function() { return /* binding */ applyPatch; },\n/* harmony export */   applySnapshot: function() { return /* binding */ applySnapshot; },\n/* harmony export */   cast: function() { return /* binding */ cast; },\n/* harmony export */   castFlowReturn: function() { return /* binding */ castFlowReturn; },\n/* harmony export */   castToReferenceSnapshot: function() { return /* binding */ castToReferenceSnapshot; },\n/* harmony export */   castToSnapshot: function() { return /* binding */ castToSnapshot; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   createActionTrackingMiddleware: function() { return /* binding */ createActionTrackingMiddleware; },\n/* harmony export */   createActionTrackingMiddleware2: function() { return /* binding */ createActionTrackingMiddleware2; },\n/* harmony export */   decorate: function() { return /* binding */ decorate; },\n/* harmony export */   destroy: function() { return /* binding */ destroy; },\n/* harmony export */   detach: function() { return /* binding */ detach; },\n/* harmony export */   escapeJsonPath: function() { return /* binding */ escapeJsonPath; },\n/* harmony export */   flow: function() { return /* binding */ flow; },\n/* harmony export */   getChildType: function() { return /* binding */ getChildType; },\n/* harmony export */   getEnv: function() { return /* binding */ getEnv; },\n/* harmony export */   getIdentifier: function() { return /* binding */ getIdentifier; },\n/* harmony export */   getLivelinessChecking: function() { return /* binding */ getLivelinessChecking; },\n/* harmony export */   getMembers: function() { return /* binding */ getMembers; },\n/* harmony export */   getNodeId: function() { return /* binding */ getNodeId; },\n/* harmony export */   getParent: function() { return /* binding */ getParent; },\n/* harmony export */   getParentOfType: function() { return /* binding */ getParentOfType; },\n/* harmony export */   getPath: function() { return /* binding */ getPath; },\n/* harmony export */   getPathParts: function() { return /* binding */ getPathParts; },\n/* harmony export */   getPropertyMembers: function() { return /* binding */ getPropertyMembers; },\n/* harmony export */   getRelativePath: function() { return /* binding */ getRelativePath; },\n/* harmony export */   getRoot: function() { return /* binding */ getRoot; },\n/* harmony export */   getRunningActionContext: function() { return /* binding */ getRunningActionContext; },\n/* harmony export */   getSnapshot: function() { return /* binding */ getSnapshot; },\n/* harmony export */   getType: function() { return /* binding */ getType; },\n/* harmony export */   hasParent: function() { return /* binding */ hasParent; },\n/* harmony export */   hasParentOfType: function() { return /* binding */ hasParentOfType; },\n/* harmony export */   isActionContextChildOf: function() { return /* binding */ isActionContextChildOf; },\n/* harmony export */   isActionContextThisOrChildOf: function() { return /* binding */ isActionContextThisOrChildOf; },\n/* harmony export */   isAlive: function() { return /* binding */ isAlive; },\n/* harmony export */   isArrayType: function() { return /* binding */ isArrayType; },\n/* harmony export */   isFrozenType: function() { return /* binding */ isFrozenType; },\n/* harmony export */   isIdentifierType: function() { return /* binding */ isIdentifierType; },\n/* harmony export */   isLateType: function() { return /* binding */ isLateType; },\n/* harmony export */   isLiteralType: function() { return /* binding */ isLiteralType; },\n/* harmony export */   isMapType: function() { return /* binding */ isMapType; },\n/* harmony export */   isModelType: function() { return /* binding */ isModelType; },\n/* harmony export */   isOptionalType: function() { return /* binding */ isOptionalType; },\n/* harmony export */   isPrimitiveType: function() { return /* binding */ isPrimitiveType; },\n/* harmony export */   isProtected: function() { return /* binding */ isProtected; },\n/* harmony export */   isReferenceType: function() { return /* binding */ isReferenceType; },\n/* harmony export */   isRefinementType: function() { return /* binding */ isRefinementType; },\n/* harmony export */   isRoot: function() { return /* binding */ isRoot; },\n/* harmony export */   isStateTreeNode: function() { return /* binding */ isStateTreeNode; },\n/* harmony export */   isType: function() { return /* binding */ isType; },\n/* harmony export */   isUnionType: function() { return /* binding */ isUnionType; },\n/* harmony export */   isValidReference: function() { return /* binding */ isValidReference; },\n/* harmony export */   joinJsonPath: function() { return /* binding */ joinJsonPath; },\n/* harmony export */   onAction: function() { return /* binding */ onAction; },\n/* harmony export */   onPatch: function() { return /* binding */ onPatch; },\n/* harmony export */   onSnapshot: function() { return /* binding */ onSnapshot; },\n/* harmony export */   process: function() { return /* binding */ process$1; },\n/* harmony export */   protect: function() { return /* binding */ protect; },\n/* harmony export */   recordActions: function() { return /* binding */ recordActions; },\n/* harmony export */   recordPatches: function() { return /* binding */ recordPatches; },\n/* harmony export */   resolveIdentifier: function() { return /* binding */ resolveIdentifier; },\n/* harmony export */   resolvePath: function() { return /* binding */ resolvePath; },\n/* harmony export */   setLivelinessChecking: function() { return /* binding */ setLivelinessChecking; },\n/* harmony export */   setLivelynessChecking: function() { return /* binding */ setLivelynessChecking; },\n/* harmony export */   splitJsonPath: function() { return /* binding */ splitJsonPath; },\n/* harmony export */   toGenerator: function() { return /* binding */ toGenerator; },\n/* harmony export */   toGeneratorFunction: function() { return /* binding */ toGeneratorFunction; },\n/* harmony export */   tryReference: function() { return /* binding */ tryReference; },\n/* harmony export */   tryResolve: function() { return /* binding */ tryResolve; },\n/* harmony export */   typecheck: function() { return /* binding */ typecheck; },\n/* harmony export */   types: function() { return /* binding */ types; },\n/* harmony export */   unescapeJsonPath: function() { return /* binding */ unescapeJsonPath; },\n/* harmony export */   unprotect: function() { return /* binding */ unprotect; },\n/* harmony export */   walk: function() { return /* binding */ walk; }\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ \"(app-pages-browser)/./node_modules/mobx/dist/mobx.esm.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\n\n\nvar livelinessChecking = \"warn\";\n/**\n * Defines what MST should do when running into reads / writes to objects that have died.\n * By default it will print a warning.\n * Use the `\"error\"` option to easy debugging to see where the error was thrown and when the offending read / write took place\n *\n * @param mode `\"warn\"`, `\"error\"` or `\"ignore\"`\n */\nfunction setLivelinessChecking(mode) {\n    livelinessChecking = mode;\n}\n/**\n * Returns the current liveliness checking mode.\n *\n * @returns `\"warn\"`, `\"error\"` or `\"ignore\"`\n */\nfunction getLivelinessChecking() {\n    return livelinessChecking;\n}\n/**\n * @deprecated use setLivelinessChecking instead\n * @hidden\n *\n * Defines what MST should do when running into reads / writes to objects that have died.\n * By default it will print a warning.\n * Use the `\"error\"` option to easy debugging to see where the error was thrown and when the offending read / write took place\n *\n * @param mode `\"warn\"`, `\"error\"` or `\"ignore\"`\n */\nfunction setLivelynessChecking(mode) {\n    setLivelinessChecking(mode);\n}\n\n/**\n * @hidden\n */\nvar Hook;\n(function (Hook) {\n    Hook[\"afterCreate\"] = \"afterCreate\";\n    Hook[\"afterAttach\"] = \"afterAttach\";\n    Hook[\"afterCreationFinalization\"] = \"afterCreationFinalization\";\n    Hook[\"beforeDetach\"] = \"beforeDetach\";\n    Hook[\"beforeDestroy\"] = \"beforeDestroy\";\n})(Hook || (Hook = {}));\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\n/**\n * Returns the _actual_ type of the given tree node. (Or throws)\n *\n * @param object\n * @returns\n */\nfunction getType(object) {\n    assertIsStateTreeNode(object, 1);\n    return getStateTreeNode(object).type;\n}\n/**\n * Returns the _declared_ type of the given sub property of an object, array or map.\n * In the case of arrays and maps the property name is optional and will be ignored.\n *\n * Example:\n * ```ts\n * const Box = types.model({ x: 0, y: 0 })\n * const box = Box.create()\n *\n * console.log(getChildType(box, \"x\").name) // 'number'\n * ```\n *\n * @param object\n * @param propertyName\n * @returns\n */\nfunction getChildType(object, propertyName) {\n    assertIsStateTreeNode(object, 1);\n    return getStateTreeNode(object).getChildType(propertyName);\n}\n/**\n * Registers a function that will be invoked for each mutation that is applied to the provided model instance, or to any of its children.\n * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details. onPatch events are emitted immediately and will not await the end of a transaction.\n * Patches can be used to deep observe a model tree.\n *\n * @param target the model instance from which to receive patches\n * @param callback the callback that is invoked for each patch. The reversePatch is a patch that would actually undo the emitted patch\n * @returns function to remove the listener\n */\nfunction onPatch(target, callback) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsFunction(callback, 2);\n    return getStateTreeNode(target).onPatch(callback);\n}\n/**\n * Registers a function that is invoked whenever a new snapshot for the given model instance is available.\n * The listener will only be fire at the end of the current MobX (trans)action.\n * See [snapshots](https://github.com/mobxjs/mobx-state-tree#snapshots) for more details.\n *\n * @param target\n * @param callback\n * @returns\n */\nfunction onSnapshot(target, callback) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsFunction(callback, 2);\n    return getStateTreeNode(target).onSnapshot(callback);\n}\n/**\n * Applies a JSON-patch to the given model instance or bails out if the patch couldn't be applied\n * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details.\n *\n * Can apply a single past, or an array of patches.\n *\n * @param target\n * @param patch\n * @returns\n */\nfunction applyPatch(target, patch) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertArg(patch, function (p) { return typeof p === \"object\"; }, \"object or array\", 2);\n    getStateTreeNode(target).applyPatches(asArray(patch));\n}\n/**\n * Small abstraction around `onPatch` and `applyPatch`, attaches a patch listener to a tree and records all the patches.\n * Returns an recorder object with the following signature:\n *\n * Example:\n * ```ts\n * export interface IPatchRecorder {\n *      // the recorded patches\n *      patches: IJsonPatch[]\n *      // the inverse of the recorded patches\n *      inversePatches: IJsonPatch[]\n *      // true if currently recording\n *      recording: boolean\n *      // stop recording patches\n *      stop(): void\n *      // resume recording patches\n *      resume(): void\n *      // apply all the recorded patches on the given target (the original subject if omitted)\n *      replay(target?: IAnyStateTreeNode): void\n *      // reverse apply the recorded patches on the given target  (the original subject if omitted)\n *      // stops the recorder if not already stopped\n *      undo(): void\n * }\n * ```\n *\n * The optional filter function allows to skip recording certain patches.\n *\n * @param subject\n * @param filter\n * @returns\n */\nfunction recordPatches(subject, filter) {\n    // check all arguments\n    assertIsStateTreeNode(subject, 1);\n    var data = {\n        patches: [],\n        reversedInversePatches: []\n    };\n    // we will generate the immutable copy of patches on demand for public consumption\n    var publicData = {};\n    var disposer;\n    var recorder = {\n        get recording() {\n            return !!disposer;\n        },\n        get patches() {\n            if (!publicData.patches) {\n                publicData.patches = data.patches.slice();\n            }\n            return publicData.patches;\n        },\n        get reversedInversePatches() {\n            if (!publicData.reversedInversePatches) {\n                publicData.reversedInversePatches = data.reversedInversePatches.slice();\n            }\n            return publicData.reversedInversePatches;\n        },\n        get inversePatches() {\n            if (!publicData.inversePatches) {\n                publicData.inversePatches = data.reversedInversePatches.slice().reverse();\n            }\n            return publicData.inversePatches;\n        },\n        stop: function () {\n            if (disposer) {\n                disposer();\n                disposer = undefined;\n            }\n        },\n        resume: function () {\n            if (disposer)\n                return;\n            disposer = onPatch(subject, function (patch, inversePatch) {\n                // skip patches that are asked to be filtered if there's a filter in place\n                if (filter && !filter(patch, inversePatch, getRunningActionContext())) {\n                    return;\n                }\n                data.patches.push(patch);\n                data.reversedInversePatches.unshift(inversePatch);\n                // mark immutable public patches as dirty\n                publicData.patches = undefined;\n                publicData.inversePatches = undefined;\n                publicData.reversedInversePatches = undefined;\n            });\n        },\n        replay: function (target) {\n            applyPatch(target || subject, data.patches);\n        },\n        undo: function (target) {\n            applyPatch(target || subject, data.reversedInversePatches);\n        }\n    };\n    recorder.resume();\n    return recorder;\n}\n/**\n * The inverse of `unprotect`.\n *\n * @param target\n */\nfunction protect(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    var node = getStateTreeNode(target);\n    if (!node.isRoot)\n        throw fail$1(\"`protect` can only be invoked on root nodes\");\n    node.isProtectionEnabled = true;\n}\n/**\n * By default it is not allowed to directly modify a model. Models can only be modified through actions.\n * However, in some cases you don't care about the advantages (like replayability, traceability, etc) this yields.\n * For example because you are building a PoC or don't have any middleware attached to your tree.\n *\n * In that case you can disable this protection by calling `unprotect` on the root of your tree.\n *\n * Example:\n * ```ts\n * const Todo = types.model({\n *     done: false\n * }).actions(self => ({\n *     toggle() {\n *         self.done = !self.done\n *     }\n * }))\n *\n * const todo = Todo.create()\n * todo.done = true // throws!\n * todo.toggle() // OK\n * unprotect(todo)\n * todo.done = false // OK\n * ```\n */\nfunction unprotect(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    var node = getStateTreeNode(target);\n    if (!node.isRoot)\n        throw fail$1(\"`unprotect` can only be invoked on root nodes\");\n    node.isProtectionEnabled = false;\n}\n/**\n * Returns true if the object is in protected mode, @see protect\n */\nfunction isProtected(target) {\n    return getStateTreeNode(target).isProtected;\n}\n/**\n * Applies a snapshot to a given model instances. Patch and snapshot listeners will be invoked as usual.\n *\n * @param target\n * @param snapshot\n * @returns\n */\nfunction applySnapshot(target, snapshot) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).applySnapshot(snapshot);\n}\n/**\n * Calculates a snapshot from the given model instance. The snapshot will always reflect the latest state but use\n * structural sharing where possible. Doesn't require MobX transactions to be completed.\n *\n * @param target\n * @param applyPostProcess If true (the default) then postProcessSnapshot gets applied.\n * @returns\n */\nfunction getSnapshot(target, applyPostProcess) {\n    if (applyPostProcess === void 0) { applyPostProcess = true; }\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    var node = getStateTreeNode(target);\n    if (applyPostProcess)\n        return node.snapshot;\n    return freeze(node.type.getSnapshot(node, false));\n}\n/**\n * Given a model instance, returns `true` if the object has a parent, that is, is part of another object, map or array.\n *\n * @param target\n * @param depth How far should we look upward? 1 by default.\n * @returns\n */\nfunction hasParent(target, depth) {\n    if (depth === void 0) { depth = 1; }\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsNumber(depth, 2, 0);\n    var parent = getStateTreeNode(target).parent;\n    while (parent) {\n        if (--depth === 0)\n            return true;\n        parent = parent.parent;\n    }\n    return false;\n}\n/**\n * Returns the immediate parent of this object, or throws.\n *\n * Note that the immediate parent can be either an object, map or array, and\n * doesn't necessarily refer to the parent model.\n *\n * Please note that in child nodes access to the root is only possible\n * once the `afterAttach` hook has fired.\n *\n * @param target\n * @param depth How far should we look upward? 1 by default.\n * @returns\n */\nfunction getParent(target, depth) {\n    if (depth === void 0) { depth = 1; }\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsNumber(depth, 2, 0);\n    var d = depth;\n    var parent = getStateTreeNode(target).parent;\n    while (parent) {\n        if (--d === 0)\n            return parent.storedValue;\n        parent = parent.parent;\n    }\n    throw fail$1(\"Failed to find the parent of \" + getStateTreeNode(target) + \" at depth \" + depth);\n}\n/**\n * Given a model instance, returns `true` if the object has a parent of given type, that is, is part of another object, map or array\n *\n * @param target\n * @param type\n * @returns\n */\nfunction hasParentOfType(target, type) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsType(type, 2);\n    var parent = getStateTreeNode(target).parent;\n    while (parent) {\n        if (type.is(parent.storedValue))\n            return true;\n        parent = parent.parent;\n    }\n    return false;\n}\n/**\n * Returns the target's parent of a given type, or throws.\n *\n * @param target\n * @param type\n * @returns\n */\nfunction getParentOfType(target, type) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsType(type, 2);\n    var parent = getStateTreeNode(target).parent;\n    while (parent) {\n        if (type.is(parent.storedValue))\n            return parent.storedValue;\n        parent = parent.parent;\n    }\n    throw fail$1(\"Failed to find the parent of \" + getStateTreeNode(target) + \" of a given type\");\n}\n/**\n * Given an object in a model tree, returns the root object of that tree.\n *\n * Please note that in child nodes access to the root is only possible\n * once the `afterAttach` hook has fired.\n *\n * @param target\n * @returns\n */\nfunction getRoot(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).root.storedValue;\n}\n/**\n * Returns the path of the given object in the model tree\n *\n * @param target\n * @returns\n */\nfunction getPath(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).path;\n}\n/**\n * Returns the path of the given object as unescaped string array.\n *\n * @param target\n * @returns\n */\nfunction getPathParts(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return splitJsonPath(getStateTreeNode(target).path);\n}\n/**\n * Returns true if the given object is the root of a model tree.\n *\n * @param target\n * @returns\n */\nfunction isRoot(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).isRoot;\n}\n/**\n * Resolves a path relatively to a given object.\n * Returns undefined if no value can be found.\n *\n * @param target\n * @param path escaped json path\n * @returns\n */\nfunction resolvePath(target, path) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsString(path, 2);\n    var node = resolveNodeByPath(getStateTreeNode(target), path);\n    return node ? node.value : undefined;\n}\n/**\n * Resolves a model instance given a root target, the type and the identifier you are searching for.\n * Returns undefined if no value can be found.\n *\n * @param type\n * @param target\n * @param identifier\n * @returns\n */\nfunction resolveIdentifier(type, target, identifier) {\n    // check all arguments\n    assertIsType(type, 1);\n    assertIsStateTreeNode(target, 2);\n    assertIsValidIdentifier(identifier, 3);\n    var node = getStateTreeNode(target).root.identifierCache.resolve(type, normalizeIdentifier(identifier));\n    return node === null || node === void 0 ? void 0 : node.value;\n}\n/**\n * Returns the identifier of the target node.\n * This is the *string normalized* identifier, which might not match the type of the identifier attribute\n *\n * @param target\n * @returns\n */\nfunction getIdentifier(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).identifier;\n}\n/**\n * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns such reference if it the check passes,\n * else it returns undefined.\n *\n * @param getter Function to access the reference.\n * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.\n * @returns\n */\nfunction tryReference(getter, checkIfAlive) {\n    if (checkIfAlive === void 0) { checkIfAlive = true; }\n    try {\n        var node = getter();\n        if (node === undefined || node === null) {\n            return undefined;\n        }\n        else if (isStateTreeNode(node)) {\n            if (!checkIfAlive) {\n                return node;\n            }\n            else {\n                return isAlive(node) ? node : undefined;\n            }\n        }\n        else {\n            throw fail$1(\"The reference to be checked is not one of node, null or undefined\");\n        }\n    }\n    catch (e) {\n        if (e instanceof InvalidReferenceError) {\n            return undefined;\n        }\n        throw e;\n    }\n}\n/**\n * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns if the check passes or not.\n *\n * @param getter Function to access the reference.\n * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.\n * @returns\n */\nfunction isValidReference(getter, checkIfAlive) {\n    if (checkIfAlive === void 0) { checkIfAlive = true; }\n    try {\n        var node = getter();\n        if (node === undefined || node === null) {\n            return false;\n        }\n        else if (isStateTreeNode(node)) {\n            return checkIfAlive ? isAlive(node) : true;\n        }\n        else {\n            throw fail$1(\"The reference to be checked is not one of node, null or undefined\");\n        }\n    }\n    catch (e) {\n        if (e instanceof InvalidReferenceError) {\n            return false;\n        }\n        throw e;\n    }\n}\n/**\n * Try to resolve a given path relative to a given node.\n *\n * @param target\n * @param path\n * @returns\n */\nfunction tryResolve(target, path) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsString(path, 2);\n    var node = resolveNodeByPath(getStateTreeNode(target), path, false);\n    if (node === undefined)\n        return undefined;\n    try {\n        return node.value;\n    }\n    catch (e) {\n        // For what ever reason not resolvable (e.g. totally not existing path, or value that cannot be fetched)\n        // see test / issue: 'try resolve doesn't work #686'\n        return undefined;\n    }\n}\n/**\n * Given two state tree nodes that are part of the same tree,\n * returns the shortest jsonpath needed to navigate from the one to the other\n *\n * @param base\n * @param target\n * @returns\n */\nfunction getRelativePath(base, target) {\n    // check all arguments\n    assertIsStateTreeNode(base, 1);\n    assertIsStateTreeNode(target, 2);\n    return getRelativePathBetweenNodes(getStateTreeNode(base), getStateTreeNode(target));\n}\n/**\n * Returns a deep copy of the given state tree node as new tree.\n * Short hand for `snapshot(x) = getType(x).create(getSnapshot(x))`\n *\n * _Tip: clone will create a literal copy, including the same identifiers. To modify identifiers etc during cloning, don't use clone but take a snapshot of the tree, modify it, and create new instance_\n *\n * @param source\n * @param keepEnvironment indicates whether the clone should inherit the same environment (`true`, the default), or not have an environment (`false`). If an object is passed in as second argument, that will act as the environment for the cloned tree.\n * @returns\n */\nfunction clone(source, keepEnvironment) {\n    if (keepEnvironment === void 0) { keepEnvironment = true; }\n    // check all arguments\n    assertIsStateTreeNode(source, 1);\n    var node = getStateTreeNode(source);\n    return node.type.create(node.snapshot, keepEnvironment === true\n        ? node.root.environment\n        : keepEnvironment === false\n            ? undefined\n            : keepEnvironment); // it's an object or something else\n}\n/**\n * Removes a model element from the state tree, and let it live on as a new state tree\n */\nfunction detach(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    getStateTreeNode(target).detach();\n    return target;\n}\n/**\n * Removes a model element from the state tree, and mark it as end-of-life; the element should not be used anymore\n */\nfunction destroy(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    var node = getStateTreeNode(target);\n    if (node.isRoot)\n        node.die();\n    else\n        node.parent.removeChild(node.subpath);\n}\n/**\n * Returns true if the given state tree node is not killed yet.\n * This means that the node is still a part of a tree, and that `destroy`\n * has not been called. If a node is not alive anymore, the only thing one can do with it\n * is requesting it's last path and snapshot\n *\n * @param target\n * @returns\n */\nfunction isAlive(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).observableIsAlive;\n}\n/**\n * Use this utility to register a function that should be called whenever the\n * targeted state tree node is destroyed. This is a useful alternative to managing\n * cleanup methods yourself using the `beforeDestroy` hook.\n *\n * This methods returns the same disposer that was passed as argument.\n *\n * Example:\n * ```ts\n * const Todo = types.model({\n *   title: types.string\n * }).actions(self => ({\n *   afterCreate() {\n *     const autoSaveDisposer = reaction(\n *       () => getSnapshot(self),\n *       snapshot => sendSnapshotToServerSomehow(snapshot)\n *     )\n *     // stop sending updates to server if this\n *     // instance is destroyed\n *     addDisposer(self, autoSaveDisposer)\n *   }\n * }))\n * ```\n *\n * @param target\n * @param disposer\n * @returns The same disposer that was passed as argument\n */\nfunction addDisposer(target, disposer) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsFunction(disposer, 2);\n    var node = getStateTreeNode(target);\n    node.addDisposer(disposer);\n    return disposer;\n}\n/**\n * Returns the environment of the current state tree. For more info on environments,\n * see [Dependency injection](https://github.com/mobxjs/mobx-state-tree#dependency-injection)\n *\n * Please note that in child nodes access to the root is only possible\n * once the `afterAttach` hook has fired\n *\n * Returns an empty environment if the tree wasn't initialized with an environment\n *\n * @param target\n * @returns\n */\nfunction getEnv(target) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    var node = getStateTreeNode(target);\n    var env = node.root.environment;\n    if (!env)\n        return EMPTY_OBJECT;\n    return env;\n}\n/**\n * Performs a depth first walk through a tree.\n */\nfunction walk(target, processor) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertIsFunction(processor, 2);\n    var node = getStateTreeNode(target);\n    // tslint:disable-next-line:no_unused-variable\n    node.getChildren().forEach(function (child) {\n        if (isStateTreeNode(child.storedValue))\n            walk(child.storedValue, processor);\n    });\n    processor(node.storedValue);\n}\n/**\n * Returns a reflection of the model type properties and name for either a model type or model node.\n *\n * @param typeOrNode\n * @returns\n */\nfunction getPropertyMembers(typeOrNode) {\n    var type;\n    if (isStateTreeNode(typeOrNode)) {\n        type = getType(typeOrNode);\n    }\n    else {\n        type = typeOrNode;\n    }\n    assertArg(type, function (t) { return isModelType(t); }, \"model type or model instance\", 1);\n    return {\n        name: type.name,\n        properties: __assign({}, type.properties)\n    };\n}\n/**\n * Returns a reflection of the model node, including name, properties, views, volatile and actions.\n *\n * @param target\n * @returns\n */\nfunction getMembers(target) {\n    var type = getStateTreeNode(target).type;\n    var reflected = __assign(__assign({}, getPropertyMembers(type)), { actions: [], volatile: [], views: [] });\n    var props = Object.getOwnPropertyNames(target);\n    props.forEach(function (key) {\n        if (key in reflected.properties)\n            return;\n        var descriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (descriptor.get) {\n            if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isComputedProp)(target, key))\n                reflected.views.push(key);\n            else\n                reflected.volatile.push(key);\n            return;\n        }\n        if (descriptor.value._isMSTAction === true)\n            reflected.actions.push(key);\n        else if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableProp)(target, key))\n            reflected.volatile.push(key);\n        else\n            reflected.views.push(key);\n    });\n    return reflected;\n}\n/**\n * Casts a node snapshot or instance type to an instance type so it can be assigned to a type instance.\n * Note that this is just a cast for the type system, this is, it won't actually convert a snapshot to an instance,\n * but just fool typescript into thinking so.\n * Either way, casting when outside an assignation operation won't compile.\n *\n * Example:\n * ```ts\n * const ModelA = types.model({\n *   n: types.number\n * }).actions(self => ({\n *   setN(aNumber: number) {\n *     self.n = aNumber\n *   }\n * }))\n *\n * const ModelB = types.model({\n *   innerModel: ModelA\n * }).actions(self => ({\n *   someAction() {\n *     // this will allow the compiler to assign a snapshot to the property\n *     self.innerModel = cast({ a: 5 })\n *   }\n * }))\n * ```\n *\n * @param snapshotOrInstance Snapshot or instance\n * @returns The same object casted as an instance\n */\nfunction cast(snapshotOrInstance) {\n    return snapshotOrInstance;\n}\n/**\n * Casts a node instance type to an snapshot type so it can be assigned to a type snapshot (e.g. to be used inside a create call).\n * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a snapshot,\n * but just fool typescript into thinking so.\n *\n * Example:\n * ```ts\n * const ModelA = types.model({\n *   n: types.number\n * }).actions(self => ({\n *   setN(aNumber: number) {\n *     self.n = aNumber\n *   }\n * }))\n *\n * const ModelB = types.model({\n *   innerModel: ModelA\n * })\n *\n * const a = ModelA.create({ n: 5 });\n * // this will allow the compiler to use a model as if it were a snapshot\n * const b = ModelB.create({ innerModel: castToSnapshot(a)})\n * ```\n *\n * @param snapshotOrInstance Snapshot or instance\n * @returns The same object casted as an input (creation) snapshot\n */\nfunction castToSnapshot(snapshotOrInstance) {\n    return snapshotOrInstance;\n}\n/**\n * Casts a node instance type to a reference snapshot type so it can be assigned to a refernence snapshot (e.g. to be used inside a create call).\n * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a refererence snapshot,\n * but just fool typescript into thinking so.\n *\n * Example:\n * ```ts\n * const ModelA = types.model({\n *   id: types.identifier,\n *   n: types.number\n * }).actions(self => ({\n *   setN(aNumber: number) {\n *     self.n = aNumber\n *   }\n * }))\n *\n * const ModelB = types.model({\n *   refA: types.reference(ModelA)\n * })\n *\n * const a = ModelA.create({ id: 'someId', n: 5 });\n * // this will allow the compiler to use a model as if it were a reference snapshot\n * const b = ModelB.create({ refA: castToReferenceSnapshot(a)})\n * ```\n *\n * @param instance Instance\n * @returns The same object casted as an reference snapshot (string or number)\n */\nfunction castToReferenceSnapshot(instance) {\n    return instance;\n}\n/**\n * Returns the unique node id (not to be confused with the instance identifier) for a\n * given instance.\n * This id is a number that is unique for each instance.\n *\n * @export\n * @param target\n * @returns\n */\nfunction getNodeId(target) {\n    assertIsStateTreeNode(target, 1);\n    return getStateTreeNode(target).nodeId;\n}\n\n/**\n * @internal\n * @hidden\n */\nvar BaseNode = /** @class */ (function () {\n    function BaseNode(type, parent, subpath, environment) {\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: type\n        });\n        Object.defineProperty(this, \"environment\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: environment\n        });\n        Object.defineProperty(this, \"_escapedSubpath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_subpath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_subpathUponDeath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_pathUponDeath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"storedValue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // usually the same type as the value, but not always (such as with references)\n        Object.defineProperty(this, \"aliveAtom\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: NodeLifeCycle.INITIALIZING\n        });\n        Object.defineProperty(this, \"_hookSubscribers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_parent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pathAtom\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.environment = environment;\n        this.baseSetParent(parent, subpath);\n    }\n    Object.defineProperty(BaseNode.prototype, \"subpath\", {\n        get: function () {\n            return this._subpath;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"subpathUponDeath\", {\n        get: function () {\n            return this._subpathUponDeath;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"pathUponDeath\", {\n        get: function () {\n            return this._pathUponDeath;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"value\", {\n        get: function () {\n            return this.type.getValue(this);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"state\", {\n        get: function () {\n            return this._state;\n        },\n        set: function (val) {\n            var wasAlive = this.isAlive;\n            this._state = val;\n            var isAlive = this.isAlive;\n            if (this.aliveAtom && wasAlive !== isAlive) {\n                this.aliveAtom.reportChanged();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"fireInternalHook\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (name) {\n            if (this._hookSubscribers) {\n                this._hookSubscribers.emit(name, this, name);\n            }\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"registerHook\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (hook, hookHandler) {\n            if (!this._hookSubscribers) {\n                this._hookSubscribers = new EventHandlers();\n            }\n            return this._hookSubscribers.register(hook, hookHandler);\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"parent\", {\n        get: function () {\n            return this._parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"getReconciliationType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.type;\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"baseSetParent\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath) {\n            this._parent = parent;\n            this._subpath = subpath;\n            this._escapedSubpath = undefined; // regenerate when needed\n            if (this.pathAtom) {\n                this.pathAtom.reportChanged();\n            }\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"path\", {\n        /*\n         * Returns (escaped) path representation as string\n         */\n        get: function () {\n            return this.getEscapedPath(true);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"getEscapedPath\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (reportObserved) {\n            if (reportObserved) {\n                if (!this.pathAtom) {\n                    this.pathAtom = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"path\");\n                }\n                this.pathAtom.reportObserved();\n            }\n            if (!this.parent)\n                return \"\";\n            // regenerate escaped subpath if needed\n            if (this._escapedSubpath === undefined) {\n                this._escapedSubpath = !this._subpath ? \"\" : escapeJsonPath(this._subpath);\n            }\n            return this.parent.getEscapedPath(reportObserved) + \"/\" + this._escapedSubpath;\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"isRoot\", {\n        get: function () {\n            return this.parent === null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"isAlive\", {\n        get: function () {\n            return this.state !== NodeLifeCycle.DEAD;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"isDetaching\", {\n        get: function () {\n            return this.state === NodeLifeCycle.DETACHING;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"observableIsAlive\", {\n        get: function () {\n            if (!this.aliveAtom) {\n                this.aliveAtom = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)(\"alive\");\n            }\n            this.aliveAtom.reportObserved();\n            return this.isAlive;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseNode.prototype, \"baseFinalizeCreation\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (whenFinalized) {\n            if (devMode()) {\n                if (!this.isAlive) {\n                    // istanbul ignore next\n                    throw fail(\"assertion failed: cannot finalize the creation of a node that is already dead\");\n                }\n            }\n            // goal: afterCreate hooks runs depth-first. After attach runs parent first, so on afterAttach the parent has completed already\n            if (this.state === NodeLifeCycle.CREATED) {\n                if (this.parent) {\n                    if (this.parent.state !== NodeLifeCycle.FINALIZED) {\n                        // parent not ready yet, postpone\n                        return;\n                    }\n                    this.fireHook(Hook.afterAttach);\n                }\n                this.state = NodeLifeCycle.FINALIZED;\n                if (whenFinalized) {\n                    whenFinalized();\n                }\n            }\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"baseFinalizeDeath\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this._hookSubscribers) {\n                this._hookSubscribers.clearAll();\n            }\n            this._subpathUponDeath = this._subpath;\n            this._pathUponDeath = this.getEscapedPath(false);\n            this.baseSetParent(null, \"\");\n            this.state = NodeLifeCycle.DEAD;\n        }\n    });\n    Object.defineProperty(BaseNode.prototype, \"baseAboutToDie\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.fireHook(Hook.beforeDestroy);\n        }\n    });\n    return BaseNode;\n}());\n\n/**\n * @internal\n * @hidden\n */\nvar ScalarNode = /** @class */ (function (_super) {\n    __extends(ScalarNode, _super);\n    function ScalarNode(simpleType, parent, subpath, environment, initialSnapshot) {\n        var _this = _super.call(this, simpleType, parent, subpath, environment) || this;\n        try {\n            _this.storedValue = simpleType.createNewInstance(initialSnapshot);\n        }\n        catch (e) {\n            // short-cut to die the instance, to avoid the snapshot computed starting to throw...\n            _this.state = NodeLifeCycle.DEAD;\n            throw e;\n        }\n        _this.state = NodeLifeCycle.CREATED;\n        // for scalar nodes there's no point in firing this event since it would fire on the constructor, before\n        // anybody can actually register for/listen to it\n        // this.fireHook(Hook.AfterCreate)\n        _this.finalizeCreation();\n        return _this;\n    }\n    Object.defineProperty(ScalarNode.prototype, \"root\", {\n        get: function () {\n            // future optimization: store root ref in the node and maintain it\n            if (!this.parent)\n                throw fail$1(\"This scalar node is not part of a tree\");\n            return this.parent.root;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScalarNode.prototype, \"setParent\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (newParent, subpath) {\n            var parentChanged = this.parent !== newParent;\n            var subpathChanged = this.subpath !== subpath;\n            if (!parentChanged && !subpathChanged) {\n                return;\n            }\n            if (devMode()) {\n                if (!subpath) {\n                    // istanbul ignore next\n                    throw fail$1(\"assertion failed: subpath expected\");\n                }\n                if (!newParent) {\n                    // istanbul ignore next\n                    throw fail$1(\"assertion failed: parent expected\");\n                }\n                if (parentChanged) {\n                    // istanbul ignore next\n                    throw fail$1(\"assertion failed: scalar nodes cannot change their parent\");\n                }\n            }\n            this.environment = undefined; // use parent's\n            this.baseSetParent(this.parent, subpath);\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"snapshot\", {\n        get: function () {\n            return freeze(this.getSnapshot());\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScalarNode.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.type.getSnapshot(this);\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"toString\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var path = (this.isAlive ? this.path : this.pathUponDeath) || \"<root>\";\n            return this.type.name + \"@\" + path + (this.isAlive ? \"\" : \" [dead]\");\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"die\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (!this.isAlive || this.state === NodeLifeCycle.DETACHING)\n                return;\n            this.aboutToDie();\n            this.finalizeDeath();\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"finalizeCreation\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.baseFinalizeCreation();\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"aboutToDie\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.baseAboutToDie();\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"finalizeDeath\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.baseFinalizeDeath();\n        }\n    });\n    Object.defineProperty(ScalarNode.prototype, \"fireHook\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (name) {\n            this.fireInternalHook(name);\n        }\n    });\n    return ScalarNode;\n}(BaseNode));\nScalarNode.prototype.die = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ScalarNode.prototype.die);\n\nvar nextNodeId = 1;\nvar snapshotReactionOptions = {\n    onError: function (e) {\n        throw e;\n    }\n};\n/**\n * @internal\n * @hidden\n */\nvar ObjectNode = /** @class */ (function (_super) {\n    __extends(ObjectNode, _super);\n    function ObjectNode(complexType, parent, subpath, environment, initialValue) {\n        var _this = _super.call(this, complexType, parent, subpath, environment) || this;\n        Object.defineProperty(_this, \"nodeId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ++nextNodeId\n        });\n        Object.defineProperty(_this, \"identifierAttribute\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"identifier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // Identifier is always normalized to string, even if the identifier property isn't\n        Object.defineProperty(_this, \"unnormalizedIdentifier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"identifierCache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"isProtectionEnabled\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(_this, \"middlewares\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_applyPatches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_applySnapshot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_autoUnbox\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        }); // unboxing is disabled when reading child nodes\n        Object.defineProperty(_this, \"_isRunningAction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        }); // only relevant for root\n        Object.defineProperty(_this, \"_hasSnapshotReaction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(_this, \"_observableInstanceState\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0 /* UNINITIALIZED */\n        });\n        Object.defineProperty(_this, \"_childNodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_initialSnapshot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_cachedInitialSnapshot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_cachedInitialSnapshotCreated\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(_this, \"_snapshotComputed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_snapshotUponDeath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // #region internal event handling\n        Object.defineProperty(_this, \"_internalEvents\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _this._snapshotComputed = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(function () { return freeze(_this.getSnapshot()); });\n        _this.unbox = _this.unbox.bind(_this);\n        _this._initialSnapshot = freeze(initialValue);\n        _this.identifierAttribute = complexType.identifierAttribute;\n        if (!parent) {\n            _this.identifierCache = new IdentifierCache();\n        }\n        _this._childNodes = complexType.initializeChildNodes(_this, _this._initialSnapshot);\n        // identifier can not be changed during lifecycle of a node\n        // so we safely can read it from initial snapshot\n        _this.identifier = null;\n        _this.unnormalizedIdentifier = null;\n        if (_this.identifierAttribute && _this._initialSnapshot) {\n            var id = _this._initialSnapshot[_this.identifierAttribute];\n            if (id === undefined) {\n                // try with the actual node if not (for optional identifiers)\n                var childNode = _this._childNodes[_this.identifierAttribute];\n                if (childNode) {\n                    id = childNode.value;\n                }\n            }\n            if (typeof id !== \"string\" && typeof id !== \"number\") {\n                throw fail$1(\"Instance identifier '\" + _this.identifierAttribute + \"' for type '\" + _this.type.name + \"' must be a string or a number\");\n            }\n            // normalize internal identifier to string\n            _this.identifier = normalizeIdentifier(id);\n            _this.unnormalizedIdentifier = id;\n        }\n        if (!parent) {\n            _this.identifierCache.addNodeToCache(_this);\n        }\n        else {\n            parent.root.identifierCache.addNodeToCache(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(ObjectNode.prototype, \"applyPatches\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (patches) {\n            this.createObservableInstanceIfNeeded();\n            this._applyPatches(patches);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"applySnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot) {\n            this.createObservableInstanceIfNeeded();\n            this._applySnapshot(snapshot);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"createObservableInstanceIfNeeded\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this._observableInstanceState === 0 /* UNINITIALIZED */) {\n                this.createObservableInstance();\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"createObservableInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var e_1, _a;\n            if (devMode()) {\n                if (this.state !== NodeLifeCycle.INITIALIZING) {\n                    // istanbul ignore next\n                    throw fail$1(\"assertion failed: the creation of the observable instance must be done on the initializing phase\");\n                }\n            }\n            this._observableInstanceState = 1 /* CREATING */;\n            // make sure the parent chain is created as well\n            // array with parent chain from parent to child\n            var parentChain = [];\n            var parent = this.parent;\n            // for performance reasons we never go back further than the most direct\n            // uninitialized parent\n            // this is done to avoid traversing the whole tree to the root when using\n            // the same reference again\n            while (parent &&\n                parent._observableInstanceState === 0 /* UNINITIALIZED */) {\n                parentChain.unshift(parent);\n                parent = parent.parent;\n            }\n            try {\n                // initialize the uninitialized parent chain from parent to child\n                for (var parentChain_1 = __values(parentChain), parentChain_1_1 = parentChain_1.next(); !parentChain_1_1.done; parentChain_1_1 = parentChain_1.next()) {\n                    var p = parentChain_1_1.value;\n                    p.createObservableInstanceIfNeeded();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (parentChain_1_1 && !parentChain_1_1.done && (_a = parentChain_1.return)) _a.call(parentChain_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var type = this.type;\n            try {\n                this.storedValue = type.createNewInstance(this._childNodes);\n                this.preboot();\n                this._isRunningAction = true;\n                type.finalizeNewInstance(this, this.storedValue);\n            }\n            catch (e) {\n                // short-cut to die the instance, to avoid the snapshot computed starting to throw...\n                this.state = NodeLifeCycle.DEAD;\n                throw e;\n            }\n            finally {\n                this._isRunningAction = false;\n            }\n            this._observableInstanceState = 2 /* CREATED */;\n            this._snapshotComputed.trackAndCompute();\n            if (this.isRoot)\n                this._addSnapshotReaction();\n            this._childNodes = EMPTY_OBJECT;\n            this.state = NodeLifeCycle.CREATED;\n            this.fireHook(Hook.afterCreate);\n            this.finalizeCreation();\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"root\", {\n        get: function () {\n            var parent = this.parent;\n            return parent ? parent.root : this;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObjectNode.prototype, \"clearParent\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (!this.parent)\n                return;\n            // detach if attached\n            this.fireHook(Hook.beforeDetach);\n            var previousState = this.state;\n            this.state = NodeLifeCycle.DETACHING;\n            var root = this.root;\n            var newEnv = root.environment;\n            var newIdCache = root.identifierCache.splitCache(this);\n            try {\n                this.parent.removeChild(this.subpath);\n                this.baseSetParent(null, \"\");\n                this.environment = newEnv;\n                this.identifierCache = newIdCache;\n            }\n            finally {\n                this.state = previousState;\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"setParent\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (newParent, subpath) {\n            var parentChanged = newParent !== this.parent;\n            var subpathChanged = subpath !== this.subpath;\n            if (!parentChanged && !subpathChanged) {\n                return;\n            }\n            if (devMode()) {\n                if (!subpath) {\n                    // istanbul ignore next\n                    throw fail$1(\"assertion failed: subpath expected\");\n                }\n                if (!newParent) {\n                    // istanbul ignore next\n                    throw fail$1(\"assertion failed: new parent expected\");\n                }\n                if (this.parent && parentChanged) {\n                    throw fail$1(\"A node cannot exists twice in the state tree. Failed to add \" + this + \" to path '\" + newParent.path + \"/\" + subpath + \"'.\");\n                }\n                if (!this.parent && newParent.root === this) {\n                    throw fail$1(\"A state tree is not allowed to contain itself. Cannot assign \" + this + \" to path '\" + newParent.path + \"/\" + subpath + \"'\");\n                }\n                if (!this.parent &&\n                    !!this.environment &&\n                    this.environment !== newParent.root.environment) {\n                    throw fail$1(\"A state tree cannot be made part of another state tree as long as their environments are different.\");\n                }\n            }\n            if (parentChanged) {\n                // attach to new parent\n                this.environment = undefined; // will use root's\n                newParent.root.identifierCache.mergeCache(this);\n                this.baseSetParent(newParent, subpath);\n                this.fireHook(Hook.afterAttach);\n            }\n            else if (subpathChanged) {\n                // moving to a new subpath on the same parent\n                this.baseSetParent(this.parent, subpath);\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"fireHook\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (name) {\n            var _this = this;\n            this.fireInternalHook(name);\n            var fn = this.storedValue &&\n                typeof this.storedValue === \"object\" &&\n                this.storedValue[name];\n            if (typeof fn === \"function\") {\n                // we check for it to allow old mobx peer dependencies that don't have the method to work (even when still bugged)\n                if (mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateChangesInsideComputed) {\n                    (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateChangesInsideComputed)(function () {\n                        fn.apply(_this.storedValue);\n                    });\n                }\n                else {\n                    fn.apply(this.storedValue);\n                }\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"snapshot\", {\n        // advantage of using computed for a snapshot is that nicely respects transactions etc.\n        get: function () {\n            return this._snapshotComputed.get();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // NOTE: we use this method to get snapshot without creating @computed overhead\n    Object.defineProperty(ObjectNode.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (!this.isAlive)\n                return this._snapshotUponDeath;\n            return this._observableInstanceState === 2 /* CREATED */\n                ? this._getActualSnapshot()\n                : this._getCachedInitialSnapshot();\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_getActualSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.type.getSnapshot(this);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_getCachedInitialSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (!this._cachedInitialSnapshotCreated) {\n                var type = this.type;\n                var childNodes = this._childNodes;\n                var snapshot = this._initialSnapshot;\n                this._cachedInitialSnapshot = type.processInitialSnapshot(childNodes, snapshot);\n                this._cachedInitialSnapshotCreated = true;\n            }\n            return this._cachedInitialSnapshot;\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"isRunningAction\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this._isRunningAction)\n                return true;\n            if (this.isRoot)\n                return false;\n            return this.parent.isRunningAction();\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"assertAlive\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (context) {\n            var livelinessChecking = getLivelinessChecking();\n            if (!this.isAlive && livelinessChecking !== \"ignore\") {\n                var error = this._getAssertAliveError(context);\n                switch (livelinessChecking) {\n                    case \"error\":\n                        throw fail$1(error);\n                    case \"warn\":\n                        warnError(error);\n                }\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_getAssertAliveError\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (context) {\n            var escapedPath = this.getEscapedPath(false) || this.pathUponDeath || \"\";\n            var subpath = (context.subpath && escapeJsonPath(context.subpath)) || \"\";\n            var actionContext = context.actionContext || getCurrentActionContext();\n            // try to use a real action context if possible since it includes the action name\n            if (actionContext && actionContext.type !== \"action\" && actionContext.parentActionEvent) {\n                actionContext = actionContext.parentActionEvent;\n            }\n            var actionFullPath = \"\";\n            if (actionContext && actionContext.name != null) {\n                // try to use the context, and if it not available use the node one\n                var actionPath = (actionContext && actionContext.context && getPath(actionContext.context)) ||\n                    escapedPath;\n                actionFullPath = actionPath + \".\" + actionContext.name + \"()\";\n            }\n            return \"You are trying to read or write to an object that is no longer part of a state tree. (Object type: '\" + this.type.name + \"', Path upon death: '\" + escapedPath + \"', Subpath: '\" + subpath + \"', Action: '\" + actionFullPath + \"'). Either detach nodes first, or don't use objects after removing / replacing them in the tree.\";\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"getChildNode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (subpath) {\n            this.assertAlive({\n                subpath: subpath\n            });\n            this._autoUnbox = false;\n            try {\n                return this._observableInstanceState === 2 /* CREATED */\n                    ? this.type.getChildNode(this, subpath)\n                    : this._childNodes[subpath];\n            }\n            finally {\n                this._autoUnbox = true;\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"getChildren\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.assertAlive(EMPTY_OBJECT);\n            this._autoUnbox = false;\n            try {\n                return this._observableInstanceState === 2 /* CREATED */\n                    ? this.type.getChildren(this)\n                    : convertChildNodesToArray(this._childNodes);\n            }\n            finally {\n                this._autoUnbox = true;\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"getChildType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (propertyName) {\n            return this.type.getChildType(propertyName);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"isProtected\", {\n        get: function () {\n            return this.root.isProtectionEnabled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObjectNode.prototype, \"assertWritable\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (context) {\n            this.assertAlive(context);\n            if (!this.isRunningAction() && this.isProtected) {\n                throw fail$1(\"Cannot modify '\" + this + \"', the object is protected and can only be modified by using an action.\");\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"removeChild\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (subpath) {\n            this.type.removeChild(this, subpath);\n        }\n    });\n    // bound on the constructor\n    Object.defineProperty(ObjectNode.prototype, \"unbox\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNode) {\n            if (!childNode)\n                return childNode;\n            this.assertAlive({\n                subpath: childNode.subpath || childNode.subpathUponDeath\n            });\n            return this._autoUnbox ? childNode.value : childNode;\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"toString\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var path = (this.isAlive ? this.path : this.pathUponDeath) || \"<root>\";\n            var identifier = this.identifier ? \"(id: \" + this.identifier + \")\" : \"\";\n            return this.type.name + \"@\" + path + identifier + (this.isAlive ? \"\" : \" [dead]\");\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"finalizeCreation\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var _this = this;\n            this.baseFinalizeCreation(function () {\n                var e_2, _a;\n                try {\n                    for (var _b = __values(_this.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var child = _c.value;\n                        child.finalizeCreation();\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                _this.fireInternalHook(Hook.afterCreationFinalization);\n            });\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"detach\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (!this.isAlive)\n                throw fail$1(\"Error while detaching, node is not alive.\");\n            this.clearParent();\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"preboot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var self = this;\n            this._applyPatches = createActionInvoker(this.storedValue, \"@APPLY_PATCHES\", function (patches) {\n                patches.forEach(function (patch) {\n                    if (!patch.path) {\n                        self.type.applySnapshot(self, patch.value);\n                        return;\n                    }\n                    var parts = splitJsonPath(patch.path);\n                    var node = resolveNodeByPathParts(self, parts.slice(0, -1));\n                    node.applyPatchLocally(parts[parts.length - 1], patch);\n                });\n            });\n            this._applySnapshot = createActionInvoker(this.storedValue, \"@APPLY_SNAPSHOT\", function (snapshot) {\n                // if the snapshot is the same as the current one, avoid performing a reconcile\n                if (snapshot === self.snapshot)\n                    return;\n                // else, apply it by calling the type logic\n                return self.type.applySnapshot(self, snapshot);\n            });\n            addHiddenFinalProp(this.storedValue, \"$treenode\", this);\n            addHiddenFinalProp(this.storedValue, \"toJSON\", toJSON);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"die\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (!this.isAlive || this.state === NodeLifeCycle.DETACHING)\n                return;\n            this.aboutToDie();\n            this.finalizeDeath();\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"aboutToDie\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this._observableInstanceState === 0 /* UNINITIALIZED */) {\n                return;\n            }\n            this.getChildren().forEach(function (node) {\n                node.aboutToDie();\n            });\n            // beforeDestroy should run before the disposers since else we could end up in a situation where\n            // a disposer added with addDisposer at this stage (beforeDestroy) is actually never released\n            this.baseAboutToDie();\n            this._internalEventsEmit(\"dispose\" /* Dispose */);\n            this._internalEventsClear(\"dispose\" /* Dispose */);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"finalizeDeath\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            // invariant: not called directly but from \"die\"\n            this.getChildren().forEach(function (node) {\n                node.finalizeDeath();\n            });\n            this.root.identifierCache.notifyDied(this);\n            // \"kill\" the computed prop and just store the last snapshot\n            var snapshot = this.snapshot;\n            this._snapshotUponDeath = snapshot;\n            this._internalEventsClearAll();\n            this.baseFinalizeDeath();\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"onSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (onChange) {\n            this._addSnapshotReaction();\n            return this._internalEventsRegister(\"snapshot\" /* Snapshot */, onChange);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"emitSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot) {\n            this._internalEventsEmit(\"snapshot\" /* Snapshot */, snapshot);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"onPatch\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (handler) {\n            return this._internalEventsRegister(\"patch\" /* Patch */, handler);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"emitPatch\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (basePatch, source) {\n            if (this._internalEventsHasSubscribers(\"patch\" /* Patch */)) {\n                var localizedPatch = extend({}, basePatch, {\n                    path: source.path.substr(this.path.length) + \"/\" + basePatch.path // calculate the relative path of the patch\n                });\n                var _a = __read(splitPatch(localizedPatch), 2), patch = _a[0], reversePatch = _a[1];\n                this._internalEventsEmit(\"patch\" /* Patch */, patch, reversePatch);\n            }\n            if (this.parent)\n                this.parent.emitPatch(basePatch, source);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"hasDisposer\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (disposer) {\n            return this._internalEventsHas(\"dispose\" /* Dispose */, disposer);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"addDisposer\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (disposer) {\n            if (!this.hasDisposer(disposer)) {\n                this._internalEventsRegister(\"dispose\" /* Dispose */, disposer, true);\n                return;\n            }\n            throw fail$1(\"cannot add a disposer when it is already registered for execution\");\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"removeDisposer\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (disposer) {\n            if (!this._internalEventsHas(\"dispose\" /* Dispose */, disposer)) {\n                throw fail$1(\"cannot remove a disposer which was never registered for execution\");\n            }\n            this._internalEventsUnregister(\"dispose\" /* Dispose */, disposer);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"removeMiddleware\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (middleware) {\n            if (this.middlewares) {\n                var index = this.middlewares.indexOf(middleware);\n                if (index >= 0) {\n                    this.middlewares.splice(index, 1);\n                }\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"addMiddleWare\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (handler, includeHooks) {\n            var _this = this;\n            if (includeHooks === void 0) { includeHooks = true; }\n            var middleware = { handler: handler, includeHooks: includeHooks };\n            if (!this.middlewares)\n                this.middlewares = [middleware];\n            else\n                this.middlewares.push(middleware);\n            return function () {\n                _this.removeMiddleware(middleware);\n            };\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"applyPatchLocally\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (subpath, patch) {\n            this.assertWritable({\n                subpath: subpath\n            });\n            this.createObservableInstanceIfNeeded();\n            this.type.applyPatchLocally(this, subpath, patch);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_addSnapshotReaction\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var _this = this;\n            if (!this._hasSnapshotReaction) {\n                var snapshotDisposer = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.reaction)(function () { return _this.snapshot; }, function (snapshot) { return _this.emitSnapshot(snapshot); }, snapshotReactionOptions);\n                this.addDisposer(snapshotDisposer);\n                this._hasSnapshotReaction = true;\n            }\n        }\n    });\n    // we proxy the methods to avoid creating an EventHandlers instance when it is not needed\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsHasSubscribers\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event) {\n            return !!this._internalEvents && this._internalEvents.hasSubscribers(event);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsRegister\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event, eventHandler, atTheBeginning) {\n            if (atTheBeginning === void 0) { atTheBeginning = false; }\n            if (!this._internalEvents) {\n                this._internalEvents = new EventHandlers();\n            }\n            return this._internalEvents.register(event, eventHandler, atTheBeginning);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsHas\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event, eventHandler) {\n            return !!this._internalEvents && this._internalEvents.has(event, eventHandler);\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsUnregister\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event, eventHandler) {\n            if (this._internalEvents) {\n                this._internalEvents.unregister(event, eventHandler);\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsEmit\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event) {\n            var _a;\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (this._internalEvents) {\n                (_a = this._internalEvents).emit.apply(_a, __spread([event], args));\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsClear\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event) {\n            if (this._internalEvents) {\n                this._internalEvents.clear(event);\n            }\n        }\n    });\n    Object.defineProperty(ObjectNode.prototype, \"_internalEventsClearAll\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this._internalEvents) {\n                this._internalEvents.clearAll();\n            }\n        }\n    });\n    return ObjectNode;\n}(BaseNode));\nObjectNode.prototype.createObservableInstance = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ObjectNode.prototype.createObservableInstance);\nObjectNode.prototype.detach = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ObjectNode.prototype.detach);\nObjectNode.prototype.die = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ObjectNode.prototype.die);\n\nvar _a;\n/**\n * @internal\n * @hidden\n */\nvar TypeFlags;\n(function (TypeFlags) {\n    TypeFlags[TypeFlags[\"String\"] = 1] = \"String\";\n    TypeFlags[TypeFlags[\"Number\"] = 2] = \"Number\";\n    TypeFlags[TypeFlags[\"Boolean\"] = 4] = \"Boolean\";\n    TypeFlags[TypeFlags[\"Date\"] = 8] = \"Date\";\n    TypeFlags[TypeFlags[\"Literal\"] = 16] = \"Literal\";\n    TypeFlags[TypeFlags[\"Array\"] = 32] = \"Array\";\n    TypeFlags[TypeFlags[\"Map\"] = 64] = \"Map\";\n    TypeFlags[TypeFlags[\"Object\"] = 128] = \"Object\";\n    TypeFlags[TypeFlags[\"Frozen\"] = 256] = \"Frozen\";\n    TypeFlags[TypeFlags[\"Optional\"] = 512] = \"Optional\";\n    TypeFlags[TypeFlags[\"Reference\"] = 1024] = \"Reference\";\n    TypeFlags[TypeFlags[\"Identifier\"] = 2048] = \"Identifier\";\n    TypeFlags[TypeFlags[\"Late\"] = 4096] = \"Late\";\n    TypeFlags[TypeFlags[\"Refinement\"] = 8192] = \"Refinement\";\n    TypeFlags[TypeFlags[\"Union\"] = 16384] = \"Union\";\n    TypeFlags[TypeFlags[\"Null\"] = 32768] = \"Null\";\n    TypeFlags[TypeFlags[\"Undefined\"] = 65536] = \"Undefined\";\n    TypeFlags[TypeFlags[\"Integer\"] = 131072] = \"Integer\";\n    TypeFlags[TypeFlags[\"Custom\"] = 262144] = \"Custom\";\n    TypeFlags[TypeFlags[\"SnapshotProcessor\"] = 524288] = \"SnapshotProcessor\";\n})(TypeFlags || (TypeFlags = {}));\n/**\n * @internal\n * @hidden\n */\nvar cannotDetermineSubtype = \"cannotDetermine\";\n/** @hidden */\nvar $type = Symbol(\"$type\");\n/**\n * A base type produces a MST node (Node in the state tree)\n *\n * @internal\n * @hidden\n */\nvar BaseType = /** @class */ (function () {\n    function BaseType(name) {\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // these are just to make inner types avaialable to inherited classes\n        Object.defineProperty(this, \"C\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"S\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"T\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"N\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"isType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = name;\n    }\n    Object.defineProperty(BaseType.prototype, \"create\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot, environment) {\n            typecheckInternal(this, snapshot);\n            return this.instantiate(null, \"\", environment, snapshot).value;\n        }\n    });\n    Object.defineProperty(BaseType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, applyPostProcess) {\n            // istanbul ignore next\n            throw fail$1(\"unimplemented method\");\n        }\n    });\n    Object.defineProperty(BaseType.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            return type === this;\n        }\n    });\n    Object.defineProperty(BaseType.prototype, \"validate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var node = getStateTreeNodeSafe(value);\n            if (node) {\n                var valueType = getType(value);\n                return this.isAssignableFrom(valueType)\n                    ? typeCheckSuccess()\n                    : typeCheckFailure(context, value);\n                // it is tempting to compare snapshots, but in that case we should always clone on assignments...\n            }\n            return this.isValidSnapshot(value, context);\n        }\n    });\n    Object.defineProperty(BaseType.prototype, \"is\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (thing) {\n            return this.validate(thing, [{ path: \"\", type: this }]).length === 0;\n        }\n    });\n    Object.defineProperty(BaseType.prototype, \"Type\", {\n        get: function () {\n            // istanbul ignore next\n            throw fail$1(\"Factory.Type should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.Type`\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseType.prototype, \"TypeWithoutSTN\", {\n        get: function () {\n            // istanbul ignore next\n            throw fail$1(\"Factory.TypeWithoutSTN should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.TypeWithoutSTN`\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseType.prototype, \"SnapshotType\", {\n        get: function () {\n            // istanbul ignore next\n            throw fail$1(\"Factory.SnapshotType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.SnapshotType`\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseType.prototype, \"CreationType\", {\n        get: function () {\n            // istanbul ignore next\n            throw fail$1(\"Factory.CreationType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.CreationType`\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return BaseType;\n}());\n_a = $type;\nBaseType.prototype.create = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(BaseType.prototype.create);\n/**\n * A complex type produces a MST node (Node in the state tree)\n *\n * @internal\n * @hidden\n */\nvar ComplexType = /** @class */ (function (_super) {\n    __extends(ComplexType, _super);\n    function ComplexType(name) {\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"identifierAttribute\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        return _this;\n    }\n    Object.defineProperty(ComplexType.prototype, \"create\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot, environment) {\n            if (snapshot === void 0) { snapshot = this.getDefaultSnapshot(); }\n            return _super.prototype.create.call(this, snapshot, environment);\n        }\n    });\n    Object.defineProperty(ComplexType.prototype, \"getValue\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            node.createObservableInstanceIfNeeded();\n            return node.storedValue;\n        }\n    });\n    Object.defineProperty(ComplexType.prototype, \"isMatchingSnapshotId\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, snapshot) {\n            return (!current.identifierAttribute ||\n                current.identifier ===\n                    normalizeIdentifier(snapshot[current.identifierAttribute]));\n        }\n    });\n    Object.defineProperty(ComplexType.prototype, \"tryToReconcileNode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue) {\n            if (current.isDetaching)\n                return false;\n            if (current.snapshot === newValue) {\n                // newValue is the current snapshot of the node, noop\n                return true;\n            }\n            if (isStateTreeNode(newValue) && getStateTreeNode(newValue) === current) {\n                // the current node is the same as the new one\n                return true;\n            }\n            if (current.type === this &&\n                isMutable(newValue) &&\n                !isStateTreeNode(newValue) &&\n                this.isMatchingSnapshotId(current, newValue)) {\n                // the newValue has no node, so can be treated like a snapshot\n                // we can reconcile\n                current.applySnapshot(newValue);\n                return true;\n            }\n            return false;\n        }\n    });\n    Object.defineProperty(ComplexType.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            var nodeReconciled = this.tryToReconcileNode(current, newValue);\n            if (nodeReconciled) {\n                current.setParent(parent, subpath);\n                return current;\n            }\n            // current node cannot be recycled in any way\n            current.die(); // noop if detaching\n            // attempt to reuse the new one\n            if (isStateTreeNode(newValue) && this.isAssignableFrom(getType(newValue))) {\n                // newValue is a Node as well, move it here..\n                var newNode = getStateTreeNode(newValue);\n                newNode.setParent(parent, subpath);\n                return newNode;\n            }\n            // nothing to do, we have to create a new node\n            return this.instantiate(parent, subpath, undefined, newValue);\n        }\n    });\n    Object.defineProperty(ComplexType.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return null;\n        }\n    });\n    return ComplexType;\n}(BaseType));\nComplexType.prototype.create = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ComplexType.prototype.create);\n/**\n * @internal\n * @hidden\n */\nvar SimpleType = /** @class */ (function (_super) {\n    __extends(SimpleType, _super);\n    function SimpleType() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(SimpleType.prototype, \"createNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot) {\n            return snapshot;\n        }\n    });\n    Object.defineProperty(SimpleType.prototype, \"getValue\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            // if we ever find a case where scalar nodes can be accessed without iterating through its parent\n            // uncomment this to make sure the parent chain is created when this is accessed\n            // if (node.parent) {\n            //     node.parent.createObservableInstanceIfNeeded()\n            // }\n            return node.storedValue;\n        }\n    });\n    Object.defineProperty(SimpleType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            return node.storedValue;\n        }\n    });\n    Object.defineProperty(SimpleType.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            // reconcile only if type and value are still the same, and only if the node is not detaching\n            if (!current.isDetaching && current.type === this && current.storedValue === newValue) {\n                return current;\n            }\n            var res = this.instantiate(parent, subpath, undefined, newValue);\n            current.die(); // noop if detaching\n            return res;\n        }\n    });\n    Object.defineProperty(SimpleType.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return null;\n        }\n    });\n    return SimpleType;\n}(BaseType));\n/**\n * Returns if a given value represents a type.\n *\n * @param value Value to check.\n * @returns `true` if the value is a type.\n */\nfunction isType(value) {\n    return typeof value === \"object\" && value && value.isType === true;\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertIsType(type, argNumber) {\n    assertArg(type, isType, \"mobx-state-tree type\", argNumber);\n}\n\nvar runningActions = new Map();\n/**\n * Note: Consider migrating to `createActionTrackingMiddleware2`, it is easier to use.\n *\n * Convenience utility to create action based middleware that supports async processes more easily.\n * All hooks are called for both synchronous and asynchronous actions. Except that either `onSuccess` or `onFail` is called\n *\n * The create middleware tracks the process of an action (assuming it passes the `filter`).\n * `onResume` can return any value, which will be passed as second argument to any other hook. This makes it possible to keep state during a process.\n *\n * See the `atomic` middleware for an example\n *\n * @param hooks\n * @returns\n */\nfunction createActionTrackingMiddleware(hooks) {\n    return function actionTrackingMiddleware(call, next, abort) {\n        switch (call.type) {\n            case \"action\": {\n                if (!hooks.filter || hooks.filter(call) === true) {\n                    var context = hooks.onStart(call);\n                    hooks.onResume(call, context);\n                    runningActions.set(call.id, {\n                        call: call,\n                        context: context,\n                        async: false\n                    });\n                    try {\n                        var res = next(call);\n                        hooks.onSuspend(call, context);\n                        if (runningActions.get(call.id).async === false) {\n                            runningActions.delete(call.id);\n                            hooks.onSuccess(call, context, res);\n                        }\n                        return res;\n                    }\n                    catch (e) {\n                        runningActions.delete(call.id);\n                        hooks.onFail(call, context, e);\n                        throw e;\n                    }\n                }\n                else {\n                    return next(call);\n                }\n            }\n            case \"flow_spawn\": {\n                var root = runningActions.get(call.rootId);\n                root.async = true;\n                return next(call);\n            }\n            case \"flow_resume\":\n            case \"flow_resume_error\": {\n                var root = runningActions.get(call.rootId);\n                hooks.onResume(call, root.context);\n                try {\n                    return next(call);\n                }\n                finally {\n                    hooks.onSuspend(call, root.context);\n                }\n            }\n            case \"flow_throw\": {\n                var root = runningActions.get(call.rootId);\n                runningActions.delete(call.rootId);\n                hooks.onFail(call, root.context, call.args[0]);\n                return next(call);\n            }\n            case \"flow_return\": {\n                var root = runningActions.get(call.rootId);\n                runningActions.delete(call.rootId);\n                hooks.onSuccess(call, root.context, call.args[0]);\n                return next(call);\n            }\n        }\n    };\n}\n\nvar RunningAction = /** @class */ (function () {\n    function RunningAction(hooks, call) {\n        Object.defineProperty(this, \"hooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: hooks\n        });\n        Object.defineProperty(this, \"call\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: call\n        });\n        Object.defineProperty(this, \"flowsPending\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"running\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        if (hooks) {\n            hooks.onStart(call);\n        }\n    }\n    Object.defineProperty(RunningAction.prototype, \"finish\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (error) {\n            if (this.running) {\n                this.running = false;\n                if (this.hooks) {\n                    this.hooks.onFinish(this.call, error);\n                }\n            }\n        }\n    });\n    Object.defineProperty(RunningAction.prototype, \"incFlowsPending\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.flowsPending++;\n        }\n    });\n    Object.defineProperty(RunningAction.prototype, \"decFlowsPending\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.flowsPending--;\n        }\n    });\n    Object.defineProperty(RunningAction.prototype, \"hasFlowsPending\", {\n        get: function () {\n            return this.flowsPending > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return RunningAction;\n}());\n/**\n * Convenience utility to create action based middleware that supports async processes more easily.\n * The flow is like this:\n * - for each action: if filter passes -> `onStart` -> (inner actions recursively) -> `onFinish`\n *\n * Example: if we had an action `a` that called inside an action `b1`, then `b2` the flow would be:\n * - `filter(a)`\n * - `onStart(a)`\n *   - `filter(b1)`\n *   - `onStart(b1)`\n *   - `onFinish(b1)`\n *   - `filter(b2)`\n *   - `onStart(b2)`\n *   - `onFinish(b2)`\n * - `onFinish(a)`\n *\n * The flow is the same no matter if the actions are sync or async.\n *\n * See the `atomic` middleware for an example\n *\n * @param hooks\n * @returns\n */\nfunction createActionTrackingMiddleware2(middlewareHooks) {\n    var runningActions = new WeakMap();\n    return function actionTrackingMiddleware(call, next) {\n        // find parentRunningAction\n        var parentRunningAction = call.parentActionEvent\n            ? runningActions.get(call.parentActionEvent)\n            : undefined;\n        if (call.type === \"action\") {\n            var newCall = __assign(__assign({}, call), { \n                // make a shallow copy of the parent action env\n                env: parentRunningAction && parentRunningAction.call.env, parentCall: parentRunningAction && parentRunningAction.call });\n            var passesFilter = !middlewareHooks.filter || middlewareHooks.filter(newCall);\n            var hooks = passesFilter ? middlewareHooks : undefined;\n            var runningAction = new RunningAction(hooks, newCall);\n            runningActions.set(call, runningAction);\n            var res = void 0;\n            try {\n                res = next(call);\n            }\n            catch (e) {\n                runningAction.finish(e);\n                throw e;\n            }\n            if (!runningAction.hasFlowsPending) {\n                // sync action finished\n                runningAction.finish();\n            }\n            return res;\n        }\n        else {\n            if (!parentRunningAction) {\n                return next(call);\n            }\n            switch (call.type) {\n                case \"flow_spawn\": {\n                    parentRunningAction.incFlowsPending();\n                    return next(call);\n                }\n                case \"flow_resume\":\n                case \"flow_resume_error\": {\n                    return next(call);\n                }\n                case \"flow_throw\": {\n                    var error = call.args[0];\n                    try {\n                        return next(call);\n                    }\n                    finally {\n                        parentRunningAction.decFlowsPending();\n                        if (!parentRunningAction.hasFlowsPending) {\n                            parentRunningAction.finish(error);\n                        }\n                    }\n                }\n                case \"flow_return\": {\n                    try {\n                        return next(call);\n                    }\n                    finally {\n                        parentRunningAction.decFlowsPending();\n                        if (!parentRunningAction.hasFlowsPending) {\n                            parentRunningAction.finish();\n                        }\n                    }\n                }\n            }\n        }\n    };\n}\n\nfunction serializeArgument(node, actionName, index, arg) {\n    if (arg instanceof Date)\n        return { $MST_DATE: arg.getTime() };\n    if (isPrimitive(arg))\n        return arg;\n    // We should not serialize MST nodes, even if we can, because we don't know if the receiving party can handle a raw snapshot instead of an\n    // MST type instance. So if one wants to serialize a MST node that was pass in, either explitly pass: 1: an id, 2: a (relative) path, 3: a snapshot\n    if (isStateTreeNode(arg))\n        return serializeTheUnserializable(\"[MSTNode: \" + getType(arg).name + \"]\");\n    if (typeof arg === \"function\")\n        return serializeTheUnserializable(\"[function]\");\n    if (typeof arg === \"object\" && !isPlainObject(arg) && !isArray(arg))\n        return serializeTheUnserializable(\"[object \" + ((arg && arg.constructor && arg.constructor.name) ||\n            \"Complex Object\") + \"]\");\n    try {\n        // Check if serializable, cycle free etc...\n        // MWE: there must be a better way....\n        JSON.stringify(arg); // or throws\n        return arg;\n    }\n    catch (e) {\n        return serializeTheUnserializable(\"\" + e);\n    }\n}\nfunction deserializeArgument(adm, value) {\n    if (value && typeof value === \"object\" && \"$MST_DATE\" in value)\n        return new Date(value[\"$MST_DATE\"]);\n    return value;\n}\nfunction serializeTheUnserializable(baseType) {\n    return {\n        $MST_UNSERIALIZABLE: true,\n        type: baseType\n    };\n}\n/**\n * Applies an action or a series of actions in a single MobX transaction.\n * Does not return any value\n * Takes an action description as produced by the `onAction` middleware.\n *\n * @param target\n * @param actions\n */\nfunction applyAction(target, actions) {\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    assertArg(actions, function (a) { return typeof a === \"object\"; }, \"object or array\", 2);\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(function () {\n        asArray(actions).forEach(function (action) { return baseApplyAction(target, action); });\n    });\n}\nfunction baseApplyAction(target, action) {\n    var resolvedTarget = tryResolve(target, action.path || \"\");\n    if (!resolvedTarget)\n        throw fail$1(\"Invalid action path: \" + (action.path || \"\"));\n    var node = getStateTreeNode(resolvedTarget);\n    // Reserved functions\n    if (action.name === \"@APPLY_PATCHES\") {\n        return applyPatch.call(null, resolvedTarget, action.args[0]);\n    }\n    if (action.name === \"@APPLY_SNAPSHOT\") {\n        return applySnapshot.call(null, resolvedTarget, action.args[0]);\n    }\n    if (!(typeof resolvedTarget[action.name] === \"function\"))\n        throw fail$1(\"Action '\" + action.name + \"' does not exist in '\" + node.path + \"'\");\n    return resolvedTarget[action.name].apply(resolvedTarget, action.args ? action.args.map(function (v) { return deserializeArgument(node, v); }) : []);\n}\n/**\n * Small abstraction around `onAction` and `applyAction`, attaches an action listener to a tree and records all the actions emitted.\n * Returns an recorder object with the following signature:\n *\n * Example:\n * ```ts\n * export interface IActionRecorder {\n *      // the recorded actions\n *      actions: ISerializedActionCall[]\n *      // true if currently recording\n *      recording: boolean\n *      // stop recording actions\n *      stop(): void\n *      // resume recording actions\n *      resume(): void\n *      // apply all the recorded actions on the given object\n *      replay(target: IAnyStateTreeNode): void\n * }\n * ```\n *\n * The optional filter function allows to skip recording certain actions.\n *\n * @param subject\n * @returns\n */\nfunction recordActions(subject, filter) {\n    // check all arguments\n    assertIsStateTreeNode(subject, 1);\n    var actions = [];\n    var listener = function (call) {\n        var recordThis = filter ? filter(call, getRunningActionContext()) : true;\n        if (recordThis) {\n            actions.push(call);\n        }\n    };\n    var disposer;\n    var recorder = {\n        actions: actions,\n        get recording() {\n            return !!disposer;\n        },\n        stop: function () {\n            if (disposer) {\n                disposer();\n                disposer = undefined;\n            }\n        },\n        resume: function () {\n            if (disposer)\n                return;\n            disposer = onAction(subject, listener);\n        },\n        replay: function (target) {\n            applyAction(target, actions);\n        }\n    };\n    recorder.resume();\n    return recorder;\n}\n/**\n * Registers a function that will be invoked for each action that is called on the provided model instance, or to any of its children.\n * See [actions](https://github.com/mobxjs/mobx-state-tree#actions) for more details. onAction events are emitted only for the outermost called action in the stack.\n * Action can also be intercepted by middleware using addMiddleware to change the function call before it will be run.\n *\n * Not all action arguments might be serializable. For unserializable arguments, a struct like `{ $MST_UNSERIALIZABLE: true, type: \"someType\" }` will be generated.\n * MST Nodes are considered non-serializable as well (they could be serialized as there snapshot, but it is uncertain whether an replaying party will be able to handle such a non-instantiated snapshot).\n * Rather, when using `onAction` middleware, one should consider in passing arguments which are 1: an id, 2: a (relative) path, or 3: a snapshot. Instead of a real MST node.\n *\n * Example:\n * ```ts\n * const Todo = types.model({\n *   task: types.string\n * })\n *\n * const TodoStore = types.model({\n *   todos: types.array(Todo)\n * }).actions(self => ({\n *   add(todo) {\n *     self.todos.push(todo);\n *   }\n * }))\n *\n * const s = TodoStore.create({ todos: [] })\n *\n * let disposer = onAction(s, (call) => {\n *   console.log(call);\n * })\n *\n * s.add({ task: \"Grab a coffee\" })\n * // Logs: { name: \"add\", path: \"\", args: [{ task: \"Grab a coffee\" }] }\n * ```\n *\n * @param target\n * @param listener\n * @param attachAfter (default false) fires the listener *after* the action has executed instead of before.\n * @returns\n */\nfunction onAction(target, listener, attachAfter) {\n    if (attachAfter === void 0) { attachAfter = false; }\n    // check all arguments\n    assertIsStateTreeNode(target, 1);\n    if (devMode()) {\n        if (!isRoot(target))\n            warnError(\"Warning: Attaching onAction listeners to non root nodes is dangerous: No events will be emitted for actions initiated higher up in the tree.\");\n        if (!isProtected(target))\n            warnError(\"Warning: Attaching onAction listeners to non protected nodes is dangerous: No events will be emitted for direct modifications without action.\");\n    }\n    return addMiddleware(target, function handler(rawCall, next) {\n        if (rawCall.type === \"action\" && rawCall.id === rawCall.rootId) {\n            var sourceNode_1 = getStateTreeNode(rawCall.context);\n            var info = {\n                name: rawCall.name,\n                path: getRelativePathBetweenNodes(getStateTreeNode(target), sourceNode_1),\n                args: rawCall.args.map(function (arg, index) {\n                    return serializeArgument(sourceNode_1, rawCall.name, index, arg);\n                })\n            };\n            if (attachAfter) {\n                var res = next(rawCall);\n                listener(info);\n                return res;\n            }\n            else {\n                listener(info);\n                return next(rawCall);\n            }\n        }\n        else {\n            return next(rawCall);\n        }\n    });\n}\n\nvar nextActionId = 1;\nvar currentActionContext;\n/**\n * @internal\n * @hidden\n */\nfunction getCurrentActionContext() {\n    return currentActionContext;\n}\n/**\n * @internal\n * @hidden\n */\nfunction getNextActionId() {\n    return nextActionId++;\n}\n// TODO: optimize away entire action context if there is no middleware in tree?\n/**\n * @internal\n * @hidden\n */\nfunction runWithActionContext(context, fn) {\n    var node = getStateTreeNode(context.context);\n    if (context.type === \"action\") {\n        node.assertAlive({\n            actionContext: context\n        });\n    }\n    var baseIsRunningAction = node._isRunningAction;\n    node._isRunningAction = true;\n    var previousContext = currentActionContext;\n    currentActionContext = context;\n    try {\n        return runMiddleWares(node, context, fn);\n    }\n    finally {\n        currentActionContext = previousContext;\n        node._isRunningAction = baseIsRunningAction;\n    }\n}\n/**\n * @internal\n * @hidden\n */\nfunction getParentActionContext(parentContext) {\n    if (!parentContext)\n        return undefined;\n    if (parentContext.type === \"action\")\n        return parentContext;\n    return parentContext.parentActionEvent;\n}\n/**\n * @internal\n * @hidden\n */\nfunction createActionInvoker(target, name, fn) {\n    var res = function () {\n        var id = getNextActionId();\n        var parentContext = currentActionContext;\n        var parentActionContext = getParentActionContext(parentContext);\n        return runWithActionContext({\n            type: \"action\",\n            name: name,\n            id: id,\n            args: argsToArray(arguments),\n            context: target,\n            tree: getRoot(target),\n            rootId: parentContext ? parentContext.rootId : id,\n            parentId: parentContext ? parentContext.id : 0,\n            allParentIds: parentContext\n                ? __spread(parentContext.allParentIds, [parentContext.id]) : [],\n            parentEvent: parentContext,\n            parentActionEvent: parentActionContext\n        }, fn);\n    };\n    res._isMSTAction = true;\n    return res;\n}\n/**\n * Middleware can be used to intercept any action is invoked on the subtree where it is attached.\n * If a tree is protected (by default), this means that any mutation of the tree will pass through your middleware.\n *\n * For more details, see the [middleware docs](concepts/middleware.md)\n *\n * @param target Node to apply the middleware to.\n * @param middleware Middleware to apply.\n * @returns A callable function to dispose the middleware.\n */\nfunction addMiddleware(target, handler, includeHooks) {\n    if (includeHooks === void 0) { includeHooks = true; }\n    var node = getStateTreeNode(target);\n    if (devMode()) {\n        if (!node.isProtectionEnabled) {\n            warnError(\"It is recommended to protect the state tree before attaching action middleware, as otherwise it cannot be guaranteed that all changes are passed through middleware. See `protect`\");\n        }\n    }\n    return node.addMiddleWare(handler, includeHooks);\n}\n/**\n * Binds middleware to a specific action.\n *\n * Example:\n * ```ts\n * type.actions(self => {\n *   function takeA____() {\n *       self.toilet.donate()\n *       self.wipe()\n *       self.wipe()\n *       self.toilet.flush()\n *   }\n *   return {\n *     takeA____: decorate(atomic, takeA____)\n *   }\n * })\n * ```\n *\n * @param handler\n * @param fn\n * @param includeHooks\n * @returns The original function\n */\nfunction decorate(handler, fn, includeHooks) {\n    if (includeHooks === void 0) { includeHooks = true; }\n    var middleware = { handler: handler, includeHooks: includeHooks };\n    fn.$mst_middleware = fn.$mst_middleware || [];\n    fn.$mst_middleware.push(middleware);\n    return fn;\n}\nvar CollectedMiddlewares = /** @class */ (function () {\n    function CollectedMiddlewares(node, fn) {\n        Object.defineProperty(this, \"arrayIndex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"inArrayIndex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"middlewares\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // we just push middleware arrays into an array of arrays to avoid making copies\n        if (fn.$mst_middleware) {\n            this.middlewares.push(fn.$mst_middleware);\n        }\n        var n = node;\n        // Find all middlewares. Optimization: cache this?\n        while (n) {\n            if (n.middlewares)\n                this.middlewares.push(n.middlewares);\n            n = n.parent;\n        }\n    }\n    Object.defineProperty(CollectedMiddlewares.prototype, \"isEmpty\", {\n        get: function () {\n            return this.middlewares.length <= 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CollectedMiddlewares.prototype, \"getNextMiddleware\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var array = this.middlewares[this.arrayIndex];\n            if (!array)\n                return undefined;\n            var item = array[this.inArrayIndex++];\n            if (!item) {\n                this.arrayIndex++;\n                this.inArrayIndex = 0;\n                return this.getNextMiddleware();\n            }\n            return item;\n        }\n    });\n    return CollectedMiddlewares;\n}());\nfunction runMiddleWares(node, baseCall, originalFn) {\n    var middlewares = new CollectedMiddlewares(node, originalFn);\n    // Short circuit\n    if (middlewares.isEmpty)\n        return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(originalFn).apply(null, baseCall.args);\n    var result = null;\n    function runNextMiddleware(call) {\n        var middleware = middlewares.getNextMiddleware();\n        var handler = middleware && middleware.handler;\n        if (!handler) {\n            return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(originalFn).apply(null, call.args);\n        }\n        // skip hooks if asked to\n        if (!middleware.includeHooks && Hook[call.name]) {\n            return runNextMiddleware(call);\n        }\n        var nextInvoked = false;\n        function next(call2, callback) {\n            nextInvoked = true;\n            // the result can contain\n            // - the non manipulated return value from an action\n            // - the non manipulated abort value\n            // - one of the above but manipulated through the callback function\n            result = runNextMiddleware(call2);\n            if (callback) {\n                result = callback(result);\n            }\n        }\n        var abortInvoked = false;\n        function abort(value) {\n            abortInvoked = true;\n            // overwrite the result\n            // can be manipulated through middlewares earlier in the queue using the callback fn\n            result = value;\n        }\n        handler(call, next, abort);\n        if (devMode()) {\n            if (!nextInvoked && !abortInvoked) {\n                var node2 = getStateTreeNode(call.tree);\n                throw fail$1(\"Neither the next() nor the abort() callback within the middleware \" + handler.name + \" for the action: \\\"\" + call.name + \"\\\" on the node: \" + node2.type.name + \" was invoked.\");\n            }\n            else if (nextInvoked && abortInvoked) {\n                var node2 = getStateTreeNode(call.tree);\n                throw fail$1(\"The next() and abort() callback within the middleware \" + handler.name + \" for the action: \\\"\" + call.name + \"\\\" on the node: \" + node2.type.name + \" were invoked.\");\n            }\n        }\n        return result;\n    }\n    return runNextMiddleware(baseCall);\n}\n\n/**\n * Returns the currently executing MST action context, or undefined if none.\n */\nfunction getRunningActionContext() {\n    var current = getCurrentActionContext();\n    while (current && current.type !== \"action\") {\n        current = current.parentActionEvent;\n    }\n    return current;\n}\nfunction _isActionContextThisOrChildOf(actionContext, sameOrParent, includeSame) {\n    var parentId = typeof sameOrParent === \"number\" ? sameOrParent : sameOrParent.id;\n    var current = includeSame\n        ? actionContext\n        : actionContext.parentActionEvent;\n    while (current) {\n        if (current.id === parentId) {\n            return true;\n        }\n        current = current.parentActionEvent;\n    }\n    return false;\n}\n/**\n * Returns if the given action context is a parent of this action context.\n */\nfunction isActionContextChildOf(actionContext, parent) {\n    return _isActionContextThisOrChildOf(actionContext, parent, false);\n}\n/**\n * Returns if the given action context is this or a parent of this action context.\n */\nfunction isActionContextThisOrChildOf(actionContext, parentOrThis) {\n    return _isActionContextThisOrChildOf(actionContext, parentOrThis, true);\n}\n\nfunction safeStringify(value) {\n    try {\n        return JSON.stringify(value);\n    }\n    catch (e) {\n        // istanbul ignore next\n        return \"<Unserializable: \" + e + \">\";\n    }\n}\n/**\n * @internal\n * @hidden\n */\nfunction prettyPrintValue(value) {\n    return typeof value === \"function\"\n        ? \"<function\" + (value.name ? \" \" + value.name : \"\") + \">\"\n        : isStateTreeNode(value)\n            ? \"<\" + value + \">\"\n            : \"`\" + safeStringify(value) + \"`\";\n}\nfunction shortenPrintValue(valueInString) {\n    return valueInString.length < 280\n        ? valueInString\n        : valueInString.substring(0, 272) + \"......\" + valueInString.substring(valueInString.length - 8);\n}\nfunction toErrorString(error) {\n    var value = error.value;\n    var type = error.context[error.context.length - 1].type;\n    var fullPath = error.context\n        .map(function (_a) {\n        var path = _a.path;\n        return path;\n    })\n        .filter(function (path) { return path.length > 0; })\n        .join(\"/\");\n    var pathPrefix = fullPath.length > 0 ? \"at path \\\"/\" + fullPath + \"\\\" \" : \"\";\n    var currentTypename = isStateTreeNode(value)\n        ? \"value of type \" + getStateTreeNode(value).type.name + \":\"\n        : isPrimitive(value)\n            ? \"value\"\n            : \"snapshot\";\n    var isSnapshotCompatible = type && isStateTreeNode(value) && type.is(getStateTreeNode(value).snapshot);\n    return (\"\" + pathPrefix + currentTypename + \" \" + prettyPrintValue(value) + \" is not assignable \" + (type ? \"to type: `\" + type.name + \"`\" : \"\") +\n        (error.message ? \" (\" + error.message + \")\" : \"\") +\n        (type\n            ? isPrimitiveType(type) || isPrimitive(value)\n                ? \".\"\n                : \", expected an instance of `\" + type.name + \"` or a snapshot like `\" + type.describe() + \"` instead.\" +\n                    (isSnapshotCompatible\n                        ? \" (Note that a snapshot of the provided value is compatible with the targeted type)\"\n                        : \"\")\n            : \".\"));\n}\n/**\n * @internal\n * @hidden\n */\nfunction getContextForPath(context, path, type) {\n    return context.concat([{ path: path, type: type }]);\n}\n/**\n * @internal\n * @hidden\n */\nfunction typeCheckSuccess() {\n    return EMPTY_ARRAY;\n}\n/**\n * @internal\n * @hidden\n */\nfunction typeCheckFailure(context, value, message) {\n    return [{ context: context, value: value, message: message }];\n}\n/**\n * @internal\n * @hidden\n */\nfunction flattenTypeErrors(errors) {\n    return errors.reduce(function (a, i) { return a.concat(i); }, []);\n}\n// TODO; doublecheck: typecheck should only needed to be invoked from: type.create and array / map / value.property will change\n/**\n * @internal\n * @hidden\n */\nfunction typecheckInternal(type, value) {\n    // runs typeChecking if it is in dev-mode or through a process.env.ENABLE_TYPE_CHECK flag\n    if (isTypeCheckingEnabled()) {\n        typecheck(type, value);\n    }\n}\n/**\n * Run's the typechecker for the given type on the given value, which can be a snapshot or an instance.\n * Throws if the given value is not according the provided type specification.\n * Use this if you need typechecks even in a production build (by default all automatic runtime type checks will be skipped in production builds)\n *\n * @param type Type to check against.\n * @param value Value to be checked, either a snapshot or an instance.\n */\nfunction typecheck(type, value) {\n    var errors = type.validate(value, [{ path: \"\", type: type }]);\n    if (errors.length > 0) {\n        throw fail$1(validationErrorsToString(type, value, errors));\n    }\n}\nfunction validationErrorsToString(type, value, errors) {\n    if (errors.length === 0) {\n        return undefined;\n    }\n    return (\"Error while converting \" + shortenPrintValue(prettyPrintValue(value)) + \" to `\" + type.name + \"`:\\n\\n    \" + errors.map(toErrorString).join(\"\\n    \"));\n}\n\nvar identifierCacheId = 0;\n/**\n * @internal\n * @hidden\n */\nvar IdentifierCache = /** @class */ (function () {\n    function IdentifierCache() {\n        Object.defineProperty(this, \"cacheId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: identifierCacheId++\n        });\n        // n.b. in cache all identifiers are normalized to strings\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map()\n        });\n        // last time the cache (array) for a given time changed\n        // n.b. it is not really the time, but just an integer that gets increased after each modification to the array\n        Object.defineProperty(this, \"lastCacheModificationPerId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map()\n        });\n    }\n    Object.defineProperty(IdentifierCache.prototype, \"updateLastCacheModificationPerId\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (identifier) {\n            var lcm = this.lastCacheModificationPerId.get(identifier);\n            // we start at 1 since 0 means no update since cache creation\n            this.lastCacheModificationPerId.set(identifier, lcm === undefined ? 1 : lcm + 1);\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"getLastCacheModificationPerId\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (identifier) {\n            var modificationId = this.lastCacheModificationPerId.get(identifier) || 0;\n            return this.cacheId + \"-\" + modificationId;\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"addNodeToCache\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, lastCacheUpdate) {\n            if (lastCacheUpdate === void 0) { lastCacheUpdate = true; }\n            if (node.identifierAttribute) {\n                var identifier = node.identifier;\n                if (!this.cache.has(identifier)) {\n                    this.cache.set(identifier, mobx__WEBPACK_IMPORTED_MODULE_0__.observable.array([], mobxShallow));\n                }\n                var set = this.cache.get(identifier);\n                if (set.indexOf(node) !== -1)\n                    throw fail$1(\"Already registered\");\n                set.push(node);\n                if (lastCacheUpdate) {\n                    this.updateLastCacheModificationPerId(identifier);\n                }\n            }\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"mergeCache\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            var _this = this;\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.values)(node.identifierCache.cache).forEach(function (nodes) {\n                return nodes.forEach(function (child) {\n                    _this.addNodeToCache(child);\n                });\n            });\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"notifyDied\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            if (node.identifierAttribute) {\n                var id = node.identifier;\n                var set = this.cache.get(id);\n                if (set) {\n                    set.remove(node);\n                    // remove empty sets from cache\n                    if (!set.length) {\n                        this.cache.delete(id);\n                    }\n                    this.updateLastCacheModificationPerId(node.identifier);\n                }\n            }\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"splitCache\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            var _this = this;\n            var res = new IdentifierCache();\n            var basePath = node.path;\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.entries)(this.cache).forEach(function (_a) {\n                var _b = __read(_a, 2), id = _b[0], nodes = _b[1];\n                var modified = false;\n                for (var i = nodes.length - 1; i >= 0; i--) {\n                    if (nodes[i].path.indexOf(basePath) === 0) {\n                        res.addNodeToCache(nodes[i], false); // no need to update lastUpdated since it is a whole new cache\n                        nodes.splice(i, 1);\n                        modified = true;\n                    }\n                }\n                if (modified) {\n                    _this.updateLastCacheModificationPerId(id);\n                }\n            });\n            return res;\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"has\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type, identifier) {\n            var set = this.cache.get(identifier);\n            if (!set)\n                return false;\n            return set.some(function (candidate) { return type.isAssignableFrom(candidate.type); });\n        }\n    });\n    Object.defineProperty(IdentifierCache.prototype, \"resolve\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type, identifier) {\n            var set = this.cache.get(identifier);\n            if (!set)\n                return null;\n            var matches = set.filter(function (candidate) { return type.isAssignableFrom(candidate.type); });\n            switch (matches.length) {\n                case 0:\n                    return null;\n                case 1:\n                    return matches[0];\n                default:\n                    throw fail$1(\"Cannot resolve a reference to type '\" + type.name + \"' with id: '\" + identifier + \"' unambigously, there are multiple candidates: \" + matches\n                        .map(function (n) { return n.path; })\n                        .join(\", \"));\n            }\n        }\n    });\n    return IdentifierCache;\n}());\n\n/**\n * @internal\n * @hidden\n */\nfunction createObjectNode(type, parent, subpath, environment, initialValue) {\n    var existingNode = getStateTreeNodeSafe(initialValue);\n    if (existingNode) {\n        if (existingNode.parent) {\n            // istanbul ignore next\n            throw fail$1(\"Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '\" + (parent ? parent.path : \"\") + \"/\" + subpath + \"', but it lives already at '\" + existingNode.path + \"'\");\n        }\n        if (parent) {\n            existingNode.setParent(parent, subpath);\n        }\n        // else it already has no parent since it is a pre-requisite\n        return existingNode;\n    }\n    // not a node, a snapshot\n    return new ObjectNode(type, parent, subpath, environment, initialValue);\n}\n/**\n * @internal\n * @hidden\n */\nfunction createScalarNode(type, parent, subpath, environment, initialValue) {\n    return new ScalarNode(type, parent, subpath, environment, initialValue);\n}\n/**\n * @internal\n * @hidden\n */\nfunction isNode(value) {\n    return value instanceof ScalarNode || value instanceof ObjectNode;\n}\n\n/**\n * @internal\n * @hidden\n */\nvar NodeLifeCycle;\n(function (NodeLifeCycle) {\n    NodeLifeCycle[NodeLifeCycle[\"INITIALIZING\"] = 0] = \"INITIALIZING\";\n    NodeLifeCycle[NodeLifeCycle[\"CREATED\"] = 1] = \"CREATED\";\n    NodeLifeCycle[NodeLifeCycle[\"FINALIZED\"] = 2] = \"FINALIZED\";\n    NodeLifeCycle[NodeLifeCycle[\"DETACHING\"] = 3] = \"DETACHING\";\n    NodeLifeCycle[NodeLifeCycle[\"DEAD\"] = 4] = \"DEAD\"; // no coming back from this one\n})(NodeLifeCycle || (NodeLifeCycle = {}));\n/**\n * Returns true if the given value is a node in a state tree.\n * More precisely, that is, if the value is an instance of a\n * `types.model`, `types.array` or `types.map`.\n *\n * @param value\n * @returns true if the value is a state tree node.\n */\nfunction isStateTreeNode(value) {\n    return !!(value && value.$treenode);\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertIsStateTreeNode(value, argNumber) {\n    assertArg(value, isStateTreeNode, \"mobx-state-tree node\", argNumber);\n}\n/**\n * @internal\n * @hidden\n */\nfunction getStateTreeNode(value) {\n    if (!isStateTreeNode(value)) {\n        // istanbul ignore next\n        throw fail$1(\"Value \" + value + \" is no MST Node\");\n    }\n    return value.$treenode;\n}\n/**\n * @internal\n * @hidden\n */\nfunction getStateTreeNodeSafe(value) {\n    return (value && value.$treenode) || null;\n}\n/**\n * @internal\n * @hidden\n */\nfunction toJSON() {\n    return getStateTreeNode(this).snapshot;\n}\nvar doubleDot = function (_) { return \"..\"; };\n/**\n * @internal\n * @hidden\n */\nfunction getRelativePathBetweenNodes(base, target) {\n    // PRE condition target is (a child of) base!\n    if (base.root !== target.root) {\n        throw fail$1(\"Cannot calculate relative path: objects '\" + base + \"' and '\" + target + \"' are not part of the same object tree\");\n    }\n    var baseParts = splitJsonPath(base.path);\n    var targetParts = splitJsonPath(target.path);\n    var common = 0;\n    for (; common < baseParts.length; common++) {\n        if (baseParts[common] !== targetParts[common])\n            break;\n    }\n    // TODO: assert that no targetParts paths are \"..\", \".\" or \"\"!\n    return (baseParts.slice(common).map(doubleDot).join(\"/\") + joinJsonPath(targetParts.slice(common)));\n}\n/**\n * @internal\n * @hidden\n */\nfunction resolveNodeByPath(base, path, failIfResolveFails) {\n    if (failIfResolveFails === void 0) { failIfResolveFails = true; }\n    return resolveNodeByPathParts(base, splitJsonPath(path), failIfResolveFails);\n}\n/**\n * @internal\n * @hidden\n */\nfunction resolveNodeByPathParts(base, pathParts, failIfResolveFails) {\n    if (failIfResolveFails === void 0) { failIfResolveFails = true; }\n    var current = base;\n    for (var i = 0; i < pathParts.length; i++) {\n        var part = pathParts[i];\n        if (part === \"..\") {\n            current = current.parent;\n            if (current)\n                continue; // not everything has a parent\n        }\n        else if (part === \".\") {\n            continue;\n        }\n        else if (current) {\n            if (current instanceof ScalarNode) {\n                // check if the value of a scalar resolves to a state tree node (e.g. references)\n                // then we can continue resolving...\n                try {\n                    var value = current.value;\n                    if (isStateTreeNode(value)) {\n                        current = getStateTreeNode(value);\n                        // fall through\n                    }\n                }\n                catch (e) {\n                    if (!failIfResolveFails) {\n                        return undefined;\n                    }\n                    throw e;\n                }\n            }\n            if (current instanceof ObjectNode) {\n                var subType = current.getChildType(part);\n                if (subType) {\n                    current = current.getChildNode(part);\n                    if (current)\n                        continue;\n                }\n            }\n        }\n        if (failIfResolveFails)\n            throw fail$1(\"Could not resolve '\" + part + \"' in path '\" + (joinJsonPath(pathParts.slice(0, i)) || \"/\") + \"' while resolving '\" + joinJsonPath(pathParts) + \"'\");\n        else\n            return undefined;\n    }\n    return current;\n}\n/**\n * @internal\n * @hidden\n */\nfunction convertChildNodesToArray(childNodes) {\n    if (!childNodes)\n        return EMPTY_ARRAY;\n    var keys = Object.keys(childNodes);\n    if (!keys.length)\n        return EMPTY_ARRAY;\n    var result = new Array(keys.length);\n    keys.forEach(function (key, index) {\n        result[index] = childNodes[key];\n    });\n    return result;\n}\n\n// based on: https://github.com/mobxjs/mobx-utils/blob/master/src/async-action.ts\n/*\n    All contents of this file are deprecated.\n\n    The term `process` has been replaced with `flow` to avoid conflicts with the\n    global `process` object.\n\n    Refer to `flow.ts` for any further changes to this implementation.\n*/\nvar DEPRECATION_MESSAGE = \"See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information. \" +\n    \"Note that the middleware event types starting with `process` now start with `flow`.\";\n/**\n * @hidden\n *\n * @deprecated has been renamed to `flow()`.\n * See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information.\n * Note that the middleware event types starting with `process` now start with `flow`.\n *\n * @returns {Promise}\n */\nfunction process$1(asyncAction) {\n    deprecated(\"process\", \"`process()` has been renamed to `flow()`. \" + DEPRECATION_MESSAGE);\n    return flow(asyncAction);\n}\n\nvar plainObjectString = Object.toString();\n/**\n * @internal\n * @hidden\n */\nvar EMPTY_ARRAY = Object.freeze([]);\n/**\n * @internal\n * @hidden\n */\nvar EMPTY_OBJECT = Object.freeze({});\n/**\n * @internal\n * @hidden\n */\nvar mobxShallow = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._getGlobalState)().useProxies\n    ? { deep: false }\n    : { deep: false, proxy: false };\nObject.freeze(mobxShallow);\n/**\n * @internal\n * @hidden\n */\nfunction fail$1(message) {\n    if (message === void 0) { message = \"Illegal state\"; }\n    return new Error(\"[mobx-state-tree] \" + message);\n}\n/**\n * @internal\n * @hidden\n */\nfunction identity(_) {\n    return _;\n}\n/**\n * pollyfill (for IE) suggested in MDN:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @internal\n * @hidden\n */\nvar isInteger = Number.isInteger ||\n    function (value) {\n        return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n    };\n/**\n * @internal\n * @hidden\n */\nfunction isArray(val) {\n    return Array.isArray(val) || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(val);\n}\n/**\n * @internal\n * @hidden\n */\nfunction asArray(val) {\n    if (!val)\n        return EMPTY_ARRAY;\n    if (isArray(val))\n        return val;\n    return [val];\n}\n/**\n * @internal\n * @hidden\n */\nfunction extend(a) {\n    var b = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        b[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < b.length; i++) {\n        var current = b[i];\n        for (var key in current)\n            a[key] = current[key];\n    }\n    return a;\n}\n/**\n * @internal\n * @hidden\n */\nfunction isPlainObject(value) {\n    var _a;\n    if (value === null || typeof value !== \"object\")\n        return false;\n    var proto = Object.getPrototypeOf(value);\n    if (proto == null)\n        return true;\n    return ((_a = proto.constructor) === null || _a === void 0 ? void 0 : _a.toString()) === plainObjectString;\n}\n/**\n * @internal\n * @hidden\n */\nfunction isMutable(value) {\n    return (value !== null &&\n        typeof value === \"object\" &&\n        !(value instanceof Date) &&\n        !(value instanceof RegExp));\n}\n/**\n * @internal\n * @hidden\n */\nfunction isPrimitive(value, includeDate) {\n    if (includeDate === void 0) { includeDate = true; }\n    return (value === null ||\n        value === undefined ||\n        typeof value === \"string\" ||\n        typeof value === \"number\" ||\n        typeof value === \"boolean\" ||\n        (includeDate && value instanceof Date));\n}\n/**\n * @internal\n * @hidden\n * Freeze a value and return it (if not in production)\n */\nfunction freeze(value) {\n    if (!devMode())\n        return value;\n    return isPrimitive(value) || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(value) ? value : Object.freeze(value);\n}\n/**\n * @internal\n * @hidden\n * Recursively freeze a value (if not in production)\n */\nfunction deepFreeze(value) {\n    if (!devMode())\n        return value;\n    freeze(value);\n    if (isPlainObject(value)) {\n        Object.keys(value).forEach(function (propKey) {\n            if (!isPrimitive(value[propKey]) &&\n                !Object.isFrozen(value[propKey])) {\n                deepFreeze(value[propKey]);\n            }\n        });\n    }\n    return value;\n}\n/**\n * @internal\n * @hidden\n */\nfunction isSerializable(value) {\n    return typeof value !== \"function\";\n}\n/**\n * @internal\n * @hidden\n */\nfunction defineProperty(object, key, descriptor) {\n    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(object)\n        ? (0,mobx__WEBPACK_IMPORTED_MODULE_0__.defineProperty)(object, key, descriptor)\n        : Object.defineProperty(object, key, descriptor);\n}\n/**\n * @internal\n * @hidden\n */\nfunction addHiddenFinalProp(object, propName, value) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value: value\n    });\n}\n/**\n * @internal\n * @hidden\n */\nfunction addHiddenWritableProp(object, propName, value) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value: value\n    });\n}\n/**\n * @internal\n * @hidden\n */\nvar EventHandler = /** @class */ (function () {\n    function EventHandler() {\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    Object.defineProperty(EventHandler.prototype, \"hasSubscribers\", {\n        get: function () {\n            return this.handlers.length > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventHandler.prototype, \"register\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn, atTheBeginning) {\n            var _this = this;\n            if (atTheBeginning === void 0) { atTheBeginning = false; }\n            if (atTheBeginning) {\n                this.handlers.unshift(fn);\n            }\n            else {\n                this.handlers.push(fn);\n            }\n            return function () {\n                _this.unregister(fn);\n            };\n        }\n    });\n    Object.defineProperty(EventHandler.prototype, \"has\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            return this.handlers.indexOf(fn) >= 0;\n        }\n    });\n    Object.defineProperty(EventHandler.prototype, \"unregister\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            var index = this.handlers.indexOf(fn);\n            if (index >= 0) {\n                this.handlers.splice(index, 1);\n            }\n        }\n    });\n    Object.defineProperty(EventHandler.prototype, \"clear\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.handlers.length = 0;\n        }\n    });\n    Object.defineProperty(EventHandler.prototype, \"emit\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            // make a copy just in case it changes\n            var handlers = this.handlers.slice();\n            handlers.forEach(function (f) { return f.apply(void 0, __spread(args)); });\n        }\n    });\n    return EventHandler;\n}());\n/**\n * @internal\n * @hidden\n */\nvar EventHandlers = /** @class */ (function () {\n    function EventHandlers() {\n        Object.defineProperty(this, \"eventHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    Object.defineProperty(EventHandlers.prototype, \"hasSubscribers\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event) {\n            var handler = this.eventHandlers && this.eventHandlers[event];\n            return !!handler && handler.hasSubscribers;\n        }\n    });\n    Object.defineProperty(EventHandlers.prototype, \"register\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event, fn, atTheBeginning) {\n            if (atTheBeginning === void 0) { atTheBeginning = false; }\n            if (!this.eventHandlers) {\n                this.eventHandlers = {};\n            }\n            var handler = this.eventHandlers[event];\n            if (!handler) {\n                handler = this.eventHandlers[event] = new EventHandler();\n            }\n            return handler.register(fn, atTheBeginning);\n        }\n    });\n    Object.defineProperty(EventHandlers.prototype, \"has\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event, fn) {\n            var handler = this.eventHandlers && this.eventHandlers[event];\n            return !!handler && handler.has(fn);\n        }\n    });\n    Object.defineProperty(EventHandlers.prototype, \"unregister\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event, fn) {\n            var handler = this.eventHandlers && this.eventHandlers[event];\n            if (handler) {\n                handler.unregister(fn);\n            }\n        }\n    });\n    Object.defineProperty(EventHandlers.prototype, \"clear\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event) {\n            if (this.eventHandlers) {\n                delete this.eventHandlers[event];\n            }\n        }\n    });\n    Object.defineProperty(EventHandlers.prototype, \"clearAll\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            this.eventHandlers = undefined;\n        }\n    });\n    Object.defineProperty(EventHandlers.prototype, \"emit\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (event) {\n            var _a;\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var handler = this.eventHandlers && this.eventHandlers[event];\n            if (handler) {\n                (_a = handler).emit.apply(_a, __spread(args));\n            }\n        }\n    });\n    return EventHandlers;\n}());\n/**\n * @internal\n * @hidden\n */\nfunction argsToArray(args) {\n    var res = new Array(args.length);\n    for (var i = 0; i < args.length; i++)\n        res[i] = args[i];\n    return res;\n}\n/**\n * @internal\n * @hidden\n */\nfunction stringStartsWith(str, beginning) {\n    return str.indexOf(beginning) === 0;\n}\n/**\n * @internal\n * @hidden\n */\nvar deprecated = function (id, message) {\n    // skip if running production\n    if (!devMode())\n        return;\n    // warn if hasn't been warned before\n    if (deprecated.ids && !deprecated.ids.hasOwnProperty(id)) {\n        warnError(\"Deprecation warning: \" + message);\n    }\n    // mark as warned to avoid duplicate warn message\n    if (deprecated.ids)\n        deprecated.ids[id] = true;\n};\ndeprecated.ids = {};\n/**\n * @internal\n * @hidden\n */\nfunction warnError(msg) {\n    console.warn(new Error(\"[mobx-state-tree] \" + msg));\n}\n/**\n * @internal\n * @hidden\n */\nfunction isTypeCheckingEnabled() {\n    return (devMode() ||\n        (typeof process !== \"undefined\" && process.env && process.env.ENABLE_TYPE_CHECK === \"true\"));\n}\n/**\n * @internal\n * @hidden\n */\nfunction devMode() {\n    return \"development\" !== \"production\";\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertArg(value, fn, typeName, argNumber) {\n    if (devMode()) {\n        if (!fn(value)) {\n            // istanbul ignore next\n            throw fail$1(\"expected \" + typeName + \" as argument \" + asArray(argNumber).join(\" or \") + \", got \" + value + \" instead\");\n        }\n    }\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertIsFunction(value, argNumber) {\n    assertArg(value, function (fn) { return typeof fn === \"function\"; }, \"function\", argNumber);\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertIsNumber(value, argNumber, min, max) {\n    assertArg(value, function (n) { return typeof n === \"number\"; }, \"number\", argNumber);\n    if (min !== undefined) {\n        assertArg(value, function (n) { return n >= min; }, \"number greater than \" + min, argNumber);\n    }\n    if (max !== undefined) {\n        assertArg(value, function (n) { return n <= max; }, \"number lesser than \" + max, argNumber);\n    }\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertIsString(value, argNumber, canBeEmpty) {\n    if (canBeEmpty === void 0) { canBeEmpty = true; }\n    assertArg(value, function (s) { return typeof s === \"string\"; }, \"string\", argNumber);\n    if (!canBeEmpty) {\n        assertArg(value, function (s) { return s !== \"\"; }, \"not empty string\", argNumber);\n    }\n}\n/**\n * @internal\n * @hidden\n */\nfunction setImmediateWithFallback(fn) {\n    if (typeof queueMicrotask === \"function\") {\n        queueMicrotask(fn);\n    }\n    else if (typeof setImmediate === \"function\") {\n        setImmediate(fn);\n    }\n    else {\n        setTimeout(fn, 1);\n    }\n}\n\n/**\n * See [asynchronous actions](concepts/async-actions.md).\n *\n * @returns The flow as a promise.\n */\nfunction flow(generator) {\n    return createFlowSpawner(generator.name, generator);\n}\n/**\n * @deprecated Not needed since TS3.6.\n * Used for TypeScript to make flows that return a promise return the actual promise result.\n *\n * @param val\n * @returns\n */\nfunction castFlowReturn(val) {\n    return val;\n}\n/**\n * @experimental\n * experimental api - might change on minor/patch releases\n *\n * Convert a promise-returning function to a generator-returning one.\n * This is intended to allow for usage of `yield*` in async actions to\n * retain the promise return type.\n *\n * Example:\n * ```ts\n * function getDataAsync(input: string): Promise<number> { ... }\n * const getDataGen = toGeneratorFunction(getDataAsync);\n *\n * const someModel.actions(self => ({\n *   someAction: flow(function*() {\n *     // value is typed as number\n *     const value = yield* getDataGen(\"input value\");\n *     ...\n *   })\n * }))\n * ```\n */\nfunction toGeneratorFunction(p) {\n    return function () {\n        var _i;\n        var args = [];\n        for (_i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, p.apply(void 0, __spread(args))];\n                case 1: return [2 /*return*/, (_a.sent())];\n            }\n        });\n    };\n}\n/**\n * @experimental\n * experimental api - might change on minor/patch releases\n *\n * Convert a promise to a generator yielding that promise\n * This is intended to allow for usage of `yield*` in async actions to\n * retain the promise return type.\n *\n * Example:\n * ```ts\n * function getDataAsync(input: string): Promise<number> { ... }\n *\n * const someModel.actions(self => ({\n *   someAction: flow(function*() {\n *     // value is typed as number\n *     const value = yield* toGenerator(getDataAsync(\"input value\"));\n *     ...\n *   })\n * }))\n * ```\n */\nfunction toGenerator(p) {\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0: return [4 /*yield*/, p];\n            case 1: return [2 /*return*/, (_a.sent())];\n        }\n    });\n}\n/**\n * @internal\n * @hidden\n */\nfunction createFlowSpawner(name, generator) {\n    var spawner = function flowSpawner() {\n        // Implementation based on https://github.com/tj/co/blob/master/index.js\n        var runId = getNextActionId();\n        var parentContext = getCurrentActionContext();\n        if (!parentContext) {\n            throw fail$1(\"a mst flow must always have a parent context\");\n        }\n        var parentActionContext = getParentActionContext(parentContext);\n        if (!parentActionContext) {\n            throw fail$1(\"a mst flow must always have a parent action context\");\n        }\n        var contextBase = {\n            name: name,\n            id: runId,\n            tree: parentContext.tree,\n            context: parentContext.context,\n            parentId: parentContext.id,\n            allParentIds: __spread(parentContext.allParentIds, [parentContext.id]),\n            rootId: parentContext.rootId,\n            parentEvent: parentContext,\n            parentActionEvent: parentActionContext\n        };\n        var args = arguments;\n        function wrap(fn, type, arg) {\n            fn.$mst_middleware = spawner.$mst_middleware; // pick up any middleware attached to the flow\n            return runWithActionContext(__assign(__assign({}, contextBase), { type: type, args: [arg] }), fn);\n        }\n        return new Promise(function (resolve, reject) {\n            var gen;\n            var init = function asyncActionInit() {\n                gen = generator.apply(null, arguments);\n                onFulfilled(undefined); // kick off the flow\n            };\n            init.$mst_middleware = spawner.$mst_middleware;\n            runWithActionContext(__assign(__assign({}, contextBase), { type: \"flow_spawn\", args: argsToArray(args) }), init);\n            function onFulfilled(res) {\n                var ret;\n                try {\n                    // prettier-ignore\n                    var cancelError = wrap(function (r) { ret = gen.next(r); }, \"flow_resume\", res);\n                    if (cancelError instanceof Error) {\n                        ret = gen.throw(cancelError);\n                    }\n                }\n                catch (e) {\n                    // prettier-ignore\n                    setImmediateWithFallback(function () {\n                        wrap(function (r) { reject(e); }, \"flow_throw\", e);\n                    });\n                    return;\n                }\n                next(ret);\n                return;\n            }\n            function onRejected(err) {\n                var ret;\n                try {\n                    // prettier-ignore\n                    wrap(function (r) { ret = gen.throw(r); }, \"flow_resume_error\", err); // or yieldError?\n                }\n                catch (e) {\n                    // prettier-ignore\n                    setImmediateWithFallback(function () {\n                        wrap(function (r) { reject(e); }, \"flow_throw\", e);\n                    });\n                    return;\n                }\n                next(ret);\n            }\n            function next(ret) {\n                if (ret.done) {\n                    // prettier-ignore\n                    setImmediateWithFallback(function () {\n                        wrap(function (r) { resolve(r); }, \"flow_return\", ret.value);\n                    });\n                    return;\n                }\n                // TODO: support more type of values? See https://github.com/tj/co/blob/249bbdc72da24ae44076afd716349d2089b31c4c/index.js#L100\n                if (!ret.value || typeof ret.value.then !== \"function\") {\n                    // istanbul ignore next\n                    throw fail$1(\"Only promises can be yielded to `async`, got: \" + ret);\n                }\n                return ret.value.then(onFulfilled, onRejected);\n            }\n        });\n    };\n    return spawner;\n}\n\n/**\n * @internal\n * @hidden\n */\nfunction splitPatch(patch) {\n    if (!(\"oldValue\" in patch))\n        throw fail$1(\"Patches without `oldValue` field cannot be inversed\");\n    return [stripPatch(patch), invertPatch(patch)];\n}\n/**\n * @internal\n * @hidden\n */\nfunction stripPatch(patch) {\n    // strips `oldvalue` information from the patch, so that it becomes a patch conform the json-patch spec\n    // this removes the ability to undo the patch\n    switch (patch.op) {\n        case \"add\":\n            return { op: \"add\", path: patch.path, value: patch.value };\n        case \"remove\":\n            return { op: \"remove\", path: patch.path };\n        case \"replace\":\n            return { op: \"replace\", path: patch.path, value: patch.value };\n    }\n}\nfunction invertPatch(patch) {\n    switch (patch.op) {\n        case \"add\":\n            return {\n                op: \"remove\",\n                path: patch.path\n            };\n        case \"remove\":\n            return {\n                op: \"add\",\n                path: patch.path,\n                value: patch.oldValue\n            };\n        case \"replace\":\n            return {\n                op: \"replace\",\n                path: patch.path,\n                value: patch.oldValue\n            };\n    }\n}\n/**\n * Simple simple check to check it is a number.\n */\nfunction isNumber(x) {\n    return typeof x === \"number\";\n}\n/**\n * Escape slashes and backslashes.\n *\n * http://tools.ietf.org/html/rfc6901\n */\nfunction escapeJsonPath(path) {\n    if (isNumber(path) === true) {\n        return \"\" + path;\n    }\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1)\n        return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescape slashes and backslashes.\n */\nfunction unescapeJsonPath(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\n/**\n * Generates a json-path compliant json path from path parts.\n *\n * @param path\n * @returns\n */\nfunction joinJsonPath(path) {\n    // `/` refers to property with an empty name, while `` refers to root itself!\n    if (path.length === 0)\n        return \"\";\n    var getPathStr = function (p) { return p.map(escapeJsonPath).join(\"/\"); };\n    if (path[0] === \".\" || path[0] === \"..\") {\n        // relative\n        return getPathStr(path);\n    }\n    else {\n        // absolute\n        return \"/\" + getPathStr(path);\n    }\n}\n/**\n * Splits and decodes a json path into several parts.\n *\n * @param path\n * @returns\n */\nfunction splitJsonPath(path) {\n    // `/` refers to property with an empty name, while `` refers to root itself!\n    var parts = path.split(\"/\").map(unescapeJsonPath);\n    var valid = path === \"\" ||\n        path === \".\" ||\n        path === \"..\" ||\n        stringStartsWith(path, \"/\") ||\n        stringStartsWith(path, \"./\") ||\n        stringStartsWith(path, \"../\");\n    if (!valid) {\n        throw fail$1(\"a json path must be either rooted, empty or relative, but got '\" + path + \"'\");\n    }\n    // '/a/b/c' -> [\"a\", \"b\", \"c\"]\n    // '../../b/c' -> [\"..\", \"..\", \"b\", \"c\"]\n    // '' -> []\n    // '/' -> ['']\n    // './a' -> [\".\", \"a\"]\n    // /./a' -> [\".\", \"a\"] equivalent to './a'\n    if (parts[0] === \"\") {\n        parts.shift();\n    }\n    return parts;\n}\n\n/** @hidden */\nvar $preProcessorFailed = Symbol(\"$preProcessorFailed\");\nvar SnapshotProcessor = /** @class */ (function (_super) {\n    __extends(SnapshotProcessor, _super);\n    function SnapshotProcessor(_subtype, _processors, name) {\n        var _this = _super.call(this, name || _subtype.name) || this;\n        Object.defineProperty(_this, \"_subtype\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _subtype\n        });\n        Object.defineProperty(_this, \"_processors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _processors\n        });\n        return _this;\n    }\n    Object.defineProperty(SnapshotProcessor.prototype, \"flags\", {\n        get: function () {\n            return this._subtype.flags | TypeFlags.SnapshotProcessor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return \"snapshotProcessor(\" + this._subtype.describe() + \")\";\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"preProcessSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (sn) {\n            if (this._processors.preProcessor) {\n                return this._processors.preProcessor.call(null, sn);\n            }\n            return sn;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"preProcessSnapshotSafe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (sn) {\n            try {\n                return this.preProcessSnapshot(sn);\n            }\n            catch (e) {\n                return $preProcessorFailed;\n            }\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"postProcessSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (sn) {\n            if (this._processors.postProcessor) {\n                return this._processors.postProcessor.call(null, sn);\n            }\n            return sn;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"_fixNode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            var _this = this;\n            // the node has to use these methods rather than the original type ones\n            proxyNodeTypeMethods(node.type, this, \"create\");\n            var oldGetSnapshot = node.getSnapshot;\n            node.getSnapshot = function () {\n                return _this.postProcessSnapshot(oldGetSnapshot.call(node));\n            };\n            if (!isUnionType(this._subtype)) {\n                node.getReconciliationType = function () {\n                    return _this;\n                };\n            }\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            var processedInitialValue = isStateTreeNode(initialValue)\n                ? initialValue\n                : this.preProcessSnapshot(initialValue);\n            var node = this._subtype.instantiate(parent, subpath, environment, processedInitialValue);\n            this._fixNode(node);\n            return node;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            var node = this._subtype.reconcile(current, isStateTreeNode(newValue) ? newValue : this.preProcessSnapshot(newValue), parent, subpath);\n            if (node !== current) {\n                this._fixNode(node);\n            }\n            return node;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, applyPostProcess) {\n            if (applyPostProcess === void 0) { applyPostProcess = true; }\n            var sn = this._subtype.getSnapshot(node);\n            return applyPostProcess ? this.postProcessSnapshot(sn) : sn;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var processedSn = this.preProcessSnapshotSafe(value);\n            if (processedSn === $preProcessorFailed) {\n                return typeCheckFailure(context, value, \"Failed to preprocess value\");\n            }\n            return this._subtype.validate(processedSn, context);\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subtype;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"is\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (thing) {\n            var value = isType(thing)\n                ? this._subtype\n                : isStateTreeNode(thing)\n                    ? getSnapshot(thing, false)\n                    : this.preProcessSnapshotSafe(thing);\n            if (value === $preProcessorFailed) {\n                return false;\n            }\n            return this._subtype.validate(value, [{ path: \"\", type: this._subtype }]).length === 0;\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            return this._subtype.isAssignableFrom(type);\n        }\n    });\n    Object.defineProperty(SnapshotProcessor.prototype, \"isMatchingSnapshotId\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, snapshot) {\n            if (!(this._subtype instanceof ComplexType)) {\n                return false;\n            }\n            var processedSn = this.preProcessSnapshot(snapshot);\n            return this._subtype.isMatchingSnapshotId(current, processedSn);\n        }\n    });\n    return SnapshotProcessor;\n}(BaseType));\nfunction proxyNodeTypeMethods(nodeType, snapshotProcessorType) {\n    var e_1, _a;\n    var methods = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        methods[_i - 2] = arguments[_i];\n    }\n    try {\n        for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {\n            var method = methods_1_1.value;\n            nodeType[method] = snapshotProcessorType[method].bind(snapshotProcessorType);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n}\n/**\n * `types.snapshotProcessor` - Runs a pre/post snapshot processor before/after serializing a given type.\n *\n * Example:\n * ```ts\n * const Todo1 = types.model({ text: types.string })\n * // in the backend the text type must be null when empty\n * interface BackendTodo {\n *     text: string | null\n * }\n * const Todo2 = types.snapshotProcessor(Todo1, {\n *     // from snapshot to instance\n *     preProcessor(sn: BackendTodo) {\n *         return {\n *             text: sn.text || \"\";\n *         }\n *     },\n *     // from instance to snapshot\n *     postProcessor(sn): BackendTodo {\n *         return {\n *             text: !sn.text ? null : sn.text\n *         }\n *     }\n * })\n * ```\n *\n * @param type Type to run the processors over.\n * @param processors Processors to run.\n * @param name Type name, or undefined to inherit the inner type one.\n * @returns\n */\nfunction snapshotProcessor(type, processors, name) {\n    assertIsType(type, 1);\n    if (devMode()) {\n        if (processors.postProcessor && typeof processors.postProcessor !== \"function\") {\n            // istanbul ignore next\n            throw fail(\"postSnapshotProcessor must be a function\");\n        }\n        if (processors.preProcessor && typeof processors.preProcessor !== \"function\") {\n            // istanbul ignore next\n            throw fail(\"preSnapshotProcessor must be a function\");\n        }\n    }\n    return new SnapshotProcessor(type, processors, name);\n}\n\nvar needsIdentifierError = \"Map.put can only be used to store complex values that have an identifier type attribute\";\nfunction tryCollectModelTypes(type, modelTypes) {\n    var e_1, _a;\n    var subtypes = type.getSubTypes();\n    if (subtypes === cannotDetermineSubtype) {\n        return false;\n    }\n    if (subtypes) {\n        var subtypesArray = asArray(subtypes);\n        try {\n            for (var subtypesArray_1 = __values(subtypesArray), subtypesArray_1_1 = subtypesArray_1.next(); !subtypesArray_1_1.done; subtypesArray_1_1 = subtypesArray_1.next()) {\n                var subtype = subtypesArray_1_1.value;\n                if (!tryCollectModelTypes(subtype, modelTypes))\n                    return false;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (subtypesArray_1_1 && !subtypesArray_1_1.done && (_a = subtypesArray_1.return)) _a.call(subtypesArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    if (type instanceof ModelType) {\n        modelTypes.push(type);\n    }\n    return true;\n}\n/**\n * @internal\n * @hidden\n */\nvar MapIdentifierMode;\n(function (MapIdentifierMode) {\n    MapIdentifierMode[MapIdentifierMode[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    MapIdentifierMode[MapIdentifierMode[\"YES\"] = 1] = \"YES\";\n    MapIdentifierMode[MapIdentifierMode[\"NO\"] = 2] = \"NO\";\n})(MapIdentifierMode || (MapIdentifierMode = {}));\nvar MSTMap = /** @class */ (function (_super) {\n    __extends(MSTMap, _super);\n    function MSTMap(initialData) {\n        return _super.call(this, initialData, mobx__WEBPACK_IMPORTED_MODULE_0__.observable.ref.enhancer) || this;\n    }\n    Object.defineProperty(MSTMap.prototype, \"get\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (key) {\n            // maybe this is over-enthousiastic? normalize numeric keys to strings\n            return _super.prototype.get.call(this, \"\" + key);\n        }\n    });\n    Object.defineProperty(MSTMap.prototype, \"has\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (key) {\n            return _super.prototype.has.call(this, \"\" + key);\n        }\n    });\n    Object.defineProperty(MSTMap.prototype, \"delete\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (key) {\n            return _super.prototype.delete.call(this, \"\" + key);\n        }\n    });\n    Object.defineProperty(MSTMap.prototype, \"set\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (key, value) {\n            return _super.prototype.set.call(this, \"\" + key, value);\n        }\n    });\n    Object.defineProperty(MSTMap.prototype, \"put\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value) {\n            if (!value)\n                throw fail$1(\"Map.put cannot be used to set empty values\");\n            if (isStateTreeNode(value)) {\n                var node = getStateTreeNode(value);\n                if (devMode()) {\n                    if (!node.identifierAttribute) {\n                        throw fail$1(needsIdentifierError);\n                    }\n                }\n                if (node.identifier === null) {\n                    throw fail$1(needsIdentifierError);\n                }\n                this.set(node.identifier, value);\n                return value;\n            }\n            else if (!isMutable(value)) {\n                throw fail$1(\"Map.put can only be used to store complex values\");\n            }\n            else {\n                var mapNode = getStateTreeNode(this);\n                var mapType = mapNode.type;\n                if (mapType.identifierMode !== MapIdentifierMode.YES) {\n                    throw fail$1(needsIdentifierError);\n                }\n                var idAttr = mapType.mapIdentifierAttribute;\n                var id = value[idAttr];\n                if (!isValidIdentifier(id)) {\n                    // try again but this time after creating a node for the value\n                    // since it might be an optional identifier\n                    var newNode = this.put(mapType.getChildType().create(value, mapNode.environment));\n                    return this.put(getSnapshot(newNode));\n                }\n                var key = normalizeIdentifier(id);\n                this.set(key, value);\n                return this.get(key);\n            }\n        }\n    });\n    return MSTMap;\n}(mobx__WEBPACK_IMPORTED_MODULE_0__.ObservableMap));\n/**\n * @internal\n * @hidden\n */\nvar MapType = /** @class */ (function (_super) {\n    __extends(MapType, _super);\n    function MapType(name, _subType, hookInitializers) {\n        if (hookInitializers === void 0) { hookInitializers = []; }\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"_subType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _subType\n        });\n        Object.defineProperty(_this, \"identifierMode\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: MapIdentifierMode.UNKNOWN\n        });\n        Object.defineProperty(_this, \"mapIdentifierAttribute\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Map\n        });\n        Object.defineProperty(_this, \"hookInitializers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        _this._determineIdentifierMode();\n        _this.hookInitializers = hookInitializers;\n        return _this;\n    }\n    Object.defineProperty(MapType.prototype, \"hooks\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (hooks) {\n            var hookInitializers = this.hookInitializers.length > 0 ? this.hookInitializers.concat(hooks) : [hooks];\n            return new MapType(this.name, this._subType, hookInitializers);\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            this._determineIdentifierMode();\n            return createObjectNode(this, parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"_determineIdentifierMode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            if (this.identifierMode !== MapIdentifierMode.UNKNOWN) {\n                return;\n            }\n            var modelTypes = [];\n            if (tryCollectModelTypes(this._subType, modelTypes)) {\n                var identifierAttribute = modelTypes.reduce(function (current, type) {\n                    if (!type.identifierAttribute)\n                        return current;\n                    if (current && current !== type.identifierAttribute) {\n                        throw fail$1(\"The objects in a map should all have the same identifier attribute, expected '\" + current + \"', but child of type '\" + type.name + \"' declared attribute '\" + type.identifierAttribute + \"' as identifier\");\n                    }\n                    return type.identifierAttribute;\n                }, undefined);\n                if (identifierAttribute) {\n                    this.identifierMode = MapIdentifierMode.YES;\n                    this.mapIdentifierAttribute = identifierAttribute;\n                }\n                else {\n                    this.identifierMode = MapIdentifierMode.NO;\n                }\n            }\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"initializeChildNodes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (objNode, initialSnapshot) {\n            if (initialSnapshot === void 0) { initialSnapshot = {}; }\n            var subType = objNode.type._subType;\n            var result = {};\n            Object.keys(initialSnapshot).forEach(function (name) {\n                result[name] = subType.instantiate(objNode, name, undefined, initialSnapshot[name]);\n            });\n            return result;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"createNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNodes) {\n            return new MSTMap(childNodes);\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"finalizeNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, instance) {\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__._interceptReads)(instance, node.unbox);\n            var type = node.type;\n            type.hookInitializers.forEach(function (initializer) {\n                var hooks = initializer(instance);\n                Object.keys(hooks).forEach(function (name) {\n                    var hook = hooks[name];\n                    var actionInvoker = createActionInvoker(instance, name, hook);\n                    (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(instance, name, actionInvoker);\n                });\n            });\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(instance, this.willChange);\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(instance, this.didChange);\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return \"Map<string, \" + this._subType.describe() + \">\";\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"getChildren\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            // return (node.storedValue as ObservableMap<any>).values()\n            return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.values)(node.storedValue);\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"getChildNode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, key) {\n            var childNode = node.storedValue.get(\"\" + key);\n            if (!childNode)\n                throw fail$1(\"Not a child \" + key);\n            return childNode;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"willChange\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (change) {\n            var node = getStateTreeNode(change.object);\n            var key = change.name;\n            node.assertWritable({ subpath: key });\n            var mapType = node.type;\n            var subType = mapType._subType;\n            switch (change.type) {\n                case \"update\":\n                    {\n                        var newValue = change.newValue;\n                        var oldValue = change.object.get(key);\n                        if (newValue === oldValue)\n                            return null;\n                        typecheckInternal(subType, newValue);\n                        change.newValue = subType.reconcile(node.getChildNode(key), change.newValue, node, key);\n                        mapType.processIdentifier(key, change.newValue);\n                    }\n                    break;\n                case \"add\":\n                    {\n                        typecheckInternal(subType, change.newValue);\n                        change.newValue = subType.instantiate(node, key, undefined, change.newValue);\n                        mapType.processIdentifier(key, change.newValue);\n                    }\n                    break;\n            }\n            return change;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"processIdentifier\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (expected, node) {\n            if (this.identifierMode === MapIdentifierMode.YES && node instanceof ObjectNode) {\n                var identifier = node.identifier;\n                if (identifier !== expected)\n                    throw fail$1(\"A map of objects containing an identifier should always store the object under their own identifier. Trying to store key '\" + identifier + \"', but expected: '\" + expected + \"'\");\n            }\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            var res = {};\n            node.getChildren().forEach(function (childNode) {\n                res[childNode.subpath] = childNode.snapshot;\n            });\n            return res;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"processInitialSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNodes) {\n            var processed = {};\n            Object.keys(childNodes).forEach(function (key) {\n                processed[key] = childNodes[key].getSnapshot();\n            });\n            return processed;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"didChange\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (change) {\n            var node = getStateTreeNode(change.object);\n            switch (change.type) {\n                case \"update\":\n                    return void node.emitPatch({\n                        op: \"replace\",\n                        path: escapeJsonPath(change.name),\n                        value: change.newValue.snapshot,\n                        oldValue: change.oldValue ? change.oldValue.snapshot : undefined\n                    }, node);\n                case \"add\":\n                    return void node.emitPatch({\n                        op: \"add\",\n                        path: escapeJsonPath(change.name),\n                        value: change.newValue.snapshot,\n                        oldValue: undefined\n                    }, node);\n                case \"delete\":\n                    // a node got deleted, get the old snapshot and make the node die\n                    var oldSnapshot = change.oldValue.snapshot;\n                    change.oldValue.die();\n                    // emit the patch\n                    return void node.emitPatch({\n                        op: \"remove\",\n                        path: escapeJsonPath(change.name),\n                        oldValue: oldSnapshot\n                    }, node);\n            }\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"applyPatchLocally\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, subpath, patch) {\n            var target = node.storedValue;\n            switch (patch.op) {\n                case \"add\":\n                case \"replace\":\n                    target.set(subpath, patch.value);\n                    break;\n                case \"remove\":\n                    target.delete(subpath);\n                    break;\n            }\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"applySnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, snapshot) {\n            typecheckInternal(this, snapshot);\n            var target = node.storedValue;\n            var currentKeys = {};\n            Array.from(target.keys()).forEach(function (key) {\n                currentKeys[key] = false;\n            });\n            if (snapshot) {\n                // Don't use target.replace, as it will throw away all existing items first\n                for (var key in snapshot) {\n                    target.set(key, snapshot[key]);\n                    currentKeys[\"\" + key] = true;\n                }\n            }\n            Object.keys(currentKeys).forEach(function (key) {\n                if (currentKeys[key] === false)\n                    target.delete(key);\n            });\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"getChildType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subType;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var _this = this;\n            if (!isPlainObject(value)) {\n                return typeCheckFailure(context, value, \"Value is not a plain object\");\n            }\n            return flattenTypeErrors(Object.keys(value).map(function (path) {\n                return _this._subType.validate(value[path], getContextForPath(context, path, _this._subType));\n            }));\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"getDefaultSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return EMPTY_OBJECT;\n        }\n    });\n    Object.defineProperty(MapType.prototype, \"removeChild\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, subpath) {\n            node.storedValue.delete(subpath);\n        }\n    });\n    return MapType;\n}(ComplexType));\nMapType.prototype.applySnapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(MapType.prototype.applySnapshot);\n/**\n * `types.map` - Creates a key based collection type who's children are all of a uniform declared type.\n * If the type stored in a map has an identifier, it is mandatory to store the child under that identifier in the map.\n *\n * This type will always produce [observable maps](https://mobx.js.org/api.html#observablemap)\n *\n * Example:\n * ```ts\n * const Todo = types.model({\n *   id: types.identifier,\n *   task: types.string\n * })\n *\n * const TodoStore = types.model({\n *   todos: types.map(Todo)\n * })\n *\n * const s = TodoStore.create({ todos: {} })\n * unprotect(s)\n * s.todos.set(17, { task: \"Grab coffee\", id: 17 })\n * s.todos.put({ task: \"Grab cookie\", id: 18 }) // put will infer key from the identifier\n * console.log(s.todos.get(17).task) // prints: \"Grab coffee\"\n * ```\n *\n * @param subtype\n * @returns\n */\nfunction map(subtype) {\n    return new MapType(\"map<string, \" + subtype.name + \">\", subtype);\n}\n/**\n * Returns if a given value represents a map type.\n *\n * @param type\n * @returns `true` if it is a map type.\n */\nfunction isMapType(type) {\n    return isType(type) && (type.flags & TypeFlags.Map) > 0;\n}\n\n/**\n * @internal\n * @hidden\n */\nvar ArrayType = /** @class */ (function (_super) {\n    __extends(ArrayType, _super);\n    function ArrayType(name, _subType, hookInitializers) {\n        if (hookInitializers === void 0) { hookInitializers = []; }\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"_subType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _subType\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Array\n        });\n        Object.defineProperty(_this, \"hookInitializers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        _this.hookInitializers = hookInitializers;\n        return _this;\n    }\n    Object.defineProperty(ArrayType.prototype, \"hooks\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (hooks) {\n            var hookInitializers = this.hookInitializers.length > 0 ? this.hookInitializers.concat(hooks) : [hooks];\n            return new ArrayType(this.name, this._subType, hookInitializers);\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            return createObjectNode(this, parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"initializeChildNodes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (objNode, snapshot) {\n            if (snapshot === void 0) { snapshot = []; }\n            var subType = objNode.type._subType;\n            var result = {};\n            snapshot.forEach(function (item, index) {\n                var subpath = \"\" + index;\n                result[subpath] = subType.instantiate(objNode, subpath, undefined, item);\n            });\n            return result;\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"createNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNodes) {\n            return mobx__WEBPACK_IMPORTED_MODULE_0__.observable.array(convertChildNodesToArray(childNodes), mobxShallow);\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"finalizeNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, instance) {\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__._getAdministration)(instance).dehancer = node.unbox;\n            var type = node.type;\n            type.hookInitializers.forEach(function (initializer) {\n                var hooks = initializer(instance);\n                Object.keys(hooks).forEach(function (name) {\n                    var hook = hooks[name];\n                    var actionInvoker = createActionInvoker(instance, name, hook);\n                    (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(instance, name, actionInvoker);\n                });\n            });\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(instance, this.willChange);\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(instance, this.didChange);\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subType.describe() + \"[]\";\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"getChildren\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            return node.storedValue.slice();\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"getChildNode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, key) {\n            var index = Number(key);\n            if (index < node.storedValue.length)\n                return node.storedValue[index];\n            throw fail$1(\"Not a child: \" + key);\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"willChange\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (change) {\n            var node = getStateTreeNode(change.object);\n            node.assertWritable({ subpath: \"\" + change.index });\n            var subType = node.type._subType;\n            var childNodes = node.getChildren();\n            switch (change.type) {\n                case \"update\":\n                    {\n                        if (change.newValue === change.object[change.index])\n                            return null;\n                        var updatedNodes = reconcileArrayChildren(node, subType, [childNodes[change.index]], [change.newValue], [change.index]);\n                        if (!updatedNodes) {\n                            return null;\n                        }\n                        change.newValue = updatedNodes[0];\n                    }\n                    break;\n                case \"splice\":\n                    {\n                        var index_1 = change.index, removedCount = change.removedCount, added = change.added;\n                        var addedNodes = reconcileArrayChildren(node, subType, childNodes.slice(index_1, index_1 + removedCount), added, added.map(function (_, i) { return index_1 + i; }));\n                        if (!addedNodes) {\n                            return null;\n                        }\n                        change.added = addedNodes;\n                        // update paths of remaining items\n                        for (var i = index_1 + removedCount; i < childNodes.length; i++) {\n                            childNodes[i].setParent(node, \"\" + (i + added.length - removedCount));\n                        }\n                    }\n                    break;\n            }\n            return change;\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            return node.getChildren().map(function (childNode) { return childNode.snapshot; });\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"processInitialSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNodes) {\n            var processed = [];\n            Object.keys(childNodes).forEach(function (key) {\n                processed.push(childNodes[key].getSnapshot());\n            });\n            return processed;\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"didChange\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (change) {\n            var node = getStateTreeNode(change.object);\n            switch (change.type) {\n                case \"update\":\n                    return void node.emitPatch({\n                        op: \"replace\",\n                        path: \"\" + change.index,\n                        value: change.newValue.snapshot,\n                        oldValue: change.oldValue ? change.oldValue.snapshot : undefined\n                    }, node);\n                case \"splice\":\n                    for (var i = change.removedCount - 1; i >= 0; i--)\n                        node.emitPatch({\n                            op: \"remove\",\n                            path: \"\" + (change.index + i),\n                            oldValue: change.removed[i].snapshot\n                        }, node);\n                    for (var i = 0; i < change.addedCount; i++)\n                        node.emitPatch({\n                            op: \"add\",\n                            path: \"\" + (change.index + i),\n                            value: node.getChildNode(\"\" + (change.index + i)).snapshot,\n                            oldValue: undefined\n                        }, node);\n                    return;\n            }\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"applyPatchLocally\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, subpath, patch) {\n            var target = node.storedValue;\n            var index = subpath === \"-\" ? target.length : Number(subpath);\n            switch (patch.op) {\n                case \"replace\":\n                    target[index] = patch.value;\n                    break;\n                case \"add\":\n                    target.splice(index, 0, patch.value);\n                    break;\n                case \"remove\":\n                    target.splice(index, 1);\n                    break;\n            }\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"applySnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, snapshot) {\n            typecheckInternal(this, snapshot);\n            var target = node.storedValue;\n            target.replace(snapshot);\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"getChildType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subType;\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var _this = this;\n            if (!isArray(value)) {\n                return typeCheckFailure(context, value, \"Value is not an array\");\n            }\n            return flattenTypeErrors(value.map(function (item, index) {\n                return _this._subType.validate(item, getContextForPath(context, \"\" + index, _this._subType));\n            }));\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"getDefaultSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return EMPTY_ARRAY;\n        }\n    });\n    Object.defineProperty(ArrayType.prototype, \"removeChild\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, subpath) {\n            node.storedValue.splice(Number(subpath), 1);\n        }\n    });\n    return ArrayType;\n}(ComplexType));\nArrayType.prototype.applySnapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ArrayType.prototype.applySnapshot);\n/**\n * `types.array` - Creates an index based collection type who's children are all of a uniform declared type.\n *\n * This type will always produce [observable arrays](https://mobx.js.org/api.html#observablearray)\n *\n * Example:\n * ```ts\n * const Todo = types.model({\n *   task: types.string\n * })\n *\n * const TodoStore = types.model({\n *   todos: types.array(Todo)\n * })\n *\n * const s = TodoStore.create({ todos: [] })\n * unprotect(s) // needed to allow modifying outside of an action\n * s.todos.push({ task: \"Grab coffee\" })\n * console.log(s.todos[0]) // prints: \"Grab coffee\"\n * ```\n *\n * @param subtype\n * @returns\n */\nfunction array(subtype) {\n    assertIsType(subtype, 1);\n    return new ArrayType(subtype.name + \"[]\", subtype);\n}\nfunction reconcileArrayChildren(parent, childType, oldNodes, newValues, newPaths) {\n    var nothingChanged = true;\n    for (var i = 0;; i++) {\n        var hasNewNode = i <= newValues.length - 1;\n        var oldNode = oldNodes[i];\n        var newValue = hasNewNode ? newValues[i] : undefined;\n        var newPath = \"\" + newPaths[i];\n        // for some reason, instead of newValue we got a node, fallback to the storedValue\n        // TODO: https://github.com/mobxjs/mobx-state-tree/issues/340#issuecomment-325581681\n        if (isNode(newValue))\n            newValue = newValue.storedValue;\n        if (!oldNode && !hasNewNode) {\n            // both are empty, end\n            break;\n        }\n        else if (!hasNewNode) {\n            // new one does not exists\n            nothingChanged = false;\n            oldNodes.splice(i, 1);\n            if (oldNode instanceof ObjectNode) {\n                // since it is going to be returned by pop/splice/shift better create it before killing it\n                // so it doesn't end up in an undead state\n                oldNode.createObservableInstanceIfNeeded();\n            }\n            oldNode.die();\n            i--;\n        }\n        else if (!oldNode) {\n            // there is no old node, create it\n            // check if already belongs to the same parent. if so, avoid pushing item in. only swapping can occur.\n            if (isStateTreeNode(newValue) && getStateTreeNode(newValue).parent === parent) {\n                // this node is owned by this parent, but not in the reconcilable set, so it must be double\n                throw fail$1(\"Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '\" + parent.path + \"/\" + newPath + \"', but it lives already at '\" + getStateTreeNode(newValue).path + \"'\");\n            }\n            nothingChanged = false;\n            var newNode = valueAsNode(childType, parent, newPath, newValue);\n            oldNodes.splice(i, 0, newNode);\n        }\n        else if (areSame(oldNode, newValue)) {\n            // both are the same, reconcile\n            oldNodes[i] = valueAsNode(childType, parent, newPath, newValue, oldNode);\n        }\n        else {\n            // nothing to do, try to reorder\n            var oldMatch = undefined;\n            // find a possible candidate to reuse\n            for (var j = i; j < oldNodes.length; j++) {\n                if (areSame(oldNodes[j], newValue)) {\n                    oldMatch = oldNodes.splice(j, 1)[0];\n                    break;\n                }\n            }\n            nothingChanged = false;\n            var newNode = valueAsNode(childType, parent, newPath, newValue, oldMatch);\n            oldNodes.splice(i, 0, newNode);\n        }\n    }\n    return nothingChanged ? null : oldNodes;\n}\n/**\n * Convert a value to a node at given parent and subpath. Attempts to reuse old node if possible and given.\n */\nfunction valueAsNode(childType, parent, subpath, newValue, oldNode) {\n    // ensure the value is valid-ish\n    typecheckInternal(childType, newValue);\n    function getNewNode() {\n        // the new value has a MST node\n        if (isStateTreeNode(newValue)) {\n            var childNode = getStateTreeNode(newValue);\n            childNode.assertAlive(EMPTY_OBJECT);\n            // the node lives here\n            if (childNode.parent !== null && childNode.parent === parent) {\n                childNode.setParent(parent, subpath);\n                return childNode;\n            }\n        }\n        // there is old node and new one is a value/snapshot\n        if (oldNode) {\n            return childType.reconcile(oldNode, newValue, parent, subpath);\n        }\n        // nothing to do, create from scratch\n        return childType.instantiate(parent, subpath, undefined, newValue);\n    }\n    var newNode = getNewNode();\n    if (oldNode && oldNode !== newNode) {\n        if (oldNode instanceof ObjectNode) {\n            // since it is going to be returned by pop/splice/shift better create it before killing it\n            // so it doesn't end up in an undead state\n            oldNode.createObservableInstanceIfNeeded();\n        }\n        oldNode.die();\n    }\n    return newNode;\n}\n/**\n * Check if a node holds a value.\n */\nfunction areSame(oldNode, newValue) {\n    // never consider dead old nodes for reconciliation\n    if (!oldNode.isAlive) {\n        return false;\n    }\n    // the new value has the same node\n    if (isStateTreeNode(newValue)) {\n        var newNode = getStateTreeNode(newValue);\n        return newNode.isAlive && newNode === oldNode;\n    }\n    // the provided value is the snapshot of the old node\n    if (oldNode.snapshot === newValue) {\n        return true;\n    }\n    // Non object nodes don't get reconciled\n    if (!(oldNode instanceof ObjectNode)) {\n        return false;\n    }\n    var oldNodeType = oldNode.getReconciliationType();\n    // new value is a snapshot with the correct identifier\n    return (oldNode.identifier !== null &&\n        oldNode.identifierAttribute &&\n        isPlainObject(newValue) &&\n        oldNodeType.is(newValue) &&\n        oldNodeType.isMatchingSnapshotId(oldNode, newValue));\n}\n/**\n * Returns if a given value represents an array type.\n *\n * @param type\n * @returns `true` if the type is an array type.\n */\nfunction isArrayType(type) {\n    return isType(type) && (type.flags & TypeFlags.Array) > 0;\n}\n\nvar PRE_PROCESS_SNAPSHOT = \"preProcessSnapshot\";\nvar POST_PROCESS_SNAPSHOT = \"postProcessSnapshot\";\nfunction objectTypeToString() {\n    return getStateTreeNode(this).toString();\n}\nvar defaultObjectOptions = {\n    name: \"AnonymousModel\",\n    properties: {},\n    initializers: EMPTY_ARRAY\n};\nfunction toPropertiesObject(declaredProps) {\n    // loop through properties and ensures that all items are types\n    return Object.keys(declaredProps).reduce(function (props, key) {\n        var _a, _b, _c;\n        // warn if user intended a HOOK\n        if (key in Hook)\n            throw fail$1(\"Hook '\" + key + \"' was defined as property. Hooks should be defined as part of the actions\");\n        // the user intended to use a view\n        var descriptor = Object.getOwnPropertyDescriptor(props, key);\n        if (\"get\" in descriptor) {\n            throw fail$1(\"Getters are not supported as properties. Please use views instead\");\n        }\n        // undefined and null are not valid\n        var value = descriptor.value;\n        if (value === null || value === undefined) {\n            throw fail$1(\"The default value of an attribute cannot be null or undefined as the type cannot be inferred. Did you mean `types.maybe(someType)`?\");\n            // its a primitive, convert to its type\n        }\n        else if (isPrimitive(value)) {\n            return Object.assign({}, props, (_a = {},\n                _a[key] = optional(getPrimitiveFactoryFromValue(value), value),\n                _a));\n            // map defaults to empty object automatically for models\n        }\n        else if (value instanceof MapType) {\n            return Object.assign({}, props, (_b = {},\n                _b[key] = optional(value, {}),\n                _b));\n        }\n        else if (value instanceof ArrayType) {\n            return Object.assign({}, props, (_c = {}, _c[key] = optional(value, []), _c));\n            // its already a type\n        }\n        else if (isType(value)) {\n            return props;\n            // its a function, maybe the user wanted a view?\n        }\n        else if (devMode() && typeof value === \"function\") {\n            throw fail$1(\"Invalid type definition for property '\" + key + \"', it looks like you passed a function. Did you forget to invoke it, or did you intend to declare a view / action?\");\n            // no other complex values\n        }\n        else if (devMode() && typeof value === \"object\") {\n            throw fail$1(\"Invalid type definition for property '\" + key + \"', it looks like you passed an object. Try passing another model type or a types.frozen.\");\n            // WTF did you pass in mate?\n        }\n        else {\n            throw fail$1(\"Invalid type definition for property '\" + key + \"', cannot infer a type from a value like '\" + value + \"' (\" + typeof value + \")\");\n        }\n    }, declaredProps);\n}\n/**\n * @internal\n * @hidden\n */\nvar ModelType = /** @class */ (function (_super) {\n    __extends(ModelType, _super);\n    function ModelType(opts) {\n        var _this = _super.call(this, opts.name || defaultObjectOptions.name) || this;\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Object\n        });\n        /*\n         * The original object definition\n         */\n        Object.defineProperty(_this, \"initializers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"properties\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"preProcessor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"postProcessor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"propertyNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"named\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: function (name) {\n                return _this.cloneAndEnhance({ name: name });\n            }\n        });\n        Object.defineProperty(_this, \"props\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: function (properties) {\n                return _this.cloneAndEnhance({ properties: properties });\n            }\n        });\n        Object.defineProperty(_this, \"preProcessSnapshot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: function (preProcessor) {\n                var currentPreprocessor = _this.preProcessor;\n                if (!currentPreprocessor)\n                    return _this.cloneAndEnhance({ preProcessor: preProcessor });\n                else\n                    return _this.cloneAndEnhance({\n                        preProcessor: function (snapshot) { return currentPreprocessor(preProcessor(snapshot)); }\n                    });\n            }\n        });\n        Object.defineProperty(_this, \"postProcessSnapshot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: function (postProcessor) {\n                var currentPostprocessor = _this.postProcessor;\n                if (!currentPostprocessor)\n                    return _this.cloneAndEnhance({ postProcessor: postProcessor });\n                else\n                    return _this.cloneAndEnhance({\n                        postProcessor: function (snapshot) { return postProcessor(currentPostprocessor(snapshot)); }\n                    });\n            }\n        });\n        Object.assign(_this, defaultObjectOptions, opts);\n        // ensures that any default value gets converted to its related type\n        _this.properties = toPropertiesObject(_this.properties);\n        freeze(_this.properties); // make sure nobody messes with it\n        _this.propertyNames = Object.keys(_this.properties);\n        _this.identifierAttribute = _this._getIdentifierAttribute();\n        return _this;\n    }\n    Object.defineProperty(ModelType.prototype, \"_getIdentifierAttribute\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var identifierAttribute = undefined;\n            this.forAllProps(function (propName, propType) {\n                if (propType.flags & TypeFlags.Identifier) {\n                    if (identifierAttribute)\n                        throw fail$1(\"Cannot define property '\" + propName + \"' as object identifier, property '\" + identifierAttribute + \"' is already defined as identifier property\");\n                    identifierAttribute = propName;\n                }\n            });\n            return identifierAttribute;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"cloneAndEnhance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (opts) {\n            return new ModelType({\n                name: opts.name || this.name,\n                properties: Object.assign({}, this.properties, opts.properties),\n                initializers: this.initializers.concat(opts.initializers || []),\n                preProcessor: opts.preProcessor || this.preProcessor,\n                postProcessor: opts.postProcessor || this.postProcessor\n            });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"actions\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            var _this = this;\n            var actionInitializer = function (self) {\n                _this.instantiateActions(self, fn(self));\n                return self;\n            };\n            return this.cloneAndEnhance({ initializers: [actionInitializer] });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"instantiateActions\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (self, actions) {\n            // check if return is correct\n            if (!isPlainObject(actions))\n                throw fail$1(\"actions initializer should return a plain object containing actions\");\n            // bind actions to the object created\n            Object.keys(actions).forEach(function (name) {\n                // warn if preprocessor was given\n                if (name === PRE_PROCESS_SNAPSHOT)\n                    throw fail$1(\"Cannot define action '\" + PRE_PROCESS_SNAPSHOT + \"', it should be defined using 'type.preProcessSnapshot(fn)' instead\");\n                // warn if postprocessor was given\n                if (name === POST_PROCESS_SNAPSHOT)\n                    throw fail$1(\"Cannot define action '\" + POST_PROCESS_SNAPSHOT + \"', it should be defined using 'type.postProcessSnapshot(fn)' instead\");\n                var action2 = actions[name];\n                // apply hook composition\n                var baseAction = self[name];\n                if (name in Hook && baseAction) {\n                    var specializedAction_1 = action2;\n                    action2 = function () {\n                        baseAction.apply(null, arguments);\n                        specializedAction_1.apply(null, arguments);\n                    };\n                }\n                // the goal of this is to make sure actions using \"this\" can call themselves,\n                // while still allowing the middlewares to register them\n                var middlewares = action2.$mst_middleware; // make sure middlewares are not lost\n                var boundAction = action2.bind(actions);\n                boundAction.$mst_middleware = middlewares;\n                var actionInvoker = createActionInvoker(self, name, boundAction);\n                actions[name] = actionInvoker;\n                (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, name, actionInvoker);\n            });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"volatile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            var _this = this;\n            if (typeof fn !== \"function\") {\n                throw fail$1(\"You passed an \" + typeof fn + \" to volatile state as an argument, when function is expected\");\n            }\n            var stateInitializer = function (self) {\n                _this.instantiateVolatileState(self, fn(self));\n                return self;\n            };\n            return this.cloneAndEnhance({ initializers: [stateInitializer] });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"instantiateVolatileState\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (self, state) {\n            // check views return\n            if (!isPlainObject(state))\n                throw fail$1(\"volatile state initializer should return a plain object containing state\");\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.set)(self, state);\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"extend\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            var _this = this;\n            var initializer = function (self) {\n                var _a = fn(self), actions = _a.actions, views = _a.views, state = _a.state, rest = __rest(_a, [\"actions\", \"views\", \"state\"]);\n                for (var key in rest)\n                    throw fail$1(\"The `extend` function should return an object with a subset of the fields 'actions', 'views' and 'state'. Found invalid key '\" + key + \"'\");\n                if (state)\n                    _this.instantiateVolatileState(self, state);\n                if (views)\n                    _this.instantiateViews(self, views);\n                if (actions)\n                    _this.instantiateActions(self, actions);\n                return self;\n            };\n            return this.cloneAndEnhance({ initializers: [initializer] });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"views\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            var _this = this;\n            var viewInitializer = function (self) {\n                _this.instantiateViews(self, fn(self));\n                return self;\n            };\n            return this.cloneAndEnhance({ initializers: [viewInitializer] });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"instantiateViews\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (self, views) {\n            // check views return\n            if (!isPlainObject(views))\n                throw fail$1(\"views initializer should return a plain object containing views\");\n            Object.getOwnPropertyNames(views).forEach(function (key) {\n                var _a;\n                // is this a computed property?\n                var descriptor = Object.getOwnPropertyDescriptor(views, key);\n                if (\"get\" in descriptor) {\n                    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.defineProperty)(self, key, descriptor);\n                    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.makeObservable)(self, (_a = {}, _a[key] = mobx__WEBPACK_IMPORTED_MODULE_0__.computed, _a));\n                }\n                else if (typeof descriptor.value === \"function\") {\n                    (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, key, descriptor.value);\n                }\n                else {\n                    throw fail$1(\"A view member should either be a function or getter based property\");\n                }\n            });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            var value = isStateTreeNode(initialValue)\n                ? initialValue\n                : this.applySnapshotPreProcessor(initialValue);\n            return createObjectNode(this, parent, subpath, environment, value);\n            // Optimization: record all prop- view- and action names after first construction, and generate an optimal base class\n            // that pre-reserves all these fields for fast object-member lookups\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"initializeChildNodes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (objNode, initialSnapshot) {\n            if (initialSnapshot === void 0) { initialSnapshot = {}; }\n            var type = objNode.type;\n            var result = {};\n            type.forAllProps(function (name, childType) {\n                result[name] = childType.instantiate(objNode, name, undefined, initialSnapshot[name]);\n            });\n            return result;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"createNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNodes) {\n            return mobx__WEBPACK_IMPORTED_MODULE_0__.observable.object(childNodes, EMPTY_OBJECT, mobxShallow);\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"finalizeNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, instance) {\n            addHiddenFinalProp(instance, \"toString\", objectTypeToString);\n            this.forAllProps(function (name) {\n                (0,mobx__WEBPACK_IMPORTED_MODULE_0__._interceptReads)(instance, name, node.unbox);\n            });\n            this.initializers.reduce(function (self, fn) { return fn(self); }, instance);\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.intercept)(instance, this.willChange);\n            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(instance, this.didChange);\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"willChange\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (chg) {\n            // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop\n            var change = chg;\n            var node = getStateTreeNode(change.object);\n            var subpath = change.name;\n            node.assertWritable({ subpath: subpath });\n            var childType = node.type.properties[subpath];\n            // only properties are typed, state are stored as-is references\n            if (childType) {\n                typecheckInternal(childType, change.newValue);\n                change.newValue = childType.reconcile(node.getChildNode(subpath), change.newValue, node, subpath);\n            }\n            return change;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"didChange\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (chg) {\n            // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop\n            var change = chg;\n            var childNode = getStateTreeNode(change.object);\n            var childType = childNode.type.properties[change.name];\n            if (!childType) {\n                // don't emit patches for volatile state\n                return;\n            }\n            var oldChildValue = change.oldValue ? change.oldValue.snapshot : undefined;\n            childNode.emitPatch({\n                op: \"replace\",\n                path: escapeJsonPath(change.name),\n                value: change.newValue.snapshot,\n                oldValue: oldChildValue\n            }, childNode);\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"getChildren\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            var _this = this;\n            var res = [];\n            this.forAllProps(function (name) {\n                res.push(_this.getChildNode(node, name));\n            });\n            return res;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"getChildNode\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, key) {\n            if (!(key in this.properties))\n                throw fail$1(\"Not a value property: \" + key);\n            var adm = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._getAdministration)(node.storedValue, key);\n            var childNode = adm.raw();\n            if (!childNode)\n                throw fail$1(\"Node not available for property \" + key);\n            return childNode;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, applyPostProcess) {\n            var _this = this;\n            if (applyPostProcess === void 0) { applyPostProcess = true; }\n            var res = {};\n            this.forAllProps(function (name, type) {\n                (0,mobx__WEBPACK_IMPORTED_MODULE_0__.getAtom)(node.storedValue, name).reportObserved();\n                res[name] = _this.getChildNode(node, name).snapshot;\n            });\n            if (applyPostProcess) {\n                return this.applySnapshotPostProcessor(res);\n            }\n            return res;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"processInitialSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (childNodes) {\n            var processed = {};\n            Object.keys(childNodes).forEach(function (key) {\n                processed[key] = childNodes[key].getSnapshot();\n            });\n            return this.applySnapshotPostProcessor(processed);\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"applyPatchLocally\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, subpath, patch) {\n            if (!(patch.op === \"replace\" || patch.op === \"add\")) {\n                throw fail$1(\"object does not support operation \" + patch.op);\n            }\n            node.storedValue[subpath] = patch.value;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"applySnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, snapshot) {\n            typecheckInternal(this, snapshot);\n            var preProcessedSnapshot = this.applySnapshotPreProcessor(snapshot);\n            this.forAllProps(function (name) {\n                node.storedValue[name] = preProcessedSnapshot[name];\n            });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"applySnapshotPreProcessor\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot) {\n            var processor = this.preProcessor;\n            return processor ? processor.call(null, snapshot) : snapshot;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"applySnapshotPostProcessor\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot) {\n            var postProcessor = this.postProcessor;\n            if (postProcessor)\n                return postProcessor.call(null, snapshot);\n            return snapshot;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"getChildType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (propertyName) {\n            assertIsString(propertyName, 1);\n            return this.properties[propertyName];\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var _this = this;\n            var snapshot = this.applySnapshotPreProcessor(value);\n            if (!isPlainObject(snapshot)) {\n                return typeCheckFailure(context, snapshot, \"Value is not a plain object\");\n            }\n            return flattenTypeErrors(this.propertyNames.map(function (key) {\n                return _this.properties[key].validate(snapshot[key], getContextForPath(context, key, _this.properties[key]));\n            }));\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"forAllProps\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (fn) {\n            var _this = this;\n            this.propertyNames.forEach(function (key) { return fn(key, _this.properties[key]); });\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var _this = this;\n            // optimization: cache\n            return (\"{ \" +\n                this.propertyNames\n                    .map(function (key) { return key + \": \" + _this.properties[key].describe(); })\n                    .join(\"; \") +\n                \" }\");\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"getDefaultSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return EMPTY_OBJECT;\n        }\n    });\n    Object.defineProperty(ModelType.prototype, \"removeChild\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node, subpath) {\n            node.storedValue[subpath] = undefined;\n        }\n    });\n    return ModelType;\n}(ComplexType));\nModelType.prototype.applySnapshot = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(ModelType.prototype.applySnapshot);\n/**\n * `types.model` - Creates a new model type by providing a name, properties, volatile state and actions.\n *\n * See the [model type](/concepts/trees#creating-models) description or the [getting started](intro/getting-started.md#getting-started-1) tutorial.\n */\nfunction model() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var name = typeof args[0] === \"string\" ? args.shift() : \"AnonymousModel\";\n    var properties = args.shift() || {};\n    return new ModelType({ name: name, properties: properties });\n}\n/**\n * `types.compose` - Composes a new model from one or more existing model types.\n * This method can be invoked in two forms:\n * Given 2 or more model types, the types are composed into a new Type.\n * Given first parameter as a string and 2 or more model types,\n * the types are composed into a new Type with the given name\n */\nfunction compose() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // TODO: just join the base type names if no name is provided\n    var hasTypename = typeof args[0] === \"string\";\n    var typeName = hasTypename ? args[0] : \"AnonymousModel\";\n    if (hasTypename) {\n        args.shift();\n    }\n    // check all parameters\n    if (devMode()) {\n        args.forEach(function (type, i) {\n            assertArg(type, isModelType, \"mobx-state-tree model type\", hasTypename ? i + 2 : i + 1);\n        });\n    }\n    return args\n        .reduce(function (prev, cur) {\n        return prev.cloneAndEnhance({\n            name: prev.name + \"_\" + cur.name,\n            properties: cur.properties,\n            initializers: cur.initializers,\n            preProcessor: function (snapshot) {\n                return cur.applySnapshotPreProcessor(prev.applySnapshotPreProcessor(snapshot));\n            },\n            postProcessor: function (snapshot) {\n                return cur.applySnapshotPostProcessor(prev.applySnapshotPostProcessor(snapshot));\n            }\n        });\n    })\n        .named(typeName);\n}\n/**\n * Returns if a given value represents a model type.\n *\n * @param type\n * @returns\n */\nfunction isModelType(type) {\n    return isType(type) && (type.flags & TypeFlags.Object) > 0;\n}\n\n// TODO: implement CoreType using types.custom ?\n/**\n * @internal\n * @hidden\n */\nvar CoreType = /** @class */ (function (_super) {\n    __extends(CoreType, _super);\n    function CoreType(name, flags, checker, initializer) {\n        if (initializer === void 0) { initializer = identity; }\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: flags\n        });\n        Object.defineProperty(_this, \"checker\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: checker\n        });\n        Object.defineProperty(_this, \"initializer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: initializer\n        });\n        _this.flags = flags;\n        return _this;\n    }\n    Object.defineProperty(CoreType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.name;\n        }\n    });\n    Object.defineProperty(CoreType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            return createScalarNode(this, parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(CoreType.prototype, \"createNewInstance\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (snapshot) {\n            return this.initializer(snapshot);\n        }\n    });\n    Object.defineProperty(CoreType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            if (isPrimitive(value) && this.checker(value)) {\n                return typeCheckSuccess();\n            }\n            var typeName = this.name === \"Date\" ? \"Date or a unix milliseconds timestamp\" : this.name;\n            return typeCheckFailure(context, value, \"Value is not a \" + typeName);\n        }\n    });\n    return CoreType;\n}(SimpleType));\n/**\n * `types.string` - Creates a type that can only contain a string value.\n * This type is used for string values by default\n *\n * Example:\n * ```ts\n * const Person = types.model({\n *   firstName: types.string,\n *   lastName: \"Doe\"\n * })\n * ```\n */\n// tslint:disable-next-line:variable-name\nvar string = new CoreType(\"string\", TypeFlags.String, function (v) { return typeof v === \"string\"; });\n/**\n * `types.number` - Creates a type that can only contain a numeric value.\n * This type is used for numeric values by default\n *\n * Example:\n * ```ts\n * const Vector = types.model({\n *   x: types.number,\n *   y: 1.5\n * })\n * ```\n */\n// tslint:disable-next-line:variable-name\nvar number = new CoreType(\"number\", TypeFlags.Number, function (v) { return typeof v === \"number\"; });\n/**\n * `types.integer` - Creates a type that can only contain an integer value.\n * This type is used for integer values by default\n *\n * Example:\n * ```ts\n * const Size = types.model({\n *   width: types.integer,\n *   height: 10\n * })\n * ```\n */\n// tslint:disable-next-line:variable-name\nvar integer = new CoreType(\"integer\", TypeFlags.Integer, function (v) { return isInteger(v); });\n/**\n * `types.boolean` - Creates a type that can only contain a boolean value.\n * This type is used for boolean values by default\n *\n * Example:\n * ```ts\n * const Thing = types.model({\n *   isCool: types.boolean,\n *   isAwesome: false\n * })\n * ```\n */\n// tslint:disable-next-line:variable-name\nvar boolean = new CoreType(\"boolean\", TypeFlags.Boolean, function (v) { return typeof v === \"boolean\"; });\n/**\n * `types.null` - The type of the value `null`\n */\nvar nullType = new CoreType(\"null\", TypeFlags.Null, function (v) { return v === null; });\n/**\n * `types.undefined` - The type of the value `undefined`\n */\nvar undefinedType = new CoreType(\"undefined\", TypeFlags.Undefined, function (v) { return v === undefined; });\nvar _DatePrimitive = new CoreType(\"Date\", TypeFlags.Date, function (v) { return typeof v === \"number\" || v instanceof Date; }, function (v) { return (v instanceof Date ? v : new Date(v)); });\n_DatePrimitive.getSnapshot = function (node) {\n    return node.storedValue.getTime();\n};\n/**\n * `types.Date` - Creates a type that can only contain a javascript Date value.\n *\n * Example:\n * ```ts\n * const LogLine = types.model({\n *   timestamp: types.Date,\n * })\n *\n * LogLine.create({ timestamp: new Date() })\n * ```\n */\nvar DatePrimitive = _DatePrimitive;\n/**\n * @internal\n * @hidden\n */\nfunction getPrimitiveFactoryFromValue(value) {\n    switch (typeof value) {\n        case \"string\":\n            return string;\n        case \"number\":\n            return number; // In the future, isInteger(value) ? integer : number would be interesting, but would be too breaking for now\n        case \"boolean\":\n            return boolean;\n        case \"object\":\n            if (value instanceof Date)\n                return DatePrimitive;\n    }\n    throw fail$1(\"Cannot determine primitive type from value \" + value);\n}\n/**\n * Returns if a given value represents a primitive type.\n *\n * @param type\n * @returns\n */\nfunction isPrimitiveType(type) {\n    return (isType(type) &&\n        (type.flags &\n            (TypeFlags.String |\n                TypeFlags.Number |\n                TypeFlags.Integer |\n                TypeFlags.Boolean |\n                TypeFlags.Date)) >\n            0);\n}\n\n/**\n * @internal\n * @hidden\n */\nvar Literal = /** @class */ (function (_super) {\n    __extends(Literal, _super);\n    function Literal(value) {\n        var _this = _super.call(this, JSON.stringify(value)) || this;\n        Object.defineProperty(_this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Literal\n        });\n        _this.value = value;\n        return _this;\n    }\n    Object.defineProperty(Literal.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            return createScalarNode(this, parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(Literal.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return JSON.stringify(this.value);\n        }\n    });\n    Object.defineProperty(Literal.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            if (isPrimitive(value) && value === this.value) {\n                return typeCheckSuccess();\n            }\n            return typeCheckFailure(context, value, \"Value is not a literal \" + JSON.stringify(this.value));\n        }\n    });\n    return Literal;\n}(SimpleType));\n/**\n * `types.literal` - The literal type will return a type that will match only the exact given type.\n * The given value must be a primitive, in order to be serialized to a snapshot correctly.\n * You can use literal to match exact strings for example the exact male or female string.\n *\n * Example:\n * ```ts\n * const Person = types.model({\n *     name: types.string,\n *     gender: types.union(types.literal('male'), types.literal('female'))\n * })\n * ```\n *\n * @param value The value to use in the strict equal check\n * @returns\n */\nfunction literal(value) {\n    // check that the given value is a primitive\n    assertArg(value, isPrimitive, \"primitive\", 1);\n    return new Literal(value);\n}\n/**\n * Returns if a given value represents a literal type.\n *\n * @param type\n * @returns\n */\nfunction isLiteralType(type) {\n    return isType(type) && (type.flags & TypeFlags.Literal) > 0;\n}\n\nvar Refinement = /** @class */ (function (_super) {\n    __extends(Refinement, _super);\n    function Refinement(name, _subtype, _predicate, _message) {\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"_subtype\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _subtype\n        });\n        Object.defineProperty(_this, \"_predicate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _predicate\n        });\n        Object.defineProperty(_this, \"_message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _message\n        });\n        return _this;\n    }\n    Object.defineProperty(Refinement.prototype, \"flags\", {\n        get: function () {\n            return this._subtype.flags | TypeFlags.Refinement;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Refinement.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.name;\n        }\n    });\n    Object.defineProperty(Refinement.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            // create the child type\n            return this._subtype.instantiate(parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(Refinement.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            return this._subtype.isAssignableFrom(type);\n        }\n    });\n    Object.defineProperty(Refinement.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var subtypeErrors = this._subtype.validate(value, context);\n            if (subtypeErrors.length > 0)\n                return subtypeErrors;\n            var snapshot = isStateTreeNode(value) ? getStateTreeNode(value).snapshot : value;\n            if (!this._predicate(snapshot)) {\n                return typeCheckFailure(context, value, this._message(value));\n            }\n            return typeCheckSuccess();\n        }\n    });\n    Object.defineProperty(Refinement.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            return this._subtype.reconcile(current, newValue, parent, subpath);\n        }\n    });\n    Object.defineProperty(Refinement.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subtype;\n        }\n    });\n    return Refinement;\n}(BaseType));\n/**\n * `types.refinement` - Creates a type that is more specific than the base type, e.g. `types.refinement(types.string, value => value.length > 5)` to create a type of strings that can only be longer then 5.\n *\n * @param name\n * @param type\n * @param predicate\n * @returns\n */\nfunction refinement() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var name = typeof args[0] === \"string\" ? args.shift() : isType(args[0]) ? args[0].name : null;\n    var type = args[0];\n    var predicate = args[1];\n    var message = args[2]\n        ? args[2]\n        : function (v) { return \"Value does not respect the refinement predicate\"; };\n    // ensures all parameters are correct\n    assertIsType(type, [1, 2]);\n    assertIsString(name, 1);\n    assertIsFunction(predicate, [2, 3]);\n    assertIsFunction(message, [3, 4]);\n    return new Refinement(name, type, predicate, message);\n}\n/**\n * Returns if a given value is a refinement type.\n *\n * @param type\n * @returns\n */\nfunction isRefinementType(type) {\n    return (type.flags & TypeFlags.Refinement) > 0;\n}\n\n/**\n * `types.enumeration` - Can be used to create an string based enumeration.\n * (note: this methods is just sugar for a union of string literals)\n *\n * Example:\n * ```ts\n * const TrafficLight = types.model({\n *   color: types.enumeration(\"Color\", [\"Red\", \"Orange\", \"Green\"])\n * })\n * ```\n *\n * @param name descriptive name of the enumeration (optional)\n * @param options possible values this enumeration can have\n * @returns\n */\nfunction enumeration(name, options) {\n    var realOptions = typeof name === \"string\" ? options : name;\n    // check all options\n    if (devMode()) {\n        realOptions.forEach(function (option, i) {\n            assertIsString(option, i + 1);\n        });\n    }\n    var type = union.apply(void 0, __spread(realOptions.map(function (option) { return literal(\"\" + option); })));\n    if (typeof name === \"string\")\n        type.name = name;\n    return type;\n}\n\n/**\n * @internal\n * @hidden\n */\nvar Union = /** @class */ (function (_super) {\n    __extends(Union, _super);\n    function Union(name, _types, options) {\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"_types\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _types\n        });\n        Object.defineProperty(_this, \"_dispatcher\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(_this, \"_eager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        options = __assign({ eager: true, dispatcher: undefined }, options);\n        _this._dispatcher = options.dispatcher;\n        if (!options.eager)\n            _this._eager = false;\n        return _this;\n    }\n    Object.defineProperty(Union.prototype, \"flags\", {\n        get: function () {\n            var result = TypeFlags.Union;\n            this._types.forEach(function (type) {\n                result |= type.flags;\n            });\n            return result;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Union.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            return this._types.some(function (subType) { return subType.isAssignableFrom(type); });\n        }\n    });\n    Object.defineProperty(Union.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return \"(\" + this._types.map(function (factory) { return factory.describe(); }).join(\" | \") + \")\";\n        }\n    });\n    Object.defineProperty(Union.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            var type = this.determineType(initialValue, undefined);\n            if (!type)\n                throw fail$1(\"No matching type for union \" + this.describe()); // can happen in prod builds\n            return type.instantiate(parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(Union.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            var type = this.determineType(newValue, current.getReconciliationType());\n            if (!type)\n                throw fail$1(\"No matching type for union \" + this.describe()); // can happen in prod builds\n            return type.reconcile(current, newValue, parent, subpath);\n        }\n    });\n    Object.defineProperty(Union.prototype, \"determineType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, reconcileCurrentType) {\n            // try the dispatcher, if defined\n            if (this._dispatcher) {\n                return this._dispatcher(value);\n            }\n            // find the most accomodating type\n            // if we are using reconciliation try the current node type first (fix for #1045)\n            if (reconcileCurrentType) {\n                if (reconcileCurrentType.is(value)) {\n                    return reconcileCurrentType;\n                }\n                return this._types\n                    .filter(function (t) { return t !== reconcileCurrentType; })\n                    .find(function (type) { return type.is(value); });\n            }\n            else {\n                return this._types.find(function (type) { return type.is(value); });\n            }\n        }\n    });\n    Object.defineProperty(Union.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            if (this._dispatcher) {\n                return this._dispatcher(value).validate(value, context);\n            }\n            var allErrors = [];\n            var applicableTypes = 0;\n            for (var i = 0; i < this._types.length; i++) {\n                var type = this._types[i];\n                var errors = type.validate(value, context);\n                if (errors.length === 0) {\n                    if (this._eager)\n                        return typeCheckSuccess();\n                    else\n                        applicableTypes++;\n                }\n                else {\n                    allErrors.push(errors);\n                }\n            }\n            if (applicableTypes === 1)\n                return typeCheckSuccess();\n            return typeCheckFailure(context, value, \"No type is applicable for the union\").concat(flattenTypeErrors(allErrors));\n        }\n    });\n    Object.defineProperty(Union.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._types;\n        }\n    });\n    return Union;\n}(BaseType));\n/**\n * `types.union` - Create a union of multiple types. If the correct type cannot be inferred unambiguously from a snapshot, provide a dispatcher function of the form `(snapshot) => Type`.\n *\n * @param optionsOrType\n * @param otherTypes\n * @returns\n */\nfunction union(optionsOrType) {\n    var otherTypes = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        otherTypes[_i - 1] = arguments[_i];\n    }\n    var options = isType(optionsOrType) ? undefined : optionsOrType;\n    var types = isType(optionsOrType) ? __spread([optionsOrType], otherTypes) : otherTypes;\n    var name = \"(\" + types.map(function (type) { return type.name; }).join(\" | \") + \")\";\n    // check all options\n    if (devMode()) {\n        if (options) {\n            assertArg(options, function (o) { return isPlainObject(o); }, \"object { eager?: boolean, dispatcher?: Function }\", 1);\n        }\n        types.forEach(function (type, i) {\n            assertIsType(type, options ? i + 2 : i + 1);\n        });\n    }\n    return new Union(name, types, options);\n}\n/**\n * Returns if a given value represents a union type.\n *\n * @param type\n * @returns\n */\nfunction isUnionType(type) {\n    return (type.flags & TypeFlags.Union) > 0;\n}\n\n/**\n * @hidden\n * @internal\n */\nvar OptionalValue = /** @class */ (function (_super) {\n    __extends(OptionalValue, _super);\n    function OptionalValue(_subtype, _defaultValue, optionalValues) {\n        var _this = _super.call(this, _subtype.name) || this;\n        Object.defineProperty(_this, \"_subtype\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _subtype\n        });\n        Object.defineProperty(_this, \"_defaultValue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _defaultValue\n        });\n        Object.defineProperty(_this, \"optionalValues\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: optionalValues\n        });\n        return _this;\n    }\n    Object.defineProperty(OptionalValue.prototype, \"flags\", {\n        get: function () {\n            return this._subtype.flags | TypeFlags.Optional;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OptionalValue.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subtype.describe() + \"?\";\n        }\n    });\n    Object.defineProperty(OptionalValue.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            if (this.optionalValues.indexOf(initialValue) >= 0) {\n                var defaultInstanceOrSnapshot = this.getDefaultInstanceOrSnapshot();\n                return this._subtype.instantiate(parent, subpath, environment, defaultInstanceOrSnapshot);\n            }\n            return this._subtype.instantiate(parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(OptionalValue.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            return this._subtype.reconcile(current, this.optionalValues.indexOf(newValue) < 0 && this._subtype.is(newValue)\n                ? newValue\n                : this.getDefaultInstanceOrSnapshot(), parent, subpath);\n        }\n    });\n    Object.defineProperty(OptionalValue.prototype, \"getDefaultInstanceOrSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var defaultInstanceOrSnapshot = typeof this._defaultValue === \"function\"\n                ? this._defaultValue()\n                : this._defaultValue;\n            // while static values are already snapshots and checked on types.optional\n            // generator functions must always be rechecked just in case\n            if (typeof this._defaultValue === \"function\") {\n                typecheckInternal(this, defaultInstanceOrSnapshot);\n            }\n            return defaultInstanceOrSnapshot;\n        }\n    });\n    Object.defineProperty(OptionalValue.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            // defaulted values can be skipped\n            if (this.optionalValues.indexOf(value) >= 0) {\n                return typeCheckSuccess();\n            }\n            // bounce validation to the sub-type\n            return this._subtype.validate(value, context);\n        }\n    });\n    Object.defineProperty(OptionalValue.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            return this._subtype.isAssignableFrom(type);\n        }\n    });\n    Object.defineProperty(OptionalValue.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this._subtype;\n        }\n    });\n    return OptionalValue;\n}(BaseType));\nfunction checkOptionalPreconditions(type, defaultValueOrFunction) {\n    // make sure we never pass direct instances\n    if (typeof defaultValueOrFunction !== \"function\" && isStateTreeNode(defaultValueOrFunction)) {\n        throw fail$1(\"default value cannot be an instance, pass a snapshot or a function that creates an instance/snapshot instead\");\n    }\n    assertIsType(type, 1);\n    if (devMode()) {\n        // we only check default values if they are passed directly\n        // if they are generator functions they will be checked once they are generated\n        // we don't check generator function results here to avoid generating a node just for type-checking purposes\n        // which might generate side-effects\n        if (typeof defaultValueOrFunction !== \"function\") {\n            typecheckInternal(type, defaultValueOrFunction);\n        }\n    }\n}\n/**\n * `types.optional` - Can be used to create a property with a default value.\n *\n * Depending on the third argument (`optionalValues`) there are two ways of operation:\n * - If the argument is not provided, then if a value is not provided in the snapshot (`undefined` or missing),\n *   it will default to the provided `defaultValue`\n * - If the argument is provided, then if the value in the snapshot matches one of the optional values inside the array then it will\n *   default to the provided `defaultValue`. Additionally, if one of the optional values inside the array is `undefined` then a missing\n *   property is also valid.\n *\n *   Note that it is also possible to include values of the same type as the intended subtype as optional values,\n *   in this case the optional value will be transformed into the `defaultValue` (e.g. `types.optional(types.string, \"unnamed\", [undefined, \"\"])`\n *   will transform the snapshot values `undefined` (and therefore missing) and empty strings into the string `\"unnamed\"` when it gets\n *   instantiated).\n *\n * If `defaultValue` is a function, the function will be invoked for every new instance.\n * Applying a snapshot in which the optional value is one of the optional values (or `undefined`/_not_ present if none are provided) causes the\n * value to be reset.\n *\n * Example:\n * ```ts\n * const Todo = types.model({\n *   title: types.string,\n *   subtitle1: types.optional(types.string, \"\", [null]),\n *   subtitle2: types.optional(types.string, \"\", [null, undefined]),\n *   done: types.optional(types.boolean, false),\n *   created: types.optional(types.Date, () => new Date()),\n * })\n *\n * // if done is missing / undefined it will become false\n * // if created is missing / undefined it will get a freshly generated timestamp\n * // if subtitle1 is null it will default to \"\", but it cannot be missing or undefined\n * // if subtitle2 is null or undefined it will default to \"\"; since it can be undefined it can also be missing\n * const todo = Todo.create({ title: \"Get coffee\", subtitle1: null })\n * ```\n *\n * @param type\n * @param defaultValueOrFunction\n * @param optionalValues an optional array with zero or more primitive values (string, number, boolean, null or undefined)\n *                       that will be converted into the default. `[ undefined ]` is assumed when none is provided\n * @returns\n */\nfunction optional(type, defaultValueOrFunction, optionalValues) {\n    checkOptionalPreconditions(type, defaultValueOrFunction);\n    return new OptionalValue(type, defaultValueOrFunction, optionalValues ? optionalValues : undefinedAsOptionalValues);\n}\nvar undefinedAsOptionalValues = [undefined];\n/**\n * Returns if a value represents an optional type.\n *\n * @template IT\n * @param type\n * @returns\n */\nfunction isOptionalType(type) {\n    return isType(type) && (type.flags & TypeFlags.Optional) > 0;\n}\n\nvar optionalUndefinedType = optional(undefinedType, undefined);\nvar optionalNullType = optional(nullType, null);\n/**\n * `types.maybe` - Maybe will make a type nullable, and also optional.\n * The value `undefined` will be used to represent nullability.\n *\n * @param type\n * @returns\n */\nfunction maybe(type) {\n    assertIsType(type, 1);\n    return union(type, optionalUndefinedType);\n}\n/**\n * `types.maybeNull` - Maybe will make a type nullable, and also optional.\n * The value `null` will be used to represent no value.\n *\n * @param type\n * @returns\n */\nfunction maybeNull(type) {\n    assertIsType(type, 1);\n    return union(type, optionalNullType);\n}\n\nvar Late = /** @class */ (function (_super) {\n    __extends(Late, _super);\n    function Late(name, _definition) {\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"_definition\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _definition\n        });\n        Object.defineProperty(_this, \"_subType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        return _this;\n    }\n    Object.defineProperty(Late.prototype, \"flags\", {\n        get: function () {\n            return (this._subType ? this._subType.flags : 0) | TypeFlags.Late;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Late.prototype, \"getSubType\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (mustSucceed) {\n            if (!this._subType) {\n                var t = undefined;\n                try {\n                    t = this._definition();\n                }\n                catch (e) {\n                    if (e instanceof ReferenceError)\n                        // can happen in strict ES5 code when a definition is self refering\n                        t = undefined;\n                    else\n                        throw e;\n                }\n                if (mustSucceed && t === undefined)\n                    throw fail$1(\"Late type seems to be used too early, the definition (still) returns undefined\");\n                if (t) {\n                    if (devMode() && !isType(t))\n                        throw fail$1(\"Failed to determine subtype, make sure types.late returns a type definition.\");\n                    this._subType = t;\n                }\n            }\n            return this._subType;\n        }\n    });\n    Object.defineProperty(Late.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            return this.getSubType(true).instantiate(parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(Late.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            return this.getSubType(true).reconcile(current, newValue, parent, subpath);\n        }\n    });\n    Object.defineProperty(Late.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var t = this.getSubType(false);\n            return t ? t.name : \"<uknown late type>\";\n        }\n    });\n    Object.defineProperty(Late.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            var t = this.getSubType(false);\n            if (!t) {\n                // See #916; the variable the definition closure is pointing to wasn't defined yet, so can't be evaluted yet here\n                return typeCheckSuccess();\n            }\n            return t.validate(value, context);\n        }\n    });\n    Object.defineProperty(Late.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            var t = this.getSubType(false);\n            return t ? t.isAssignableFrom(type) : false;\n        }\n    });\n    Object.defineProperty(Late.prototype, \"getSubTypes\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            var subtype = this.getSubType(false);\n            return subtype ? subtype : cannotDetermineSubtype;\n        }\n    });\n    return Late;\n}(BaseType));\n/**\n * `types.late` - Defines a type that gets implemented later. This is useful when you have to deal with circular dependencies.\n * Please notice that when defining circular dependencies TypeScript isn't smart enough to inference them.\n *\n * Example:\n * ```ts\n *   // TypeScript isn't smart enough to infer self referencing types.\n *  const Node = types.model({\n *       children: types.array(types.late((): IAnyModelType => Node)) // then typecast each array element to Instance<typeof Node>\n *  })\n * ```\n *\n * @param name The name to use for the type that will be returned.\n * @param type A function that returns the type that will be defined.\n * @returns\n */\nfunction late(nameOrType, maybeType) {\n    var name = typeof nameOrType === \"string\" ? nameOrType : \"late(\" + nameOrType.toString() + \")\";\n    var type = typeof nameOrType === \"string\" ? maybeType : nameOrType;\n    // checks that the type is actually a late type\n    if (devMode()) {\n        if (!(typeof type === \"function\" && type.length === 0))\n            throw fail$1(\"Invalid late type, expected a function with zero arguments that returns a type, got: \" +\n                type);\n    }\n    return new Late(name, type);\n}\n/**\n * Returns if a given value represents a late type.\n *\n * @param type\n * @returns\n */\nfunction isLateType(type) {\n    return isType(type) && (type.flags & TypeFlags.Late) > 0;\n}\n\n/**\n * @internal\n * @hidden\n */\nvar Frozen = /** @class */ (function (_super) {\n    __extends(Frozen, _super);\n    function Frozen(subType) {\n        var _this = _super.call(this, subType ? \"frozen(\" + subType.name + \")\" : \"frozen\") || this;\n        Object.defineProperty(_this, \"subType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: subType\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Frozen\n        });\n        return _this;\n    }\n    Object.defineProperty(Frozen.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return \"<any immutable value>\";\n        }\n    });\n    Object.defineProperty(Frozen.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, value) {\n            // create the node\n            return createScalarNode(this, parent, subpath, environment, deepFreeze(value));\n        }\n    });\n    Object.defineProperty(Frozen.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            if (!isSerializable(value)) {\n                return typeCheckFailure(context, value, \"Value is not serializable and cannot be frozen\");\n            }\n            if (this.subType)\n                return this.subType.validate(value, context);\n            return typeCheckSuccess();\n        }\n    });\n    return Frozen;\n}(SimpleType));\nvar untypedFrozenInstance = new Frozen();\n/**\n * `types.frozen` - Frozen can be used to store any value that is serializable in itself (that is valid JSON).\n * Frozen values need to be immutable or treated as if immutable. They need be serializable as well.\n * Values stored in frozen will snapshotted as-is by MST, and internal changes will not be tracked.\n *\n * This is useful to store complex, but immutable values like vectors etc. It can form a powerful bridge to parts of your application that should be immutable, or that assume data to be immutable.\n *\n * Note: if you want to store free-form state that is mutable, or not serializeable, consider using volatile state instead.\n *\n * Frozen properties can be defined in three different ways\n * 1. `types.frozen(SubType)` - provide a valid MST type and frozen will check if the provided data conforms the snapshot for that type\n * 2. `types.frozen({ someDefaultValue: true})` - provide a primitive value, object or array, and MST will infer the type from that object, and also make it the default value for the field\n * 3. `types.frozen<TypeScriptType>()` - provide a typescript type, to help in strongly typing the field (design time only)\n *\n * Example:\n * ```ts\n * const GameCharacter = types.model({\n *   name: string,\n *   location: types.frozen({ x: 0, y: 0})\n * })\n *\n * const hero = GameCharacter.create({\n *   name: \"Mario\",\n *   location: { x: 7, y: 4 }\n * })\n *\n * hero.location = { x: 10, y: 2 } // OK\n * hero.location.x = 7 // Not ok!\n * ```\n *\n * ```ts\n * type Point = { x: number, y: number }\n *    const Mouse = types.model({\n *         loc: types.frozen<Point>()\n *    })\n * ```\n *\n * @param defaultValueOrType\n * @returns\n */\nfunction frozen(arg) {\n    if (arguments.length === 0)\n        return untypedFrozenInstance;\n    else if (isType(arg))\n        return new Frozen(arg);\n    else\n        return optional(untypedFrozenInstance, arg);\n}\n/**\n * Returns if a given value represents a frozen type.\n *\n * @param type\n * @returns\n */\nfunction isFrozenType(type) {\n    return isType(type) && (type.flags & TypeFlags.Frozen) > 0;\n}\n\nfunction getInvalidationCause(hook) {\n    switch (hook) {\n        case Hook.beforeDestroy:\n            return \"destroy\";\n        case Hook.beforeDetach:\n            return \"detach\";\n        default:\n            return undefined;\n    }\n}\nvar StoredReference = /** @class */ (function () {\n    function StoredReference(value, targetType) {\n        Object.defineProperty(this, \"targetType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: targetType\n        });\n        Object.defineProperty(this, \"identifier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"node\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resolvedReference\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (isValidIdentifier(value)) {\n            this.identifier = value;\n        }\n        else if (isStateTreeNode(value)) {\n            var targetNode = getStateTreeNode(value);\n            if (!targetNode.identifierAttribute)\n                throw fail$1(\"Can only store references with a defined identifier attribute.\");\n            var id = targetNode.unnormalizedIdentifier;\n            if (id === null || id === undefined) {\n                throw fail$1(\"Can only store references to tree nodes with a defined identifier.\");\n            }\n            this.identifier = id;\n        }\n        else {\n            throw fail$1(\"Can only store references to tree nodes or identifiers, got: '\" + value + \"'\");\n        }\n    }\n    Object.defineProperty(StoredReference.prototype, \"updateResolvedReference\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            var normalizedId = normalizeIdentifier(this.identifier);\n            var root = node.root;\n            var lastCacheModification = root.identifierCache.getLastCacheModificationPerId(normalizedId);\n            if (!this.resolvedReference ||\n                this.resolvedReference.lastCacheModification !== lastCacheModification) {\n                var targetType = this.targetType;\n                // reference was initialized with the identifier of the target\n                var target = root.identifierCache.resolve(targetType, normalizedId);\n                if (!target) {\n                    throw new InvalidReferenceError(\"[mobx-state-tree] Failed to resolve reference '\" + this.identifier + \"' to type '\" + this.targetType.name + \"' (from node: \" + node.path + \")\");\n                }\n                this.resolvedReference = {\n                    node: target,\n                    lastCacheModification: lastCacheModification\n                };\n            }\n        }\n    });\n    Object.defineProperty(StoredReference.prototype, \"resolvedValue\", {\n        get: function () {\n            this.updateResolvedReference(this.node);\n            return this.resolvedReference.node.value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return StoredReference;\n}());\n/**\n * @internal\n * @hidden\n */\nvar InvalidReferenceError = /** @class */ (function (_super) {\n    __extends(InvalidReferenceError, _super);\n    function InvalidReferenceError(m) {\n        var _this = _super.call(this, m) || this;\n        Object.setPrototypeOf(_this, InvalidReferenceError.prototype);\n        return _this;\n    }\n    return InvalidReferenceError;\n}(Error));\n/**\n * @internal\n * @hidden\n */\nvar BaseReferenceType = /** @class */ (function (_super) {\n    __extends(BaseReferenceType, _super);\n    function BaseReferenceType(targetType, onInvalidated) {\n        var _this = _super.call(this, \"reference(\" + targetType.name + \")\") || this;\n        Object.defineProperty(_this, \"targetType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: targetType\n        });\n        Object.defineProperty(_this, \"onInvalidated\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: onInvalidated\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Reference\n        });\n        return _this;\n    }\n    Object.defineProperty(BaseReferenceType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.name;\n        }\n    });\n    Object.defineProperty(BaseReferenceType.prototype, \"isAssignableFrom\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (type) {\n            return this.targetType.isAssignableFrom(type);\n        }\n    });\n    Object.defineProperty(BaseReferenceType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            return isValidIdentifier(value)\n                ? typeCheckSuccess()\n                : typeCheckFailure(context, value, \"Value is not a valid identifier, which is a string or a number\");\n        }\n    });\n    Object.defineProperty(BaseReferenceType.prototype, \"fireInvalidated\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (cause, storedRefNode, referenceId, refTargetNode) {\n            // to actually invalidate a reference we need an alive parent,\n            // since it is a scalar value (immutable-ish) and we need to change it\n            // from the parent\n            var storedRefParentNode = storedRefNode.parent;\n            if (!storedRefParentNode || !storedRefParentNode.isAlive) {\n                return;\n            }\n            var storedRefParentValue = storedRefParentNode.storedValue;\n            if (!storedRefParentValue) {\n                return;\n            }\n            this.onInvalidated({\n                cause: cause,\n                parent: storedRefParentValue,\n                invalidTarget: refTargetNode ? refTargetNode.storedValue : undefined,\n                invalidId: referenceId,\n                replaceRef: function (newRef) {\n                    applyPatch(storedRefNode.root.storedValue, {\n                        op: \"replace\",\n                        value: newRef,\n                        path: storedRefNode.path\n                    });\n                },\n                removeRef: function () {\n                    if (isModelType(storedRefParentNode.type)) {\n                        this.replaceRef(undefined);\n                    }\n                    else {\n                        applyPatch(storedRefNode.root.storedValue, {\n                            op: \"remove\",\n                            path: storedRefNode.path\n                        });\n                    }\n                }\n            });\n        }\n    });\n    Object.defineProperty(BaseReferenceType.prototype, \"addTargetNodeWatcher\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (storedRefNode, referenceId) {\n            var _this = this;\n            // this will make sure the target node becomes created\n            var refTargetValue = this.getValue(storedRefNode);\n            if (!refTargetValue) {\n                return undefined;\n            }\n            var refTargetNode = getStateTreeNode(refTargetValue);\n            var hookHandler = function (_, refTargetNodeHook) {\n                var cause = getInvalidationCause(refTargetNodeHook);\n                if (!cause) {\n                    return;\n                }\n                _this.fireInvalidated(cause, storedRefNode, referenceId, refTargetNode);\n            };\n            var refTargetDetachHookDisposer = refTargetNode.registerHook(Hook.beforeDetach, hookHandler);\n            var refTargetDestroyHookDisposer = refTargetNode.registerHook(Hook.beforeDestroy, hookHandler);\n            return function () {\n                refTargetDetachHookDisposer();\n                refTargetDestroyHookDisposer();\n            };\n        }\n    });\n    Object.defineProperty(BaseReferenceType.prototype, \"watchTargetNodeForInvalidations\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (storedRefNode, identifier, customGetSet) {\n            var _this = this;\n            if (!this.onInvalidated) {\n                return;\n            }\n            var onRefTargetDestroyedHookDisposer;\n            // get rid of the watcher hook when the stored ref node is destroyed\n            // detached is ignored since scalar nodes (where the reference resides) cannot be detached\n            storedRefNode.registerHook(Hook.beforeDestroy, function () {\n                if (onRefTargetDestroyedHookDisposer) {\n                    onRefTargetDestroyedHookDisposer();\n                }\n            });\n            var startWatching = function (sync) {\n                // re-create hook in case the stored ref gets reattached\n                if (onRefTargetDestroyedHookDisposer) {\n                    onRefTargetDestroyedHookDisposer();\n                }\n                // make sure the target node is actually there and initialized\n                var storedRefParentNode = storedRefNode.parent;\n                var storedRefParentValue = storedRefParentNode && storedRefParentNode.storedValue;\n                if (storedRefParentNode && storedRefParentNode.isAlive && storedRefParentValue) {\n                    var refTargetNodeExists = void 0;\n                    if (customGetSet) {\n                        refTargetNodeExists = !!customGetSet.get(identifier, storedRefParentValue);\n                    }\n                    else {\n                        refTargetNodeExists = storedRefNode.root.identifierCache.has(_this.targetType, normalizeIdentifier(identifier));\n                    }\n                    if (!refTargetNodeExists) {\n                        // we cannot change the reference in sync mode\n                        // since we are in the middle of a reconciliation/instantiation and the change would be overwritten\n                        // for those cases just let the wrong reference be assigned and fail upon usage\n                        // (like current references do)\n                        // this means that effectively this code will only run when it is created from a snapshot\n                        if (!sync) {\n                            _this.fireInvalidated(\"invalidSnapshotReference\", storedRefNode, identifier, null);\n                        }\n                    }\n                    else {\n                        onRefTargetDestroyedHookDisposer = _this.addTargetNodeWatcher(storedRefNode, identifier);\n                    }\n                }\n            };\n            if (storedRefNode.state === NodeLifeCycle.FINALIZED) {\n                // already attached, so the whole tree is ready\n                startWatching(true);\n            }\n            else {\n                if (!storedRefNode.isRoot) {\n                    // start watching once the whole tree is ready\n                    storedRefNode.root.registerHook(Hook.afterCreationFinalization, function () {\n                        // make sure to attach it so it can start listening\n                        if (storedRefNode.parent) {\n                            storedRefNode.parent.createObservableInstanceIfNeeded();\n                        }\n                    });\n                }\n                // start watching once the node is attached somewhere / parent changes\n                storedRefNode.registerHook(Hook.afterAttach, function () {\n                    startWatching(false);\n                });\n            }\n        }\n    });\n    return BaseReferenceType;\n}(SimpleType));\n/**\n * @internal\n * @hidden\n */\nvar IdentifierReferenceType = /** @class */ (function (_super) {\n    __extends(IdentifierReferenceType, _super);\n    function IdentifierReferenceType(targetType, onInvalidated) {\n        return _super.call(this, targetType, onInvalidated) || this;\n    }\n    Object.defineProperty(IdentifierReferenceType.prototype, \"getValue\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (storedRefNode) {\n            if (!storedRefNode.isAlive)\n                return undefined;\n            var storedRef = storedRefNode.storedValue;\n            return storedRef.resolvedValue;\n        }\n    });\n    Object.defineProperty(IdentifierReferenceType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (storedRefNode) {\n            var ref = storedRefNode.storedValue;\n            return ref.identifier;\n        }\n    });\n    Object.defineProperty(IdentifierReferenceType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            var identifier = isStateTreeNode(initialValue)\n                ? getIdentifier(initialValue)\n                : initialValue;\n            var storedRef = new StoredReference(initialValue, this.targetType);\n            var storedRefNode = createScalarNode(this, parent, subpath, environment, storedRef);\n            storedRef.node = storedRefNode;\n            this.watchTargetNodeForInvalidations(storedRefNode, identifier, undefined);\n            return storedRefNode;\n        }\n    });\n    Object.defineProperty(IdentifierReferenceType.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            if (!current.isDetaching && current.type === this) {\n                var compareByValue = isStateTreeNode(newValue);\n                var ref = current.storedValue;\n                if ((!compareByValue && ref.identifier === newValue) ||\n                    (compareByValue && ref.resolvedValue === newValue)) {\n                    current.setParent(parent, subpath);\n                    return current;\n                }\n            }\n            var newNode = this.instantiate(parent, subpath, undefined, newValue);\n            current.die(); // noop if detaching\n            return newNode;\n        }\n    });\n    return IdentifierReferenceType;\n}(BaseReferenceType));\n/**\n * @internal\n * @hidden\n */\nvar CustomReferenceType = /** @class */ (function (_super) {\n    __extends(CustomReferenceType, _super);\n    function CustomReferenceType(targetType, options, onInvalidated) {\n        var _this = _super.call(this, targetType, onInvalidated) || this;\n        Object.defineProperty(_this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        return _this;\n    }\n    Object.defineProperty(CustomReferenceType.prototype, \"getValue\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (storedRefNode) {\n            if (!storedRefNode.isAlive)\n                return undefined;\n            var referencedNode = this.options.get(storedRefNode.storedValue, storedRefNode.parent ? storedRefNode.parent.storedValue : null);\n            return referencedNode;\n        }\n    });\n    Object.defineProperty(CustomReferenceType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (storedRefNode) {\n            return storedRefNode.storedValue;\n        }\n    });\n    Object.defineProperty(CustomReferenceType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, newValue) {\n            var identifier = isStateTreeNode(newValue)\n                ? this.options.set(newValue, parent ? parent.storedValue : null)\n                : newValue;\n            var storedRefNode = createScalarNode(this, parent, subpath, environment, identifier);\n            this.watchTargetNodeForInvalidations(storedRefNode, identifier, this.options);\n            return storedRefNode;\n        }\n    });\n    Object.defineProperty(CustomReferenceType.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            var newIdentifier = isStateTreeNode(newValue)\n                ? this.options.set(newValue, current ? current.storedValue : null)\n                : newValue;\n            if (!current.isDetaching &&\n                current.type === this &&\n                current.storedValue === newIdentifier) {\n                current.setParent(parent, subpath);\n                return current;\n            }\n            var newNode = this.instantiate(parent, subpath, undefined, newIdentifier);\n            current.die(); // noop if detaching\n            return newNode;\n        }\n    });\n    return CustomReferenceType;\n}(BaseReferenceType));\n/**\n * `types.reference` - Creates a reference to another type, which should have defined an identifier.\n * See also the [reference and identifiers](https://github.com/mobxjs/mobx-state-tree#references-and-identifiers) section.\n */\nfunction reference(subType, options) {\n    assertIsType(subType, 1);\n    if (devMode()) {\n        if (arguments.length === 2 && typeof arguments[1] === \"string\") {\n            // istanbul ignore next\n            throw fail$1(\"References with base path are no longer supported. Please remove the base path.\");\n        }\n    }\n    var getSetOptions = options ? options : undefined;\n    var onInvalidated = options\n        ? options.onInvalidated\n        : undefined;\n    if (getSetOptions && (getSetOptions.get || getSetOptions.set)) {\n        if (devMode()) {\n            if (!getSetOptions.get || !getSetOptions.set) {\n                throw fail$1(\"reference options must either contain both a 'get' and a 'set' method or none of them\");\n            }\n        }\n        return new CustomReferenceType(subType, {\n            get: getSetOptions.get,\n            set: getSetOptions.set\n        }, onInvalidated);\n    }\n    else {\n        return new IdentifierReferenceType(subType, onInvalidated);\n    }\n}\n/**\n * Returns if a given value represents a reference type.\n *\n * @param type\n * @returns\n */\nfunction isReferenceType(type) {\n    return (type.flags & TypeFlags.Reference) > 0;\n}\n/**\n * `types.safeReference` - A safe reference is like a standard reference, except that it accepts the undefined value by default\n * and automatically sets itself to undefined (when the parent is a model) / removes itself from arrays and maps\n * when the reference it is pointing to gets detached/destroyed.\n *\n * The optional options parameter object accepts a parameter named `acceptsUndefined`, which is set to true by default, so it is suitable\n * for model properties.\n * When used inside collections (arrays/maps), it is recommended to set this option to false so it can't take undefined as value,\n * which is usually the desired in those cases.\n * Additionally, the optional options parameter object accepts a parameter named `onInvalidated`, which will be called when the reference target node that the reference is pointing to is about to be detached/destroyed\n *\n * Strictly speaking it is a `types.maybe(types.reference(X))` (when `acceptsUndefined` is set to true, the default) and\n * `types.reference(X)` (when `acceptsUndefined` is set to false), both of them with a customized `onInvalidated` option.\n *\n * @param subType\n * @param options\n * @returns\n */\nfunction safeReference(subType, options) {\n    var refType = reference(subType, __assign(__assign({}, options), { onInvalidated: function (ev) {\n            if (options && options.onInvalidated) {\n                options.onInvalidated(ev);\n            }\n            ev.removeRef();\n        } }));\n    if (options && options.acceptsUndefined === false) {\n        return refType;\n    }\n    else {\n        return maybe(refType);\n    }\n}\n\nvar BaseIdentifierType = /** @class */ (function (_super) {\n    __extends(BaseIdentifierType, _super);\n    function BaseIdentifierType(name, validType) {\n        var _this = _super.call(this, name) || this;\n        Object.defineProperty(_this, \"validType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: validType\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Identifier\n        });\n        return _this;\n    }\n    Object.defineProperty(BaseIdentifierType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            if (!parent || !(parent.type instanceof ModelType))\n                throw fail$1(\"Identifier types can only be instantiated as direct child of a model type\");\n            return createScalarNode(this, parent, subpath, environment, initialValue);\n        }\n    });\n    Object.defineProperty(BaseIdentifierType.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, newValue, parent, subpath) {\n            // we don't consider detaching here since identifier are scalar nodes, and scalar nodes cannot be detached\n            if (current.storedValue !== newValue)\n                throw fail$1(\"Tried to change identifier from '\" + current.storedValue + \"' to '\" + newValue + \"'. Changing identifiers is not allowed.\");\n            current.setParent(parent, subpath);\n            return current;\n        }\n    });\n    Object.defineProperty(BaseIdentifierType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            if (typeof value !== this.validType) {\n                return typeCheckFailure(context, value, \"Value is not a valid \" + this.describe() + \", expected a \" + this.validType);\n            }\n            return typeCheckSuccess();\n        }\n    });\n    return BaseIdentifierType;\n}(SimpleType));\n/**\n * @internal\n * @hidden\n */\nvar IdentifierType = /** @class */ (function (_super) {\n    __extends(IdentifierType, _super);\n    function IdentifierType() {\n        var _this = _super.call(this, \"identifier\", \"string\") || this;\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Identifier\n        });\n        return _this;\n    }\n    Object.defineProperty(IdentifierType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return \"identifier\";\n        }\n    });\n    return IdentifierType;\n}(BaseIdentifierType));\n/**\n * @internal\n * @hidden\n */\nvar IdentifierNumberType = /** @class */ (function (_super) {\n    __extends(IdentifierNumberType, _super);\n    function IdentifierNumberType() {\n        return _super.call(this, \"identifierNumber\", \"number\") || this;\n    }\n    Object.defineProperty(IdentifierNumberType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            return node.storedValue;\n        }\n    });\n    Object.defineProperty(IdentifierNumberType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return \"identifierNumber\";\n        }\n    });\n    return IdentifierNumberType;\n}(BaseIdentifierType));\n/**\n * `types.identifier` - Identifiers are used to make references, lifecycle events and reconciling works.\n * Inside a state tree, for each type can exist only one instance for each given identifier.\n * For example there couldn't be 2 instances of user with id 1. If you need more, consider using references.\n * Identifier can be used only as type property of a model.\n * This type accepts as parameter the value type of the identifier field that can be either string or number.\n *\n * Example:\n * ```ts\n *  const Todo = types.model(\"Todo\", {\n *      id: types.identifier,\n *      title: types.string\n *  })\n * ```\n *\n * @returns\n */\nvar identifier = new IdentifierType();\n/**\n * `types.identifierNumber` - Similar to `types.identifier`. This one will serialize from / to a number when applying snapshots\n *\n * Example:\n * ```ts\n *  const Todo = types.model(\"Todo\", {\n *      id: types.identifierNumber,\n *      title: types.string\n *  })\n * ```\n *\n * @returns\n */\nvar identifierNumber = new IdentifierNumberType();\n/**\n * Returns if a given value represents an identifier type.\n *\n * @param type\n * @returns\n */\nfunction isIdentifierType(type) {\n    return isType(type) && (type.flags & TypeFlags.Identifier) > 0;\n}\n/**\n * @internal\n * @hidden\n */\nfunction normalizeIdentifier(id) {\n    return \"\" + id;\n}\n/**\n * @internal\n * @hidden\n */\nfunction isValidIdentifier(id) {\n    return typeof id === \"string\" || typeof id === \"number\";\n}\n/**\n * @internal\n * @hidden\n */\nfunction assertIsValidIdentifier(id, argNumber) {\n    assertArg(id, isValidIdentifier, \"string or number (identifier)\", argNumber);\n}\n\n/**\n * `types.custom` - Creates a custom type. Custom types can be used for arbitrary immutable values, that have a serializable representation. For example, to create your own Date representation, Decimal type etc.\n *\n * The signature of the options is:\n * ```ts\n * export interface CustomTypeOptions<S, T> {\n *     // Friendly name\n *     name: string\n *     // given a serialized value and environment, how to turn it into the target type\n *     fromSnapshot(snapshot: S, env: any): T\n *     // return the serialization of the current value\n *     toSnapshot(value: T): S\n *     // if true, this is a converted value, if false, it's a snapshot\n *     isTargetType(value: T | S): value is T\n *     // a non empty string is assumed to be a validation error\n *     getValidationMessage?(snapshot: S): string\n * }\n * ```\n *\n * Example:\n * ```ts\n * const DecimalPrimitive = types.custom<string, Decimal>({\n *     name: \"Decimal\",\n *     fromSnapshot(value: string) {\n *         return new Decimal(value)\n *     },\n *     toSnapshot(value: Decimal) {\n *         return value.toString()\n *     },\n *     isTargetType(value: string | Decimal): boolean {\n *         return value instanceof Decimal\n *     },\n *     getValidationMessage(value: string): string {\n *         if (/^-?\\d+\\.\\d+$/.test(value)) return \"\" // OK\n *         return `'${value}' doesn't look like a valid decimal number`\n *     }\n * })\n *\n * const Wallet = types.model({\n *     balance: DecimalPrimitive\n * })\n * ```\n *\n * @param options\n * @returns\n */\nfunction custom(options) {\n    return new CustomType(options);\n}\n/**\n * @internal\n * @hidden\n */\nvar CustomType = /** @class */ (function (_super) {\n    __extends(CustomType, _super);\n    function CustomType(options) {\n        var _this = _super.call(this, options.name) || this;\n        Object.defineProperty(_this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(_this, \"flags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: TypeFlags.Custom\n        });\n        return _this;\n    }\n    Object.defineProperty(CustomType.prototype, \"describe\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function () {\n            return this.name;\n        }\n    });\n    Object.defineProperty(CustomType.prototype, \"isValidSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (value, context) {\n            if (this.options.isTargetType(value))\n                return typeCheckSuccess();\n            var typeError = this.options.getValidationMessage(value);\n            if (typeError) {\n                return typeCheckFailure(context, value, \"Invalid value for type '\" + this.name + \"': \" + typeError);\n            }\n            return typeCheckSuccess();\n        }\n    });\n    Object.defineProperty(CustomType.prototype, \"getSnapshot\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (node) {\n            return this.options.toSnapshot(node.storedValue);\n        }\n    });\n    Object.defineProperty(CustomType.prototype, \"instantiate\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (parent, subpath, environment, initialValue) {\n            var valueToStore = this.options.isTargetType(initialValue)\n                ? initialValue\n                : this.options.fromSnapshot(initialValue, parent && parent.root.environment);\n            return createScalarNode(this, parent, subpath, environment, valueToStore);\n        }\n    });\n    Object.defineProperty(CustomType.prototype, \"reconcile\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function (current, value, parent, subpath) {\n            var isSnapshot = !this.options.isTargetType(value);\n            // in theory customs use scalar nodes which cannot be detached, but still...\n            if (!current.isDetaching) {\n                var unchanged = current.type === this &&\n                    (isSnapshot ? value === current.snapshot : value === current.storedValue);\n                if (unchanged) {\n                    current.setParent(parent, subpath);\n                    return current;\n                }\n            }\n            var valueToStore = isSnapshot\n                ? this.options.fromSnapshot(value, parent.root.environment)\n                : value;\n            var newNode = this.instantiate(parent, subpath, undefined, valueToStore);\n            current.die(); // noop if detaching\n            return newNode;\n        }\n    });\n    return CustomType;\n}(SimpleType));\n\n// we import the types to re-export them inside types.\nvar types = {\n    enumeration: enumeration,\n    model: model,\n    compose: compose,\n    custom: custom,\n    reference: reference,\n    safeReference: safeReference,\n    union: union,\n    optional: optional,\n    literal: literal,\n    maybe: maybe,\n    maybeNull: maybeNull,\n    refinement: refinement,\n    string: string,\n    boolean: boolean,\n    number: number,\n    integer: integer,\n    Date: DatePrimitive,\n    map: map,\n    array: array,\n    frozen: frozen,\n    identifier: identifier,\n    identifierNumber: identifierNumber,\n    late: late,\n    undefined: undefinedType,\n    null: nullType,\n    snapshotProcessor: snapshotProcessor\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/Elite_Series.png":
/*!*********************************************!*\
  !*** ./src/images/leagues/Elite_Series.png ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/Elite_Series.336a1a30.png\",\"height\":2576,\"width\":2599,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FElite_Series.336a1a30.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9FbGl0ZV9TZXJpZXMucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDhNQUE4TSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvRWxpdGVfU2VyaWVzLnBuZz9hZjhlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9FbGl0ZV9TZXJpZXMuMzM2YTFhMzAucG5nXCIsXCJoZWlnaHRcIjoyNTc2LFwid2lkdGhcIjoyNTk5LFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRkVsaXRlX1Nlcmllcy4zMzZhMWEzMC5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6OH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/Elite_Series.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/Esports_Balkan_League.png":
/*!******************************************************!*\
  !*** ./src/images/leagues/Esports_Balkan_League.png ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/Esports_Balkan_League.8654524d.png\",\"height\":563,\"width\":600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FEsports_Balkan_League.8654524d.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9Fc3BvcnRzX0JhbGthbl9MZWFndWUucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDhOQUE4TiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvRXNwb3J0c19CYWxrYW5fTGVhZ3VlLnBuZz85YzRhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9Fc3BvcnRzX0JhbGthbl9MZWFndWUuODY1NDUyNGQucG5nXCIsXCJoZWlnaHRcIjo1NjMsXCJ3aWR0aFwiOjYwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZFc3BvcnRzX0JhbGthbl9MZWFndWUuODY1NDUyNGQucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/Esports_Balkan_League.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/Hitpoint_Masters.png":
/*!*************************************************!*\
  !*** ./src/images/leagues/Hitpoint_Masters.png ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/Hitpoint_Masters.a8d1c069.png\",\"height\":360,\"width\":360,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FHitpoint_Masters.a8d1c069.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9IaXRwb2ludF9NYXN0ZXJzLnBuZyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsQ0FBQyxvTkFBb04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2ltYWdlcy9sZWFndWVzL0hpdHBvaW50X01hc3RlcnMucG5nPzliZTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wic3JjXCI6XCIvX25leHQvc3RhdGljL21lZGlhL0hpdHBvaW50X01hc3RlcnMuYThkMWMwNjkucG5nXCIsXCJoZWlnaHRcIjozNjAsXCJ3aWR0aFwiOjM2MCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZIaXRwb2ludF9NYXN0ZXJzLmE4ZDFjMDY5LnBuZyZ3PTgmcT03MFwiLFwiYmx1cldpZHRoXCI6OCxcImJsdXJIZWlnaHRcIjo4fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/Hitpoint_Masters.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/LCK_CL.png":
/*!***************************************!*\
  !*** ./src/images/leagues/LCK_CL.png ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/LCK_CL.58307dd5.png\",\"height\":1000,\"width\":1000,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FLCK_CL.58307dd5.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9MQ0tfQ0wucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLGtNQUFrTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvTENLX0NMLnBuZz9lNTIwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9MQ0tfQ0wuNTgzMDdkZDUucG5nXCIsXCJoZWlnaHRcIjoxMDAwLFwid2lkdGhcIjoxMDAwLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRkxDS19DTC41ODMwN2RkNS5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6OH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/LCK_CL.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/LPLOL.png":
/*!**************************************!*\
  !*** ./src/images/leagues/LPLOL.png ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/LPLOL.5beda8e6.png\",\"height\":1312,\"width\":1312,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FLPLOL.5beda8e6.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9MUExPTC5wbmciLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLENBQUMsZ01BQWdNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9MUExPTC5wbmc/NDJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XCJzcmNcIjpcIi9fbmV4dC9zdGF0aWMvbWVkaWEvTFBMT0wuNWJlZGE4ZTYucG5nXCIsXCJoZWlnaHRcIjoxMzEyLFwid2lkdGhcIjoxMzEyLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRkxQTE9MLjViZWRhOGU2LnBuZyZ3PTgmcT03MFwiLFwiYmx1cldpZHRoXCI6OCxcImJsdXJIZWlnaHRcIjo4fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/LPLOL.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/NLC.png":
/*!************************************!*\
  !*** ./src/images/leagues/NLC.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/NLC.56f83d84.png\",\"height\":600,\"width\":600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FNLC.56f83d84.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9OTEMucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvTkxDLnBuZz81ZDQ2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9OTEMuNTZmODNkODQucG5nXCIsXCJoZWlnaHRcIjo2MDAsXCJ3aWR0aFwiOjYwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZOTEMuNTZmODNkODQucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/NLC.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/Prime_League_1st_Division.png":
/*!**********************************************************!*\
  !*** ./src/images/leagues/Prime_League_1st_Division.png ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/Prime_League_1st_Division.b3d70c12.png\",\"height\":460,\"width\":460,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FPrime_League_1st_Division.b3d70c12.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9QcmltZV9MZWFndWVfMXN0X0RpdmlzaW9uLnBuZyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsQ0FBQyxzT0FBc08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2ltYWdlcy9sZWFndWVzL1ByaW1lX0xlYWd1ZV8xc3RfRGl2aXNpb24ucG5nPzE0NWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wic3JjXCI6XCIvX25leHQvc3RhdGljL21lZGlhL1ByaW1lX0xlYWd1ZV8xc3RfRGl2aXNpb24uYjNkNzBjMTIucG5nXCIsXCJoZWlnaHRcIjo0NjAsXCJ3aWR0aFwiOjQ2MCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZQcmltZV9MZWFndWVfMXN0X0RpdmlzaW9uLmIzZDcwYzEyLnBuZyZ3PTgmcT03MFwiLFwiYmx1cldpZHRoXCI6OCxcImJsdXJIZWlnaHRcIjo4fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/Prime_League_1st_Division.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/Turkey_Academy_League.png":
/*!******************************************************!*\
  !*** ./src/images/leagues/Turkey_Academy_League.png ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/Turkey_Academy_League.ae6961c0.png\",\"height\":444,\"width\":820,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FTurkey_Academy_League.ae6961c0.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":4});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9UdXJrZXlfQWNhZGVteV9MZWFndWUucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDhOQUE4TiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvVHVya2V5X0FjYWRlbXlfTGVhZ3VlLnBuZz85MTM0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9UdXJrZXlfQWNhZGVteV9MZWFndWUuYWU2OTYxYzAucG5nXCIsXCJoZWlnaHRcIjo0NDQsXCJ3aWR0aFwiOjgyMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZUdXJrZXlfQWNhZGVteV9MZWFndWUuYWU2OTYxYzAucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjR9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/Turkey_Academy_League.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/cblol.png":
/*!**************************************!*\
  !*** ./src/images/leagues/cblol.png ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/cblol.a43854e1.png\",\"height\":439,\"width\":600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcblol.a43854e1.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":6});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9jYmxvbC5wbmciLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLENBQUMsOExBQThMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9jYmxvbC5wbmc/MmRhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XCJzcmNcIjpcIi9fbmV4dC9zdGF0aWMvbWVkaWEvY2Jsb2wuYTQzODU0ZTEucG5nXCIsXCJoZWlnaHRcIjo0MzksXCJ3aWR0aFwiOjYwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZjYmxvbC5hNDM4NTRlMS5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6Nn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/cblol.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lck.png":
/*!************************************!*\
  !*** ./src/images/leagues/lck.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lck.e9788f00.png\",\"height\":909,\"width\":909,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flck.e9788f00.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sY2sucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGNrLnBuZz9lODFjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sY2suZTk3ODhmMDAucG5nXCIsXCJoZWlnaHRcIjo5MDksXCJ3aWR0aFwiOjkwOSxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsY2suZTk3ODhmMDAucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lck.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lcknav.png":
/*!***************************************!*\
  !*** ./src/images/leagues/lcknav.png ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lcknav.6237dbf2.png\",\"height\":550,\"width\":550,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flcknav.6237dbf2.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sY2tuYXYucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLGdNQUFnTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGNrbmF2LnBuZz82ZDZkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sY2tuYXYuNjIzN2RiZjIucG5nXCIsXCJoZWlnaHRcIjo1NTAsXCJ3aWR0aFwiOjU1MCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsY2tuYXYuNjIzN2RiZjIucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lcknav.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lco.png":
/*!************************************!*\
  !*** ./src/images/leagues/lco.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lco.19aa27b8.png\",\"height\":350,\"width\":350,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flco.19aa27b8.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sY28ucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGNvLnBuZz8yNGRmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sY28uMTlhYTI3YjgucG5nXCIsXCJoZWlnaHRcIjozNTAsXCJ3aWR0aFwiOjM1MCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsY28uMTlhYTI3YjgucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lco.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lcs.png":
/*!************************************!*\
  !*** ./src/images/leagues/lcs.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lcs.4ad0170b.png\",\"height\":600,\"width\":600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flcs.4ad0170b.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sY3MucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGNzLnBuZz83Mjc2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sY3MuNGFkMDE3MGIucG5nXCIsXCJoZWlnaHRcIjo2MDAsXCJ3aWR0aFwiOjYwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsY3MuNGFkMDE3MGIucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lcs.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lec.png":
/*!************************************!*\
  !*** ./src/images/leagues/lec.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lec.951405b9.png\",\"height\":1230,\"width\":1230,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flec.951405b9.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sZWMucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDRMQUE0TCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGVjLnBuZz8xMmVlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sZWMuOTUxNDA1YjkucG5nXCIsXCJoZWlnaHRcIjoxMjMwLFwid2lkdGhcIjoxMjMwLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRmxlYy45NTE0MDViOS5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6OH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lec.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lecnav.png":
/*!***************************************!*\
  !*** ./src/images/leagues/lecnav.png ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lecnav.63d92a3f.png\",\"height\":1000,\"width\":1000,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flecnav.63d92a3f.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sZWNuYXYucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLGtNQUFrTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGVjbmF2LnBuZz8zMzgxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sZWNuYXYuNjNkOTJhM2YucG5nXCIsXCJoZWlnaHRcIjoxMDAwLFwid2lkdGhcIjoxMDAwLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRmxlY25hdi42M2Q5MmEzZi5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6OH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lecnav.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lfl.png":
/*!************************************!*\
  !*** ./src/images/leagues/lfl.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lfl.beb9dd34.png\",\"height\":942,\"width\":942,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flfl.beb9dd34.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sZmwucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGZsLnBuZz82YzA1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sZmwuYmViOWRkMzQucG5nXCIsXCJoZWlnaHRcIjo5NDIsXCJ3aWR0aFwiOjk0MixcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsZmwuYmViOWRkMzQucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lfl.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/ljl.png":
/*!************************************!*\
  !*** ./src/images/leagues/ljl.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/ljl.5f23bf5d.png\",\"height\":220,\"width\":220,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fljl.5f23bf5d.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9samwucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGpsLnBuZz81MDkyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9samwuNWYyM2JmNWQucG5nXCIsXCJoZWlnaHRcIjoyMjAsXCJ3aWR0aFwiOjIyMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsamwuNWYyM2JmNWQucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/ljl.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lla.png":
/*!************************************!*\
  !*** ./src/images/leagues/lla.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lla.01fe25f0.png\",\"height\":429,\"width\":600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flla.01fe25f0.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":6});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sbGEucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGxhLnBuZz81OWEzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sbGEuMDFmZTI1ZjAucG5nXCIsXCJoZWlnaHRcIjo0MjksXCJ3aWR0aFwiOjYwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsbGEuMDFmZTI1ZjAucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjZ9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lla.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/llanav.png":
/*!***************************************!*\
  !*** ./src/images/leagues/llanav.png ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/llanav.7f9dbf2f.png\",\"height\":1000,\"width\":1000,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fllanav.7f9dbf2f.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sbGFuYXYucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLGtNQUFrTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbGxhbmF2LnBuZz8zN2I4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9sbGFuYXYuN2Y5ZGJmMmYucG5nXCIsXCJoZWlnaHRcIjoxMDAwLFwid2lkdGhcIjoxMDAwLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRmxsYW5hdi43ZjlkYmYyZi5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6OH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/llanav.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lpl.png":
/*!************************************!*\
  !*** ./src/images/leagues/lpl.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lpl.bca75cb3.png\",\"height\":482,\"width\":800,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flpl.bca75cb3.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":5});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9scGwucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvbHBsLnBuZz80MjYzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9scGwuYmNhNzVjYjMucG5nXCIsXCJoZWlnaHRcIjo0ODIsXCJ3aWR0aFwiOjgwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZscGwuYmNhNzVjYjMucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjV9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lpl.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/lvp_superliga.png":
/*!**********************************************!*\
  !*** ./src/images/leagues/lvp_superliga.png ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/lvp_superliga.27c183d8.png\",\"height\":564,\"width\":600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flvp_superliga.27c183d8.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9sdnBfc3VwZXJsaWdhLnBuZyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsQ0FBQyw4TUFBOE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2ltYWdlcy9sZWFndWVzL2x2cF9zdXBlcmxpZ2EucG5nP2U5NWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wic3JjXCI6XCIvX25leHQvc3RhdGljL21lZGlhL2x2cF9zdXBlcmxpZ2EuMjdjMTgzZDgucG5nXCIsXCJoZWlnaHRcIjo1NjQsXCJ3aWR0aFwiOjYwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZsdnBfc3VwZXJsaWdhLjI3YzE4M2Q4LnBuZyZ3PTgmcT03MFwiLFwiYmx1cldpZHRoXCI6OCxcImJsdXJIZWlnaHRcIjo4fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/lvp_superliga.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/na_academy_league.png":
/*!**************************************************!*\
  !*** ./src/images/leagues/na_academy_league.png ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/na_academy_league.55779d1a.png\",\"height\":1600,\"width\":1600,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fna_academy_league.55779d1a.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9uYV9hY2FkZW15X2xlYWd1ZS5wbmciLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLENBQUMsd05BQXdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9uYV9hY2FkZW15X2xlYWd1ZS5wbmc/YWMwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XCJzcmNcIjpcIi9fbmV4dC9zdGF0aWMvbWVkaWEvbmFfYWNhZGVteV9sZWFndWUuNTU3NzlkMWEucG5nXCIsXCJoZWlnaHRcIjoxNjAwLFwid2lkdGhcIjoxNjAwLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRm5hX2FjYWRlbXlfbGVhZ3VlLjU1Nzc5ZDFhLnBuZyZ3PTgmcT03MFwiLFwiYmx1cldpZHRoXCI6OCxcImJsdXJIZWlnaHRcIjo4fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/na_academy_league.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/pcs.png":
/*!************************************!*\
  !*** ./src/images/leagues/pcs.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/pcs.974a850d.png\",\"height\":202,\"width\":200,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpcs.974a850d.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy9wY3MucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvcGNzLnBuZz80MTI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS9wY3MuOTc0YTg1MGQucG5nXCIsXCJoZWlnaHRcIjoyMDIsXCJ3aWR0aFwiOjIwMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZwY3MuOTc0YTg1MGQucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/pcs.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/tcl.png":
/*!************************************!*\
  !*** ./src/images/leagues/tcl.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/tcl.e3cd1638.png\",\"height\":1200,\"width\":1200,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftcl.e3cd1638.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy90Y2wucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDRMQUE0TCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvdGNsLnBuZz9mNzEwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS90Y2wuZTNjZDE2MzgucG5nXCIsXCJoZWlnaHRcIjoxMjAwLFwid2lkdGhcIjoxMjAwLFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRnRjbC5lM2NkMTYzOC5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6OH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/tcl.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/ultraliga.png":
/*!******************************************!*\
  !*** ./src/images/leagues/ultraliga.png ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/ultraliga.f0c85705.png\",\"height\":220,\"width\":220,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fultraliga.f0c85705.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy91bHRyYWxpZ2EucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLHNNQUFzTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvdWx0cmFsaWdhLnBuZz8yYjIyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS91bHRyYWxpZ2EuZjBjODU3MDUucG5nXCIsXCJoZWlnaHRcIjoyMjAsXCJ3aWR0aFwiOjIyMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZ1bHRyYWxpZ2EuZjBjODU3MDUucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/ultraliga.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/images/leagues/vcs.png":
/*!************************************!*\
  !*** ./src/images/leagues/vcs.png ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/vcs.2e68de55.png\",\"height\":220,\"width\":220,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fvcs.2e68de55.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":8});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9pbWFnZXMvbGVhZ3Vlcy92Y3MucG5nIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDBMQUEwTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvaW1hZ2VzL2xlYWd1ZXMvdmNzLnBuZz8xZDcxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInNyY1wiOlwiL19uZXh0L3N0YXRpYy9tZWRpYS92Y3MuMmU2OGRlNTUucG5nXCIsXCJoZWlnaHRcIjoyMjAsXCJ3aWR0aFwiOjIyMCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZ2Y3MuMmU2OGRlNTUucG5nJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjh9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/images/leagues/vcs.png\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/LeagueBar.tsx":
/*!**************************************!*\
  !*** ./src/components/LeagueBar.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! styled-components */ \"(app-pages-browser)/./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store */ \"(app-pages-browser)/./src/store/index.tsx\");\n/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mobx-react */ \"(app-pages-browser)/./node_modules/mobx-react-lite/es/index.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  width: 100%;\\n  height: 60px;\\n  border-bottom: 1px solid black;\\n\\n  &:hover {\\n    background-color: #e8e8e8 !important;\\n  }\\n\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\nconst League = styled_components__WEBPACK_IMPORTED_MODULE_3__[\"default\"].div(_templateObject());\n_c = League;\nconst Logo = styled_components__WEBPACK_IMPORTED_MODULE_3__[\"default\"].div(_templateObject1());\n_c1 = Logo;\nconst LeagueBar = (props)=>{\n    const leagueLogo = (leagueName)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(Logo, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"img\", {\n                style: {\n                    objectFit: \"contain\",\n                    width: \"90%\",\n                    height: \"90%\"\n                },\n                src: __webpack_require__(\"(app-pages-browser)/./src/images/leagues sync recursive ^\\\\.\\\\/.*\\\\.png$\")(\"./\".concat(leagueName.toLowerCase(), \".png\")).default,\n                alt: \"\".concat(leagueName)\n            }, void 0, false, {\n                fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/components/LeagueBar.tsx\",\n                lineNumber: 33,\n                columnNumber: 7\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/components/LeagueBar.tsx\",\n            lineNumber: 32,\n            columnNumber: 5\n        }, undefined);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(mobx_react__WEBPACK_IMPORTED_MODULE_4__.Observer, {\n        children: ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                children: props.leagues && props.leagues.map((league, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(League, {\n                        style: {\n                            backgroundColor: league.id === _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].selectedLeague ? \"gold\" : \"unset\"\n                        },\n                        onClick: ()=>{\n                            if (league.id !== _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].selectedLeague && props.upcomingGames.filter((game)=>game.league_id === league.id).length > 0) {\n                                _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateSelectedTeamOne(props.upcomingGames.filter((game)=>game.league_id === league.id)[0].blue_team);\n                                _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateSelectedTeamTwo(props.upcomingGames.filter((game)=>game.league_id === league.id)[0].red_team);\n                            } else if (league.id !== _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].selectedLeague && props.upcomingGames.filter((game)=>game.league_id === league.id).length === 0) {\n                                _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateSelectedTeamOne(props.games.filter((game)=>game.league_id === league.id)[0].blue_team);\n                                _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateSelectedTeamTwo(props.games.filter((game)=>game.league_id === league.id)[0].red_team);\n                            }\n                            _store__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateSelectedLeague(league.id);\n                        },\n                        children: leagueLogo(league.name)\n                    }, index, false, {\n                        fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/components/LeagueBar.tsx\",\n                        lineNumber: 53,\n                        columnNumber: 15\n                    }, undefined))\n            }, void 0, false)\n    }, void 0, false, {\n        fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/components/LeagueBar.tsx\",\n        lineNumber: 48,\n        columnNumber: 5\n    }, undefined);\n};\n_c2 = LeagueBar;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LeagueBar);\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"League\");\n$RefreshReg$(_c1, \"Logo\");\n$RefreshReg$(_c2, \"LeagueBar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0xlYWd1ZUJhci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDTjtBQUNLO0FBRXRDLE1BQU1HLFNBQVNILHlEQUFNQSxDQUFDSSxHQUFHO0tBQW5CRDtBQWFOLE1BQU1FLE9BQU9MLHlEQUFNQSxDQUFDSSxHQUFHO01BQWpCQztBQVlOLE1BQU1DLFlBQVksQ0FBQ0M7SUFDakIsTUFBTUMsYUFBYSxDQUFDQywyQkFDbEIsOERBQUNKO3NCQUNDLDRFQUFDSztnQkFDQ0MsT0FBTztvQkFDTEMsV0FBVztvQkFDWEMsT0FBTztvQkFDUEMsUUFBUTtnQkFDVjtnQkFDQUMsS0FDRUMsZ0dBQVEsS0FBOEMsT0FBekJQLFdBQVdRLFdBQVcsSUFBRyxTQUFPQyxPQUFPO2dCQUV0RUMsS0FBSyxHQUFjLE9BQVhWOzs7Ozs7Ozs7OztJQUtkLHFCQUNFLDhEQUFDUCxnREFBUUE7a0JBQ04sa0JBQ0M7MEJBQ0dLLE1BQU1hLE9BQU8sSUFDWmIsTUFBTWEsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsUUFBYUMsc0JBQzlCLDhEQUFDcEI7d0JBQ0NRLE9BQU87NEJBQ0xhLGlCQUNFRixPQUFPRyxFQUFFLEtBQUt4Qiw4Q0FBU0EsQ0FBQ3lCLGNBQWMsR0FBRyxTQUFTO3dCQUN0RDt3QkFFQUMsU0FBUzs0QkFDUCxJQUNFTCxPQUFPRyxFQUFFLEtBQUt4Qiw4Q0FBU0EsQ0FBQ3lCLGNBQWMsSUFDdENuQixNQUFNcUIsYUFBYSxDQUFDQyxNQUFNLENBQ3hCLENBQUNDLE9BQWNBLEtBQUtDLFNBQVMsS0FBS1QsT0FBT0csRUFBRSxFQUMzQ08sTUFBTSxHQUFHLEdBQ1g7Z0NBQ0EvQiw4Q0FBU0EsQ0FBQ2dDLHFCQUFxQixDQUM3QjFCLE1BQU1xQixhQUFhLENBQUNDLE1BQU0sQ0FDeEIsQ0FBQ0MsT0FBY0EsS0FBS0MsU0FBUyxLQUFLVCxPQUFPRyxFQUFFLENBQzVDLENBQUMsRUFBRSxDQUFDUyxTQUFTO2dDQUVoQmpDLDhDQUFTQSxDQUFDa0MscUJBQXFCLENBQzdCNUIsTUFBTXFCLGFBQWEsQ0FBQ0MsTUFBTSxDQUN4QixDQUFDQyxPQUFjQSxLQUFLQyxTQUFTLEtBQUtULE9BQU9HLEVBQUUsQ0FDNUMsQ0FBQyxFQUFFLENBQUNXLFFBQVE7NEJBRWpCLE9BQU8sSUFDTGQsT0FBT0csRUFBRSxLQUFLeEIsOENBQVNBLENBQUN5QixjQUFjLElBQ3RDbkIsTUFBTXFCLGFBQWEsQ0FBQ0MsTUFBTSxDQUN4QixDQUFDQyxPQUFjQSxLQUFLQyxTQUFTLEtBQUtULE9BQU9HLEVBQUUsRUFDM0NPLE1BQU0sS0FBSyxHQUNiO2dDQUNBL0IsOENBQVNBLENBQUNnQyxxQkFBcUIsQ0FDN0IxQixNQUFNOEIsS0FBSyxDQUFDUixNQUFNLENBQ2hCLENBQUNDLE9BQWNBLEtBQUtDLFNBQVMsS0FBS1QsT0FBT0csRUFBRSxDQUM1QyxDQUFDLEVBQUUsQ0FBQ1MsU0FBUztnQ0FFaEJqQyw4Q0FBU0EsQ0FBQ2tDLHFCQUFxQixDQUM3QjVCLE1BQU04QixLQUFLLENBQUNSLE1BQU0sQ0FDaEIsQ0FBQ0MsT0FBY0EsS0FBS0MsU0FBUyxLQUFLVCxPQUFPRyxFQUFFLENBQzVDLENBQUMsRUFBRSxDQUFDVyxRQUFROzRCQUVqQjs0QkFFQW5DLDhDQUFTQSxDQUFDcUMsb0JBQW9CLENBQUNoQixPQUFPRyxFQUFFO3dCQUMxQztrQ0FFQ2pCLFdBQVdjLE9BQU9pQixJQUFJO3VCQXZDbEJoQjs7Ozs7Ozs7Ozs7QUE4Q3JCO01BMUVNakI7QUE0RU4sK0RBQWVBLFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvTGVhZ3VlQmFyLnRzeD8yYmM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgUm9vdFN0b3JlIGZyb20gXCIuLi9zdG9yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tIFwibW9ieC1yZWFjdFwiO1xuXG5jb25zdCBMZWFndWUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNjBweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlOGU4ZTggIWltcG9ydGFudDtcbiAgfVxuYDtcblxuY29uc3QgTG9nbyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbGVhZ3VlczogYW55O1xuICBnYW1lczogYW55O1xuICB1cGNvbWluZ0dhbWVzOiBhbnk7XG59XG5cbmNvbnN0IExlYWd1ZUJhciA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgbGVhZ3VlTG9nbyA9IChsZWFndWVOYW1lOiBhbnkpID0+IChcbiAgICA8TG9nbz5cbiAgICAgIDxpbWdcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBvYmplY3RGaXQ6IFwiY29udGFpblwiLFxuICAgICAgICAgIHdpZHRoOiBcIjkwJVwiLFxuICAgICAgICAgIGhlaWdodDogXCI5MCVcIixcbiAgICAgICAgfX1cbiAgICAgICAgc3JjPXtcbiAgICAgICAgICByZXF1aXJlKGAuLi9pbWFnZXMvbGVhZ3Vlcy8ke2xlYWd1ZU5hbWUudG9Mb3dlckNhc2UoKX0ucG5nYCkuZGVmYXVsdFxuICAgICAgICB9XG4gICAgICAgIGFsdD17YCR7bGVhZ3VlTmFtZX1gfVxuICAgICAgLz5cbiAgICA8L0xvZ28+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8T2JzZXJ2ZXI+XG4gICAgICB7KCkgPT4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtwcm9wcy5sZWFndWVzICYmXG4gICAgICAgICAgICBwcm9wcy5sZWFndWVzLm1hcCgobGVhZ3VlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IChcbiAgICAgICAgICAgICAgPExlYWd1ZVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6XG4gICAgICAgICAgICAgICAgICAgIGxlYWd1ZS5pZCA9PT0gUm9vdFN0b3JlLnNlbGVjdGVkTGVhZ3VlID8gXCJnb2xkXCIgOiBcInVuc2V0XCIsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbGVhZ3VlLmlkICE9PSBSb290U3RvcmUuc2VsZWN0ZWRMZWFndWUgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMudXBjb21pbmdHYW1lcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgKGdhbWU6IGFueSkgPT4gZ2FtZS5sZWFndWVfaWQgPT09IGxlYWd1ZS5pZFxuICAgICAgICAgICAgICAgICAgICApLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBSb290U3RvcmUudXBkYXRlU2VsZWN0ZWRUZWFtT25lKFxuICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnVwY29taW5nR2FtZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGdhbWU6IGFueSkgPT4gZ2FtZS5sZWFndWVfaWQgPT09IGxlYWd1ZS5pZFxuICAgICAgICAgICAgICAgICAgICAgIClbMF0uYmx1ZV90ZWFtXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIFJvb3RTdG9yZS51cGRhdGVTZWxlY3RlZFRlYW1Ud28oXG4gICAgICAgICAgICAgICAgICAgICAgcHJvcHMudXBjb21pbmdHYW1lcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZ2FtZTogYW55KSA9PiBnYW1lLmxlYWd1ZV9pZCA9PT0gbGVhZ3VlLmlkXG4gICAgICAgICAgICAgICAgICAgICAgKVswXS5yZWRfdGVhbVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbGVhZ3VlLmlkICE9PSBSb290U3RvcmUuc2VsZWN0ZWRMZWFndWUgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMudXBjb21pbmdHYW1lcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgKGdhbWU6IGFueSkgPT4gZ2FtZS5sZWFndWVfaWQgPT09IGxlYWd1ZS5pZFxuICAgICAgICAgICAgICAgICAgICApLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIFJvb3RTdG9yZS51cGRhdGVTZWxlY3RlZFRlYW1PbmUoXG4gICAgICAgICAgICAgICAgICAgICAgcHJvcHMuZ2FtZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGdhbWU6IGFueSkgPT4gZ2FtZS5sZWFndWVfaWQgPT09IGxlYWd1ZS5pZFxuICAgICAgICAgICAgICAgICAgICAgIClbMF0uYmx1ZV90ZWFtXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIFJvb3RTdG9yZS51cGRhdGVTZWxlY3RlZFRlYW1Ud28oXG4gICAgICAgICAgICAgICAgICAgICAgcHJvcHMuZ2FtZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGdhbWU6IGFueSkgPT4gZ2FtZS5sZWFndWVfaWQgPT09IGxlYWd1ZS5pZFxuICAgICAgICAgICAgICAgICAgICAgIClbMF0ucmVkX3RlYW1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgUm9vdFN0b3JlLnVwZGF0ZVNlbGVjdGVkTGVhZ3VlKGxlYWd1ZS5pZCk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtsZWFndWVMb2dvKGxlYWd1ZS5uYW1lKX1cbiAgICAgICAgICAgICAgPC9MZWFndWU+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvT2JzZXJ2ZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMZWFndWVCYXI7XG4iXSwibmFtZXMiOlsic3R5bGVkIiwiUm9vdFN0b3JlIiwiT2JzZXJ2ZXIiLCJMZWFndWUiLCJkaXYiLCJMb2dvIiwiTGVhZ3VlQmFyIiwicHJvcHMiLCJsZWFndWVMb2dvIiwibGVhZ3VlTmFtZSIsImltZyIsInN0eWxlIiwib2JqZWN0Rml0Iiwid2lkdGgiLCJoZWlnaHQiLCJzcmMiLCJyZXF1aXJlIiwidG9Mb3dlckNhc2UiLCJkZWZhdWx0IiwiYWx0IiwibGVhZ3VlcyIsIm1hcCIsImxlYWd1ZSIsImluZGV4IiwiYmFja2dyb3VuZENvbG9yIiwiaWQiLCJzZWxlY3RlZExlYWd1ZSIsIm9uQ2xpY2siLCJ1cGNvbWluZ0dhbWVzIiwiZmlsdGVyIiwiZ2FtZSIsImxlYWd1ZV9pZCIsImxlbmd0aCIsInVwZGF0ZVNlbGVjdGVkVGVhbU9uZSIsImJsdWVfdGVhbSIsInVwZGF0ZVNlbGVjdGVkVGVhbVR3byIsInJlZF90ZWFtIiwiZ2FtZXMiLCJ1cGRhdGVTZWxlY3RlZExlYWd1ZSIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/LeagueBar.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/pages/MatchStats/index.tsx":
/*!****************************************!*\
  !*** ./src/pages/MatchStats/index.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! styled-components */ \"(app-pages-browser)/./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var _components_LeagueBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/LeagueBar */ \"(app-pages-browser)/./src/components/LeagueBar.tsx\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! mobx-react */ \"(app-pages-browser)/./node_modules/mobx-react/dist/mobxreact.esm.js\");\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/supabase */ \"(app-pages-browser)/./src/utils/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    display: flex;\\n    flex-direction: row;\\n\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    width: 60px;\\n    height: 100vh;\\n    overflow: scroll;\\n    -ms-overflow-style: none;\\n    ::-webkit-scrollbar {\\n        display: none;\\n    }\\n\"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    width: calc(100% - 18% - 60px);\\n    height: 100vh;\\n    border-left: 1px solid black;\\n    border-right: 1px solid black;\\n\"\n    ]);\n    _templateObject2 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    display: flex;\\n    width: 100%;\\n    height: 85%;\\n\"\n    ]);\n    _templateObject3 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    width: 100%;\\n    height: 100%;\\n\"\n    ]);\n    _templateObject4 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 20%;\\n    width: 100%;\\n\"\n    ]);\n    _templateObject5 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    width: 100%;\\n    height: 80%;\\n\"\n    ]);\n    _templateObject6 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    width: 100%;\\n    height: calc(15% - 1px);\\n    border-top: 1px solid black;\\n\"\n    ]);\n    _templateObject7 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject8() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n    width: 18%;\\n    height: 100vh;\\n\"\n    ]);\n    _templateObject8 = function() {\n        return data;\n    };\n    return data;\n}\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst Container = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject());\n_c = Container;\nconst LeagueBarContainer = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject1());\n_c1 = LeagueBarContainer;\nconst CenterInformationContainer = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject2());\n_c2 = CenterInformationContainer;\nconst Teams = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject3());\nconst IndividualTeamContainer = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject4());\nconst TeamSelectContainer = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject5());\nconst TeamDataContainer = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject6());\nconst StatsAnalysis = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject7());\n_c3 = StatsAnalysis;\nconst MatchScheduleBarContainer = styled_components__WEBPACK_IMPORTED_MODULE_5__[\"default\"].div(_templateObject8());\nfunction MatchStats() {\n    _s();\n    const excludeLeagues = [\n        \"LPL\"\n    ];\n    const [leagues, setLeagues] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [teams, setTeams] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [upcomingGames, setUpcomingGames] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [games, setGames] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const fetchLeagues = async ()=>{\n            const { data } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_4__.supabase.from(\"leagues\").select();\n            if (data) {\n                setTeams(data.filter((league)=>!excludeLeagues.includes(league.name)));\n                console.log(\"leagues: \", data);\n            }\n        };\n        const fetchTeams = async ()=>{\n            const { data } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_4__.supabase.from(\"teams\").select();\n            if (data) {\n                setTeams(data.filter((team)=>team.name !== \"Test\"));\n                console.log(\"teams: \", data);\n            }\n        };\n        const fetchUpcomingGames = async ()=>{\n            const { data } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_4__.supabase.from(\"upcoming\").select();\n            if (data) {\n                setUpcomingGames(data);\n                console.log(\"upcoming: \", data);\n            }\n        };\n        const fetchGames = async ()=>{\n            const { data } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_4__.supabase.from(\"games\").select();\n            if (data) {\n                setGames(data);\n                console.log(\"games: \", data);\n            }\n        };\n        fetchLeagues();\n        fetchTeams();\n        fetchUpcomingGames();\n        fetchGames();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(Container, {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(LeagueBarContainer, {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_components_LeagueBar__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                        leagues: leagues,\n                        upcomingGames: upcomingGames,\n                        games: games\n                    }, void 0, false, {\n                        fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/pages/MatchStats/index.tsx\",\n                        lineNumber: 133,\n                        columnNumber: 21\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/pages/MatchStats/index.tsx\",\n                    lineNumber: 132,\n                    columnNumber: 17\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(CenterInformationContainer, {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(StatsAnalysis, {}, void 0, false, {\n                        fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/pages/MatchStats/index.tsx\",\n                        lineNumber: 210,\n                        columnNumber: 21\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/pages/MatchStats/index.tsx\",\n                    lineNumber: 140,\n                    columnNumber: 17\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/pages/MatchStats/index.tsx\",\n            lineNumber: 130,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/carlisle/Desktop/Projects/lol-betting/src/pages/MatchStats/index.tsx\",\n        lineNumber: 129,\n        columnNumber: 9\n    }, this);\n}\n_s(MatchStats, \"BkQlgPFcA94ZgSBNTdDFV5FQPmU=\");\n_c4 = MatchStats;\n/* harmony default export */ __webpack_exports__[\"default\"] = (_c5 = (0,mobx_react__WEBPACK_IMPORTED_MODULE_6__.observer)(MatchStats));\nvar _c, _c1, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c1, \"LeagueBarContainer\");\n$RefreshReg$(_c2, \"CenterInformationContainer\");\n$RefreshReg$(_c3, \"StatsAnalysis\");\n$RefreshReg$(_c4, \"MatchStats\");\n$RefreshReg$(_c5, \"%default%\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/pages/MatchStats/index.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/store/index.tsx":
/*!*****************************!*\
  !*** ./src/store/index.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-state-tree */ \"(app-pages-browser)/./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js\");\n/* harmony import */ var _models_matchBet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/matchBet */ \"(app-pages-browser)/./src/store/models/matchBet.tsx\");\n\n\nconst Store = mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.model({\n    selectedLeague: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.number),\n    selectedTeamOne: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.string),\n    selectedTeamTwo: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.maybeNull(mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.string),\n    matchBets: mobx_state_tree__WEBPACK_IMPORTED_MODULE_1__.types.array(_models_matchBet__WEBPACK_IMPORTED_MODULE_0__.MatchBet)\n}).actions(_c = (self)=>({\n        updateSelectedLeague: (leagueId)=>{\n            self.selectedLeague = leagueId;\n        },\n        updateSelectedTeamOne: (team)=>{\n            self.selectedTeamOne = team;\n        },\n        updateSelectedTeamTwo: (team)=>{\n            self.selectedTeamTwo = team;\n        },\n        createMatchBet: (matchBet)=>{\n            self.matchBets.push(matchBet);\n        },\n        deleteMatchBet: (index)=>{\n            self.matchBets.splice(index, 1);\n        }\n    }));\n_c1 = Store;\nconst RootStore = Store.create();\n/* harmony default export */ __webpack_exports__[\"default\"] = (RootStore);\nvar _c, _c1;\n$RefreshReg$(_c, \"Store$types\\n\t.model({\\n\t\tselectedLeague: types.maybeNull(types.number),\\n\t\tselectedTeamOne: types.maybeNull(types.string),\\n\t\tselectedTeamTwo: types.maybeNull(types.string),\\n\t\tmatchBets: types.array(MatchBet),\\n\t})\\n\\n\t.actions\");\n$RefreshReg$(_c1, \"Store\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zdG9yZS9pbmRleC50c3giLCJtYXBwaW5ncyI6Ijs7O0FBQWlEO0FBQ0w7QUFFNUMsTUFBTUUsUUFBUUYsa0RBQUtBLENBQ2pCRyxLQUFLLENBQUM7SUFDTkMsZ0JBQWdCSixrREFBS0EsQ0FBQ0ssU0FBUyxDQUFDTCxrREFBS0EsQ0FBQ00sTUFBTTtJQUM1Q0MsaUJBQWlCUCxrREFBS0EsQ0FBQ0ssU0FBUyxDQUFDTCxrREFBS0EsQ0FBQ1EsTUFBTTtJQUM3Q0MsaUJBQWlCVCxrREFBS0EsQ0FBQ0ssU0FBUyxDQUFDTCxrREFBS0EsQ0FBQ1EsTUFBTTtJQUM3Q0UsV0FBV1Ysa0RBQUtBLENBQUNXLEtBQUssQ0FBQ1Ysc0RBQVFBO0FBQ2hDLEdBRUNXLE9BQU8sTUFBQyxDQUFDQyxPQUFVO1FBQ25CQyxzQkFBc0IsQ0FBQ0M7WUFDdEJGLEtBQUtULGNBQWMsR0FBR1c7UUFDdkI7UUFDQUMsdUJBQXVCLENBQUNDO1lBQ3ZCSixLQUFLTixlQUFlLEdBQUdVO1FBQ3hCO1FBQ0FDLHVCQUF1QixDQUFDRDtZQUN2QkosS0FBS0osZUFBZSxHQUFHUTtRQUN4QjtRQUNBRSxnQkFBZ0IsQ0FBQ0M7WUFDaEJQLEtBQUtILFNBQVMsQ0FBQ1csSUFBSSxDQUFDRDtRQUNyQjtRQUNBRSxnQkFBZ0IsQ0FBQ0M7WUFDaEJWLEtBQUtILFNBQVMsQ0FBQ2MsTUFBTSxDQUFDRCxPQUFPO1FBQzlCO0lBQ0Q7O0FBRUQsTUFBTUUsWUFBWXZCLE1BQU13QixNQUFNO0FBRTlCLCtEQUFlRCxTQUFTQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9zdG9yZS9pbmRleC50c3g/M2U4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnN0YW5jZSwgdHlwZXMgfSBmcm9tICdtb2J4LXN0YXRlLXRyZWUnXG5pbXBvcnQgeyBNYXRjaEJldCB9IGZyb20gJy4vbW9kZWxzL21hdGNoQmV0J1xuXG5jb25zdCBTdG9yZSA9IHR5cGVzXG5cdC5tb2RlbCh7XG5cdFx0c2VsZWN0ZWRMZWFndWU6IHR5cGVzLm1heWJlTnVsbCh0eXBlcy5udW1iZXIpLFxuXHRcdHNlbGVjdGVkVGVhbU9uZTogdHlwZXMubWF5YmVOdWxsKHR5cGVzLnN0cmluZyksXG5cdFx0c2VsZWN0ZWRUZWFtVHdvOiB0eXBlcy5tYXliZU51bGwodHlwZXMuc3RyaW5nKSxcblx0XHRtYXRjaEJldHM6IHR5cGVzLmFycmF5KE1hdGNoQmV0KSxcblx0fSlcblxuXHQuYWN0aW9ucygoc2VsZikgPT4gKHtcblx0XHR1cGRhdGVTZWxlY3RlZExlYWd1ZTogKGxlYWd1ZUlkOiBudW1iZXIpID0+IHtcblx0XHRcdHNlbGYuc2VsZWN0ZWRMZWFndWUgPSBsZWFndWVJZFxuXHRcdH0sXG5cdFx0dXBkYXRlU2VsZWN0ZWRUZWFtT25lOiAodGVhbTogc3RyaW5nIHwgbnVsbCkgPT4ge1xuXHRcdFx0c2VsZi5zZWxlY3RlZFRlYW1PbmUgPSB0ZWFtXG5cdFx0fSxcblx0XHR1cGRhdGVTZWxlY3RlZFRlYW1Ud286ICh0ZWFtOiBzdHJpbmcgfCBudWxsKSA9PiB7XG5cdFx0XHRzZWxmLnNlbGVjdGVkVGVhbVR3byA9IHRlYW1cblx0XHR9LFxuXHRcdGNyZWF0ZU1hdGNoQmV0OiAobWF0Y2hCZXQ6IGFueSkgPT4ge1xuXHRcdFx0c2VsZi5tYXRjaEJldHMucHVzaChtYXRjaEJldClcblx0XHR9LFxuXHRcdGRlbGV0ZU1hdGNoQmV0OiAoaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0c2VsZi5tYXRjaEJldHMuc3BsaWNlKGluZGV4LCAxKVxuXHRcdH0sXG5cdH0pKVxuXG5jb25zdCBSb290U3RvcmUgPSBTdG9yZS5jcmVhdGUoKVxuXG5leHBvcnQgZGVmYXVsdCBSb290U3RvcmVcblxuZXhwb3J0IGludGVyZmFjZSBJU3RvcmUgZXh0ZW5kcyBJbnN0YW5jZTx0eXBlb2YgU3RvcmU+IHt9XG4iXSwibmFtZXMiOlsidHlwZXMiLCJNYXRjaEJldCIsIlN0b3JlIiwibW9kZWwiLCJzZWxlY3RlZExlYWd1ZSIsIm1heWJlTnVsbCIsIm51bWJlciIsInNlbGVjdGVkVGVhbU9uZSIsInN0cmluZyIsInNlbGVjdGVkVGVhbVR3byIsIm1hdGNoQmV0cyIsImFycmF5IiwiYWN0aW9ucyIsInNlbGYiLCJ1cGRhdGVTZWxlY3RlZExlYWd1ZSIsImxlYWd1ZUlkIiwidXBkYXRlU2VsZWN0ZWRUZWFtT25lIiwidGVhbSIsInVwZGF0ZVNlbGVjdGVkVGVhbVR3byIsImNyZWF0ZU1hdGNoQmV0IiwibWF0Y2hCZXQiLCJwdXNoIiwiZGVsZXRlTWF0Y2hCZXQiLCJpbmRleCIsInNwbGljZSIsIlJvb3RTdG9yZSIsImNyZWF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/index.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/store/models/matchBet.tsx":
/*!***************************************!*\
  !*** ./src/store/models/matchBet.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MatchBet: function() { return /* binding */ MatchBet; }\n/* harmony export */ });\n/* harmony import */ var mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx-state-tree */ \"(app-pages-browser)/./node_modules/mobx-state-tree/dist/mobx-state-tree.module.js\");\n\nconst MatchBet = mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.model(\"MatchBet\", {\n    id: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.identifier,\n    league: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.string,\n    match: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.string,\n    map: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.string,\n    betOnTeam: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.string,\n    matchObjective: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.string,\n    matchOdds: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.number,\n    matchDate: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.string,\n    betAmount: mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__.types.number\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zdG9yZS9tb2RlbHMvbWF0Y2hCZXQudHN4IiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZEO0FBRXRELE1BQU1DLFdBQVdELGtEQUFLQSxDQUFDRSxLQUFLLENBQUMsWUFBWTtJQUMvQ0MsSUFBSUgsa0RBQUtBLENBQUNJLFVBQVU7SUFDcEJDLFFBQVFMLGtEQUFLQSxDQUFDTSxNQUFNO0lBQ3BCQyxPQUFPUCxrREFBS0EsQ0FBQ00sTUFBTTtJQUNuQkUsS0FBS1Isa0RBQUtBLENBQUNNLE1BQU07SUFDakJHLFdBQVdULGtEQUFLQSxDQUFDTSxNQUFNO0lBQ3ZCSSxnQkFBZ0JWLGtEQUFLQSxDQUFDTSxNQUFNO0lBQzVCSyxXQUFXWCxrREFBS0EsQ0FBQ1ksTUFBTTtJQUN2QkMsV0FBV2Isa0RBQUtBLENBQUNNLE1BQU07SUFDdkJRLFdBQVdkLGtEQUFLQSxDQUFDWSxNQUFNO0FBQ3hCLEdBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0b3JlL21vZGVscy9tYXRjaEJldC50c3g/ZDE0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlcywgSW5zdGFuY2UsIFNuYXBzaG90SW4gfSBmcm9tICdtb2J4LXN0YXRlLXRyZWUnXG5cbmV4cG9ydCBjb25zdCBNYXRjaEJldCA9IHR5cGVzLm1vZGVsKCdNYXRjaEJldCcsIHtcblx0aWQ6IHR5cGVzLmlkZW50aWZpZXIsXG5cdGxlYWd1ZTogdHlwZXMuc3RyaW5nLFxuXHRtYXRjaDogdHlwZXMuc3RyaW5nLFxuXHRtYXA6IHR5cGVzLnN0cmluZyxcblx0YmV0T25UZWFtOiB0eXBlcy5zdHJpbmcsXG5cdG1hdGNoT2JqZWN0aXZlOiB0eXBlcy5zdHJpbmcsXG5cdG1hdGNoT2RkczogdHlwZXMubnVtYmVyLFxuXHRtYXRjaERhdGU6IHR5cGVzLnN0cmluZyxcblx0YmV0QW1vdW50OiB0eXBlcy5udW1iZXIsXG59KVxuXG5leHBvcnQgaW50ZXJmYWNlIElNYXRjaEJldCBleHRlbmRzIEluc3RhbmNlPHR5cGVvZiBNYXRjaEJldD4ge31cbmV4cG9ydCBpbnRlcmZhY2UgSU1hdGNoQmV0U25hcHNob3QgZXh0ZW5kcyBTbmFwc2hvdEluPHR5cGVvZiBNYXRjaEJldD4ge31cbiJdLCJuYW1lcyI6WyJ0eXBlcyIsIk1hdGNoQmV0IiwibW9kZWwiLCJpZCIsImlkZW50aWZpZXIiLCJsZWFndWUiLCJzdHJpbmciLCJtYXRjaCIsIm1hcCIsImJldE9uVGVhbSIsIm1hdGNoT2JqZWN0aXZlIiwibWF0Y2hPZGRzIiwibnVtYmVyIiwibWF0Y2hEYXRlIiwiYmV0QW1vdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/models/matchBet.tsx\n"));

/***/ })

});